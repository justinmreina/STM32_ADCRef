
STM32_ADCRef.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006970  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006a2c  08006a2c  00016a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006b0c  08006b0c  00016b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006b10  08006b10  00016b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08006b14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000144  20000010  08006b24  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000100  20000154  08006b24  00020154  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   000210d4  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000503d  00000000  00000000  0004110c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ba0  00000000  00000000  00046150  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007a8  00000000  00000000  00046cf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008108  00000000  00000000  00047498  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000034d5  00000000  00000000  0004f5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00052a75  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00001c7c  00000000  00000000  00052af4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         00000024  00000000  00000000  00054770  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  00054794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000010 	.word	0x20000010
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08006a10 	.word	0x08006a10

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000014 	.word	0x20000014
 8000100:	08006a10 	.word	0x08006a10
 8000104:	08006b14 	.word	0x08006b14
 8000108:	20000000 	.word	0x20000000
 800010c:	20000010 	.word	0x20000010
 8000110:	20000010 	.word	0x20000010
 8000114:	20000154 	.word	0x20000154

08000118 <strlen>:
 8000118:	2300      	movs	r3, #0
 800011a:	5cc2      	ldrb	r2, [r0, r3]
 800011c:	3301      	adds	r3, #1
 800011e:	2a00      	cmp	r2, #0
 8000120:	d1fb      	bne.n	800011a <strlen+0x2>
 8000122:	1e58      	subs	r0, r3, #1
 8000124:	4770      	bx	lr
	...

08000128 <__udivsi3>:
 8000128:	2200      	movs	r2, #0
 800012a:	0843      	lsrs	r3, r0, #1
 800012c:	428b      	cmp	r3, r1
 800012e:	d374      	bcc.n	800021a <__udivsi3+0xf2>
 8000130:	0903      	lsrs	r3, r0, #4
 8000132:	428b      	cmp	r3, r1
 8000134:	d35f      	bcc.n	80001f6 <__udivsi3+0xce>
 8000136:	0a03      	lsrs	r3, r0, #8
 8000138:	428b      	cmp	r3, r1
 800013a:	d344      	bcc.n	80001c6 <__udivsi3+0x9e>
 800013c:	0b03      	lsrs	r3, r0, #12
 800013e:	428b      	cmp	r3, r1
 8000140:	d328      	bcc.n	8000194 <__udivsi3+0x6c>
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d30d      	bcc.n	8000164 <__udivsi3+0x3c>
 8000148:	22ff      	movs	r2, #255	; 0xff
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	ba12      	rev	r2, r2
 800014e:	0c03      	lsrs	r3, r0, #16
 8000150:	428b      	cmp	r3, r1
 8000152:	d302      	bcc.n	800015a <__udivsi3+0x32>
 8000154:	1212      	asrs	r2, r2, #8
 8000156:	0209      	lsls	r1, r1, #8
 8000158:	d065      	beq.n	8000226 <__udivsi3+0xfe>
 800015a:	0b03      	lsrs	r3, r0, #12
 800015c:	428b      	cmp	r3, r1
 800015e:	d319      	bcc.n	8000194 <__udivsi3+0x6c>
 8000160:	e000      	b.n	8000164 <__udivsi3+0x3c>
 8000162:	0a09      	lsrs	r1, r1, #8
 8000164:	0bc3      	lsrs	r3, r0, #15
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x46>
 800016a:	03cb      	lsls	r3, r1, #15
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b83      	lsrs	r3, r0, #14
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x52>
 8000176:	038b      	lsls	r3, r1, #14
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b43      	lsrs	r3, r0, #13
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x5e>
 8000182:	034b      	lsls	r3, r1, #13
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b03      	lsrs	r3, r0, #12
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x6a>
 800018e:	030b      	lsls	r3, r1, #12
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0ac3      	lsrs	r3, r0, #11
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x76>
 800019a:	02cb      	lsls	r3, r1, #11
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a83      	lsrs	r3, r0, #10
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x82>
 80001a6:	028b      	lsls	r3, r1, #10
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a43      	lsrs	r3, r0, #9
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x8e>
 80001b2:	024b      	lsls	r3, r1, #9
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a03      	lsrs	r3, r0, #8
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x9a>
 80001be:	020b      	lsls	r3, r1, #8
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	d2cd      	bcs.n	8000162 <__udivsi3+0x3a>
 80001c6:	09c3      	lsrs	r3, r0, #7
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xa8>
 80001cc:	01cb      	lsls	r3, r1, #7
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0983      	lsrs	r3, r0, #6
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xb4>
 80001d8:	018b      	lsls	r3, r1, #6
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0943      	lsrs	r3, r0, #5
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xc0>
 80001e4:	014b      	lsls	r3, r1, #5
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0903      	lsrs	r3, r0, #4
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xcc>
 80001f0:	010b      	lsls	r3, r1, #4
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	08c3      	lsrs	r3, r0, #3
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xd8>
 80001fc:	00cb      	lsls	r3, r1, #3
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0883      	lsrs	r3, r0, #2
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xe4>
 8000208:	008b      	lsls	r3, r1, #2
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	0843      	lsrs	r3, r0, #1
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xf0>
 8000214:	004b      	lsls	r3, r1, #1
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	1a41      	subs	r1, r0, r1
 800021c:	d200      	bcs.n	8000220 <__udivsi3+0xf8>
 800021e:	4601      	mov	r1, r0
 8000220:	4152      	adcs	r2, r2
 8000222:	4610      	mov	r0, r2
 8000224:	4770      	bx	lr
 8000226:	e7ff      	b.n	8000228 <__udivsi3+0x100>
 8000228:	b501      	push	{r0, lr}
 800022a:	2000      	movs	r0, #0
 800022c:	f000 f8f0 	bl	8000410 <__aeabi_idiv0>
 8000230:	bd02      	pop	{r1, pc}
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uidivmod>:
 8000234:	2900      	cmp	r1, #0
 8000236:	d0f7      	beq.n	8000228 <__udivsi3+0x100>
 8000238:	e776      	b.n	8000128 <__udivsi3>
 800023a:	4770      	bx	lr

0800023c <__divsi3>:
 800023c:	4603      	mov	r3, r0
 800023e:	430b      	orrs	r3, r1
 8000240:	d47f      	bmi.n	8000342 <__divsi3+0x106>
 8000242:	2200      	movs	r2, #0
 8000244:	0843      	lsrs	r3, r0, #1
 8000246:	428b      	cmp	r3, r1
 8000248:	d374      	bcc.n	8000334 <__divsi3+0xf8>
 800024a:	0903      	lsrs	r3, r0, #4
 800024c:	428b      	cmp	r3, r1
 800024e:	d35f      	bcc.n	8000310 <__divsi3+0xd4>
 8000250:	0a03      	lsrs	r3, r0, #8
 8000252:	428b      	cmp	r3, r1
 8000254:	d344      	bcc.n	80002e0 <__divsi3+0xa4>
 8000256:	0b03      	lsrs	r3, r0, #12
 8000258:	428b      	cmp	r3, r1
 800025a:	d328      	bcc.n	80002ae <__divsi3+0x72>
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d30d      	bcc.n	800027e <__divsi3+0x42>
 8000262:	22ff      	movs	r2, #255	; 0xff
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	ba12      	rev	r2, r2
 8000268:	0c03      	lsrs	r3, r0, #16
 800026a:	428b      	cmp	r3, r1
 800026c:	d302      	bcc.n	8000274 <__divsi3+0x38>
 800026e:	1212      	asrs	r2, r2, #8
 8000270:	0209      	lsls	r1, r1, #8
 8000272:	d065      	beq.n	8000340 <__divsi3+0x104>
 8000274:	0b03      	lsrs	r3, r0, #12
 8000276:	428b      	cmp	r3, r1
 8000278:	d319      	bcc.n	80002ae <__divsi3+0x72>
 800027a:	e000      	b.n	800027e <__divsi3+0x42>
 800027c:	0a09      	lsrs	r1, r1, #8
 800027e:	0bc3      	lsrs	r3, r0, #15
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x4c>
 8000284:	03cb      	lsls	r3, r1, #15
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b83      	lsrs	r3, r0, #14
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x58>
 8000290:	038b      	lsls	r3, r1, #14
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b43      	lsrs	r3, r0, #13
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x64>
 800029c:	034b      	lsls	r3, r1, #13
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b03      	lsrs	r3, r0, #12
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x70>
 80002a8:	030b      	lsls	r3, r1, #12
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0ac3      	lsrs	r3, r0, #11
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x7c>
 80002b4:	02cb      	lsls	r3, r1, #11
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a83      	lsrs	r3, r0, #10
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x88>
 80002c0:	028b      	lsls	r3, r1, #10
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a43      	lsrs	r3, r0, #9
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x94>
 80002cc:	024b      	lsls	r3, r1, #9
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a03      	lsrs	r3, r0, #8
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0xa0>
 80002d8:	020b      	lsls	r3, r1, #8
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	d2cd      	bcs.n	800027c <__divsi3+0x40>
 80002e0:	09c3      	lsrs	r3, r0, #7
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xae>
 80002e6:	01cb      	lsls	r3, r1, #7
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0983      	lsrs	r3, r0, #6
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xba>
 80002f2:	018b      	lsls	r3, r1, #6
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0943      	lsrs	r3, r0, #5
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xc6>
 80002fe:	014b      	lsls	r3, r1, #5
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0903      	lsrs	r3, r0, #4
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xd2>
 800030a:	010b      	lsls	r3, r1, #4
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	08c3      	lsrs	r3, r0, #3
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xde>
 8000316:	00cb      	lsls	r3, r1, #3
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0883      	lsrs	r3, r0, #2
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xea>
 8000322:	008b      	lsls	r3, r1, #2
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	0843      	lsrs	r3, r0, #1
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xf6>
 800032e:	004b      	lsls	r3, r1, #1
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	1a41      	subs	r1, r0, r1
 8000336:	d200      	bcs.n	800033a <__divsi3+0xfe>
 8000338:	4601      	mov	r1, r0
 800033a:	4152      	adcs	r2, r2
 800033c:	4610      	mov	r0, r2
 800033e:	4770      	bx	lr
 8000340:	e05d      	b.n	80003fe <__divsi3+0x1c2>
 8000342:	0fca      	lsrs	r2, r1, #31
 8000344:	d000      	beq.n	8000348 <__divsi3+0x10c>
 8000346:	4249      	negs	r1, r1
 8000348:	1003      	asrs	r3, r0, #32
 800034a:	d300      	bcc.n	800034e <__divsi3+0x112>
 800034c:	4240      	negs	r0, r0
 800034e:	4053      	eors	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	469c      	mov	ip, r3
 8000354:	0903      	lsrs	r3, r0, #4
 8000356:	428b      	cmp	r3, r1
 8000358:	d32d      	bcc.n	80003b6 <__divsi3+0x17a>
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d312      	bcc.n	8000386 <__divsi3+0x14a>
 8000360:	22fc      	movs	r2, #252	; 0xfc
 8000362:	0189      	lsls	r1, r1, #6
 8000364:	ba12      	rev	r2, r2
 8000366:	0a03      	lsrs	r3, r0, #8
 8000368:	428b      	cmp	r3, r1
 800036a:	d30c      	bcc.n	8000386 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	1192      	asrs	r2, r2, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d308      	bcc.n	8000386 <__divsi3+0x14a>
 8000374:	0189      	lsls	r1, r1, #6
 8000376:	1192      	asrs	r2, r2, #6
 8000378:	428b      	cmp	r3, r1
 800037a:	d304      	bcc.n	8000386 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	d03a      	beq.n	80003f6 <__divsi3+0x1ba>
 8000380:	1192      	asrs	r2, r2, #6
 8000382:	e000      	b.n	8000386 <__divsi3+0x14a>
 8000384:	0989      	lsrs	r1, r1, #6
 8000386:	09c3      	lsrs	r3, r0, #7
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x154>
 800038c:	01cb      	lsls	r3, r1, #7
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0983      	lsrs	r3, r0, #6
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x160>
 8000398:	018b      	lsls	r3, r1, #6
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0943      	lsrs	r3, r0, #5
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x16c>
 80003a4:	014b      	lsls	r3, r1, #5
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0903      	lsrs	r3, r0, #4
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x178>
 80003b0:	010b      	lsls	r3, r1, #4
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	08c3      	lsrs	r3, r0, #3
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x184>
 80003bc:	00cb      	lsls	r3, r1, #3
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0883      	lsrs	r3, r0, #2
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x190>
 80003c8:	008b      	lsls	r3, r1, #2
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	d2d9      	bcs.n	8000384 <__divsi3+0x148>
 80003d0:	0843      	lsrs	r3, r0, #1
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d301      	bcc.n	80003da <__divsi3+0x19e>
 80003d6:	004b      	lsls	r3, r1, #1
 80003d8:	1ac0      	subs	r0, r0, r3
 80003da:	4152      	adcs	r2, r2
 80003dc:	1a41      	subs	r1, r0, r1
 80003de:	d200      	bcs.n	80003e2 <__divsi3+0x1a6>
 80003e0:	4601      	mov	r1, r0
 80003e2:	4663      	mov	r3, ip
 80003e4:	4152      	adcs	r2, r2
 80003e6:	105b      	asrs	r3, r3, #1
 80003e8:	4610      	mov	r0, r2
 80003ea:	d301      	bcc.n	80003f0 <__divsi3+0x1b4>
 80003ec:	4240      	negs	r0, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d500      	bpl.n	80003f4 <__divsi3+0x1b8>
 80003f2:	4249      	negs	r1, r1
 80003f4:	4770      	bx	lr
 80003f6:	4663      	mov	r3, ip
 80003f8:	105b      	asrs	r3, r3, #1
 80003fa:	d300      	bcc.n	80003fe <__divsi3+0x1c2>
 80003fc:	4240      	negs	r0, r0
 80003fe:	b501      	push	{r0, lr}
 8000400:	2000      	movs	r0, #0
 8000402:	f000 f805 	bl	8000410 <__aeabi_idiv0>
 8000406:	bd02      	pop	{r1, pc}

08000408 <__aeabi_idivmod>:
 8000408:	2900      	cmp	r1, #0
 800040a:	d0f8      	beq.n	80003fe <__divsi3+0x1c2>
 800040c:	e716      	b.n	800023c <__divsi3>
 800040e:	4770      	bx	lr

08000410 <__aeabi_idiv0>:
 8000410:	4770      	bx	lr
 8000412:	46c0      	nop			; (mov r8, r8)

08000414 <BSP_GetVersion>:
/**
  * @brief  This method returns the STM32F0XX NUCLEO BSP Driver revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t BSP_GetVersion(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  return __STM32F0XX_NUCLEO_BSP_VERSION;
 8000418:	4b01      	ldr	r3, [pc, #4]	; (8000420 <BSP_GetVersion+0xc>)
}
 800041a:	0018      	movs	r0, r3
 800041c:	46bd      	mov	sp, r7
 800041e:	bd80      	pop	{r7, pc}
 8000420:	01010600 	.word	0x01010600

08000424 <BSP_LED_Init>:
  *         This parameter can be one of the following values:
  * @arg LED2
  * @retval None
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b088      	sub	sp, #32
 8000428:	af00      	add	r7, sp, #0
 800042a:	0002      	movs	r2, r0
 800042c:	1dfb      	adds	r3, r7, #7
 800042e:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  gpioinitstruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000430:	1dfb      	adds	r3, r7, #7
 8000432:	781b      	ldrb	r3, [r3, #0]
 8000434:	2b00      	cmp	r3, #0
 8000436:	d10d      	bne.n	8000454 <BSP_LED_Init+0x30>
 8000438:	4b16      	ldr	r3, [pc, #88]	; (8000494 <BSP_LED_Init+0x70>)
 800043a:	4a16      	ldr	r2, [pc, #88]	; (8000494 <BSP_LED_Init+0x70>)
 800043c:	6952      	ldr	r2, [r2, #20]
 800043e:	2180      	movs	r1, #128	; 0x80
 8000440:	0289      	lsls	r1, r1, #10
 8000442:	430a      	orrs	r2, r1
 8000444:	615a      	str	r2, [r3, #20]
 8000446:	4b13      	ldr	r3, [pc, #76]	; (8000494 <BSP_LED_Init+0x70>)
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	2380      	movs	r3, #128	; 0x80
 800044c:	029b      	lsls	r3, r3, #10
 800044e:	4013      	ands	r3, r2
 8000450:	60bb      	str	r3, [r7, #8]
 8000452:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpioinitstruct.Pin = LED_PIN[Led];
 8000454:	2320      	movs	r3, #32
 8000456:	001a      	movs	r2, r3
 8000458:	230c      	movs	r3, #12
 800045a:	18fb      	adds	r3, r7, r3
 800045c:	601a      	str	r2, [r3, #0]
  gpioinitstruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045e:	230c      	movs	r3, #12
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	2201      	movs	r2, #1
 8000464:	605a      	str	r2, [r3, #4]
  gpioinitstruct.Pull = GPIO_NOPULL;
 8000466:	230c      	movs	r3, #12
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	2200      	movs	r2, #0
 800046c:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800046e:	230c      	movs	r3, #12
 8000470:	18fb      	adds	r3, r7, r3
 8000472:	2203      	movs	r2, #3
 8000474:	60da      	str	r2, [r3, #12]
  
  HAL_GPIO_Init(LED_PORT[Led], &gpioinitstruct);
 8000476:	1dfb      	adds	r3, r7, #7
 8000478:	781a      	ldrb	r2, [r3, #0]
 800047a:	4b07      	ldr	r3, [pc, #28]	; (8000498 <BSP_LED_Init+0x74>)
 800047c:	0092      	lsls	r2, r2, #2
 800047e:	58d3      	ldr	r3, [r2, r3]
 8000480:	220c      	movs	r2, #12
 8000482:	18ba      	adds	r2, r7, r2
 8000484:	0011      	movs	r1, r2
 8000486:	0018      	movs	r0, r3
 8000488:	f003 fb5a 	bl	8003b40 <HAL_GPIO_Init>
}
 800048c:	46c0      	nop			; (mov r8, r8)
 800048e:	46bd      	mov	sp, r7
 8000490:	b008      	add	sp, #32
 8000492:	bd80      	pop	{r7, pc}
 8000494:	40021000 	.word	0x40021000
 8000498:	20000004 	.word	0x20000004

0800049c <BSP_LED_DeInit>:
  *     @arg  LED2
  * @note Led DeInit does not disable the GPIO clock nor disable the Mfx 
  * @retval None
  */
void BSP_LED_DeInit(Led_TypeDef Led)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b088      	sub	sp, #32
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	0002      	movs	r2, r0
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80004a8:	1dfb      	adds	r3, r7, #7
 80004aa:	781a      	ldrb	r2, [r3, #0]
 80004ac:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <BSP_LED_DeInit+0x4c>)
 80004ae:	0092      	lsls	r2, r2, #2
 80004b0:	58d3      	ldr	r3, [r2, r3]
 80004b2:	2120      	movs	r1, #32
 80004b4:	2200      	movs	r2, #0
 80004b6:	0018      	movs	r0, r3
 80004b8:	f003 fdb7 	bl	800402a <HAL_GPIO_WritePin>
  /* DeInit the GPIO_LED pin */
  gpio_init_structure.Pin = LED_PIN[Led];
 80004bc:	2320      	movs	r3, #32
 80004be:	001a      	movs	r2, r3
 80004c0:	230c      	movs	r3, #12
 80004c2:	18fb      	adds	r3, r7, r3
 80004c4:	601a      	str	r2, [r3, #0]
  HAL_GPIO_DeInit(LED_PORT[Led], gpio_init_structure.Pin);
 80004c6:	1dfb      	adds	r3, r7, #7
 80004c8:	781a      	ldrb	r2, [r3, #0]
 80004ca:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <BSP_LED_DeInit+0x4c>)
 80004cc:	0092      	lsls	r2, r2, #2
 80004ce:	58d2      	ldr	r2, [r2, r3]
 80004d0:	230c      	movs	r3, #12
 80004d2:	18fb      	adds	r3, r7, r3
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	0019      	movs	r1, r3
 80004d8:	0010      	movs	r0, r2
 80004da:	f003 fcad 	bl	8003e38 <HAL_GPIO_DeInit>
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b008      	add	sp, #32
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	20000004 	.word	0x20000004

080004ec <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	0002      	movs	r2, r0
 80004f4:	1dfb      	adds	r3, r7, #7
 80004f6:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET); 
 80004f8:	1dfb      	adds	r3, r7, #7
 80004fa:	781a      	ldrb	r2, [r3, #0]
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <BSP_LED_On+0x28>)
 80004fe:	0092      	lsls	r2, r2, #2
 8000500:	58d3      	ldr	r3, [r2, r3]
 8000502:	2120      	movs	r1, #32
 8000504:	2201      	movs	r2, #1
 8000506:	0018      	movs	r0, r3
 8000508:	f003 fd8f 	bl	800402a <HAL_GPIO_WritePin>
}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b002      	add	sp, #8
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20000004 	.word	0x20000004

08000518 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	0002      	movs	r2, r0
 8000520:	1dfb      	adds	r3, r7, #7
 8000522:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET); 
 8000524:	1dfb      	adds	r3, r7, #7
 8000526:	781a      	ldrb	r2, [r3, #0]
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <BSP_LED_Off+0x28>)
 800052a:	0092      	lsls	r2, r2, #2
 800052c:	58d3      	ldr	r3, [r2, r3]
 800052e:	2120      	movs	r1, #32
 8000530:	2200      	movs	r2, #0
 8000532:	0018      	movs	r0, r3
 8000534:	f003 fd79 	bl	800402a <HAL_GPIO_WritePin>
}
 8000538:	46c0      	nop			; (mov r8, r8)
 800053a:	46bd      	mov	sp, r7
 800053c:	b002      	add	sp, #8
 800053e:	bd80      	pop	{r7, pc}
 8000540:	20000004 	.word	0x20000004

08000544 <BSP_LED_Toggle>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  * @retval None
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
 800054a:	0002      	movs	r2, r0
 800054c:	1dfb      	adds	r3, r7, #7
 800054e:	701a      	strb	r2, [r3, #0]
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000550:	1dfb      	adds	r3, r7, #7
 8000552:	781a      	ldrb	r2, [r3, #0]
 8000554:	4b05      	ldr	r3, [pc, #20]	; (800056c <BSP_LED_Toggle+0x28>)
 8000556:	0092      	lsls	r2, r2, #2
 8000558:	58d3      	ldr	r3, [r2, r3]
 800055a:	2220      	movs	r2, #32
 800055c:	0011      	movs	r1, r2
 800055e:	0018      	movs	r0, r3
 8000560:	f003 fd80 	bl	8004064 <HAL_GPIO_TogglePin>
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b002      	add	sp, #8
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000004 	.word	0x20000004

08000570 <BSP_PB_Init>:
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  * @retval None
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b088      	sub	sp, #32
 8000574:	af00      	add	r7, sp, #0
 8000576:	0002      	movs	r2, r0
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	1dbb      	adds	r3, r7, #6
 800057e:	1c0a      	adds	r2, r1, #0
 8000580:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef gpioinitstruct;

  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 8000582:	1dfb      	adds	r3, r7, #7
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d10d      	bne.n	80005a6 <BSP_PB_Init+0x36>
 800058a:	4b29      	ldr	r3, [pc, #164]	; (8000630 <BSP_PB_Init+0xc0>)
 800058c:	4a28      	ldr	r2, [pc, #160]	; (8000630 <BSP_PB_Init+0xc0>)
 800058e:	6952      	ldr	r2, [r2, #20]
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	0309      	lsls	r1, r1, #12
 8000594:	430a      	orrs	r2, r1
 8000596:	615a      	str	r2, [r3, #20]
 8000598:	4b25      	ldr	r3, [pc, #148]	; (8000630 <BSP_PB_Init+0xc0>)
 800059a:	695a      	ldr	r2, [r3, #20]
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	031b      	lsls	r3, r3, #12
 80005a0:	4013      	ands	r3, r2
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]

  gpioinitstruct.Pin = BUTTON_PIN[Button];
 80005a6:	2380      	movs	r3, #128	; 0x80
 80005a8:	019b      	lsls	r3, r3, #6
 80005aa:	001a      	movs	r2, r3
 80005ac:	230c      	movs	r3, #12
 80005ae:	18fb      	adds	r3, r7, r3
 80005b0:	601a      	str	r2, [r3, #0]
  gpioinitstruct.Pull = GPIO_NOPULL;
 80005b2:	230c      	movs	r3, #12
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  gpioinitstruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005ba:	230c      	movs	r3, #12
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	2203      	movs	r2, #3
 80005c0:	60da      	str	r2, [r3, #12]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80005c2:	1dbb      	adds	r3, r7, #6
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d10e      	bne.n	80005e8 <BSP_PB_Init+0x78>
  {
    /* Configure Button pin as input */
    gpioinitstruct.Mode = GPIO_MODE_INPUT;
 80005ca:	230c      	movs	r3, #12
 80005cc:	18fb      	adds	r3, r7, r3
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80005d2:	1dfb      	adds	r3, r7, #7
 80005d4:	781a      	ldrb	r2, [r3, #0]
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <BSP_PB_Init+0xc4>)
 80005d8:	0092      	lsls	r2, r2, #2
 80005da:	58d3      	ldr	r3, [r2, r3]
 80005dc:	220c      	movs	r2, #12
 80005de:	18ba      	adds	r2, r7, r2
 80005e0:	0011      	movs	r1, r2
 80005e2:	0018      	movs	r0, r3
 80005e4:	f003 faac 	bl	8003b40 <HAL_GPIO_Init>
  }

  if(ButtonMode == BUTTON_MODE_EXTI)
 80005e8:	1dbb      	adds	r3, r7, #6
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d11a      	bne.n	8000626 <BSP_PB_Init+0xb6>
  {
    /* Configure Button pin as input with External interrupt */
    gpioinitstruct.Mode = GPIO_MODE_IT_FALLING;
 80005f0:	230c      	movs	r3, #12
 80005f2:	18fb      	adds	r3, r7, r3
 80005f4:	4a10      	ldr	r2, [pc, #64]	; (8000638 <BSP_PB_Init+0xc8>)
 80005f6:	605a      	str	r2, [r3, #4]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpioinitstruct);
 80005f8:	1dfb      	adds	r3, r7, #7
 80005fa:	781a      	ldrb	r2, [r3, #0]
 80005fc:	4b0d      	ldr	r3, [pc, #52]	; (8000634 <BSP_PB_Init+0xc4>)
 80005fe:	0092      	lsls	r2, r2, #2
 8000600:	58d3      	ldr	r3, [r2, r3]
 8000602:	220c      	movs	r2, #12
 8000604:	18ba      	adds	r2, r7, r2
 8000606:	0011      	movs	r1, r2
 8000608:	0018      	movs	r0, r3
 800060a:	f003 fa99 	bl	8003b40 <HAL_GPIO_Init>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x03, 0x00);
 800060e:	2307      	movs	r3, #7
 8000610:	b25b      	sxtb	r3, r3
 8000612:	2200      	movs	r2, #0
 8000614:	2103      	movs	r1, #3
 8000616:	0018      	movs	r0, r3
 8000618:	f001 fe00 	bl	800221c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800061c:	2307      	movs	r3, #7
 800061e:	b25b      	sxtb	r3, r3
 8000620:	0018      	movs	r0, r3
 8000622:	f001 fe11 	bl	8002248 <HAL_NVIC_EnableIRQ>
  }
}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	46bd      	mov	sp, r7
 800062a:	b008      	add	sp, #32
 800062c:	bd80      	pop	{r7, pc}
 800062e:	46c0      	nop			; (mov r8, r8)
 8000630:	40021000 	.word	0x40021000
 8000634:	20000008 	.word	0x20000008
 8000638:	10210000 	.word	0x10210000

0800063c <BSP_PB_DeInit>:
  *   This parameter should be: BUTTON_USER
  * @note PB DeInit does not disable the GPIO clock
  * @retval None
  */
void BSP_PB_DeInit(Button_TypeDef Button)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b088      	sub	sp, #32
 8000640:	af00      	add	r7, sp, #0
 8000642:	0002      	movs	r2, r0
 8000644:	1dfb      	adds	r3, r7, #7
 8000646:	701a      	strb	r2, [r3, #0]
  GPIO_InitTypeDef gpio_init_structure;

  gpio_init_structure.Pin = BUTTON_PIN[Button];
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	019b      	lsls	r3, r3, #6
 800064c:	001a      	movs	r2, r3
 800064e:	230c      	movs	r3, #12
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	601a      	str	r2, [r3, #0]
  HAL_NVIC_DisableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 8000654:	2307      	movs	r3, #7
 8000656:	b25b      	sxtb	r3, r3
 8000658:	0018      	movs	r0, r3
 800065a:	f001 fe05 	bl	8002268 <HAL_NVIC_DisableIRQ>
  HAL_GPIO_DeInit(BUTTON_PORT[Button], gpio_init_structure.Pin);
 800065e:	1dfb      	adds	r3, r7, #7
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	4b07      	ldr	r3, [pc, #28]	; (8000680 <BSP_PB_DeInit+0x44>)
 8000664:	0092      	lsls	r2, r2, #2
 8000666:	58d2      	ldr	r2, [r2, r3]
 8000668:	230c      	movs	r3, #12
 800066a:	18fb      	adds	r3, r7, r3
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	0019      	movs	r1, r3
 8000670:	0010      	movs	r0, r2
 8000672:	f003 fbe1 	bl	8003e38 <HAL_GPIO_DeInit>
}
 8000676:	46c0      	nop			; (mov r8, r8)
 8000678:	46bd      	mov	sp, r7
 800067a:	b008      	add	sp, #32
 800067c:	bd80      	pop	{r7, pc}
 800067e:	46c0      	nop			; (mov r8, r8)
 8000680:	20000008 	.word	0x20000008

08000684 <BSP_PB_GetState>:
  * @param  Button Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER
  * @retval Button state.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	0002      	movs	r2, r0
 800068c:	1dfb      	adds	r3, r7, #7
 800068e:	701a      	strb	r2, [r3, #0]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8000690:	1dfb      	adds	r3, r7, #7
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	4b06      	ldr	r3, [pc, #24]	; (80006b0 <BSP_PB_GetState+0x2c>)
 8000696:	0092      	lsls	r2, r2, #2
 8000698:	58d2      	ldr	r2, [r2, r3]
 800069a:	2380      	movs	r3, #128	; 0x80
 800069c:	019b      	lsls	r3, r3, #6
 800069e:	0019      	movs	r1, r3
 80006a0:	0010      	movs	r0, r2
 80006a2:	f003 fca5 	bl	8003ff0 <HAL_GPIO_ReadPin>
 80006a6:	0003      	movs	r3, r0
}
 80006a8:	0018      	movs	r0, r3
 80006aa:	46bd      	mov	sp, r7
 80006ac:	b002      	add	sp, #8
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000008 	.word	0x20000008

080006b4 <ADCx_MspInit>:
/**
  * @brief  Initialize ADC MSP.
  * @retval None
  */
static void ADCx_MspInit(ADC_HandleTypeDef *hadc)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct;
  
  /*** Configure the GPIOs ***/  
  /* Enable GPIO clock */
  NUCLEO_ADCx_GPIO_CLK_ENABLE();
 80006bc:	4b17      	ldr	r3, [pc, #92]	; (800071c <ADCx_MspInit+0x68>)
 80006be:	4a17      	ldr	r2, [pc, #92]	; (800071c <ADCx_MspInit+0x68>)
 80006c0:	6952      	ldr	r2, [r2, #20]
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	02c9      	lsls	r1, r1, #11
 80006c6:	430a      	orrs	r2, r1
 80006c8:	615a      	str	r2, [r3, #20]
 80006ca:	4b14      	ldr	r3, [pc, #80]	; (800071c <ADCx_MspInit+0x68>)
 80006cc:	695a      	ldr	r2, [r3, #20]
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	02db      	lsls	r3, r3, #11
 80006d2:	4013      	ands	r3, r2
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	693b      	ldr	r3, [r7, #16]
  
  /* Configure ADC1 Channel8 as analog input */
  gpioinitstruct.Pin = NUCLEO_ADCx_GPIO_PIN ;
 80006d8:	2314      	movs	r3, #20
 80006da:	18fb      	adds	r3, r7, r3
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]
  gpioinitstruct.Mode = GPIO_MODE_ANALOG;
 80006e0:	2314      	movs	r3, #20
 80006e2:	18fb      	adds	r3, r7, r3
 80006e4:	2203      	movs	r2, #3
 80006e6:	605a      	str	r2, [r3, #4]
  HAL_GPIO_Init(NUCLEO_ADCx_GPIO_PORT, &gpioinitstruct);
 80006e8:	2314      	movs	r3, #20
 80006ea:	18fb      	adds	r3, r7, r3
 80006ec:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <ADCx_MspInit+0x6c>)
 80006ee:	0019      	movs	r1, r3
 80006f0:	0010      	movs	r0, r2
 80006f2:	f003 fa25 	bl	8003b40 <HAL_GPIO_Init>

  /*** Configure the ADC peripheral ***/ 
  /* Enable ADC clock */
  NUCLEO_ADCx_CLK_ENABLE();
 80006f6:	4b09      	ldr	r3, [pc, #36]	; (800071c <ADCx_MspInit+0x68>)
 80006f8:	4a08      	ldr	r2, [pc, #32]	; (800071c <ADCx_MspInit+0x68>)
 80006fa:	6992      	ldr	r2, [r2, #24]
 80006fc:	2180      	movs	r1, #128	; 0x80
 80006fe:	0089      	lsls	r1, r1, #2
 8000700:	430a      	orrs	r2, r1
 8000702:	619a      	str	r2, [r3, #24]
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <ADCx_MspInit+0x68>)
 8000706:	699a      	ldr	r2, [r3, #24]
 8000708:	2380      	movs	r3, #128	; 0x80
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	4013      	ands	r3, r2
 800070e:	60fb      	str	r3, [r7, #12]
 8000710:	68fb      	ldr	r3, [r7, #12]
}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	46bd      	mov	sp, r7
 8000716:	b00a      	add	sp, #40	; 0x28
 8000718:	bd80      	pop	{r7, pc}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	40021000 	.word	0x40021000
 8000720:	48000400 	.word	0x48000400

08000724 <ADCx_MspDeInit>:
  * @brief  DeInitializes ADC MSP.
  * @note ADC DeInit does not disable the GPIO clock
  * @retval None
  */
static void ADCx_MspDeInit(ADC_HandleTypeDef *hadc)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b088      	sub	sp, #32
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpioinitstruct;

  /*** DeInit the ADC peripheral ***/ 
  /* Disable ADC clock */
  NUCLEO_ADCx_CLK_DISABLE(); 
 800072c:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <ADCx_MspDeInit+0x34>)
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <ADCx_MspDeInit+0x34>)
 8000730:	6992      	ldr	r2, [r2, #24]
 8000732:	490a      	ldr	r1, [pc, #40]	; (800075c <ADCx_MspDeInit+0x38>)
 8000734:	400a      	ands	r2, r1
 8000736:	619a      	str	r2, [r3, #24]

  /* Configure the selected ADC Channel as analog input */
  gpioinitstruct.Pin = NUCLEO_ADCx_GPIO_PIN ;
 8000738:	230c      	movs	r3, #12
 800073a:	18fb      	adds	r3, r7, r3
 800073c:	2201      	movs	r2, #1
 800073e:	601a      	str	r2, [r3, #0]
  HAL_GPIO_DeInit(NUCLEO_ADCx_GPIO_PORT, gpioinitstruct.Pin);
 8000740:	230c      	movs	r3, #12
 8000742:	18fb      	adds	r3, r7, r3
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a06      	ldr	r2, [pc, #24]	; (8000760 <ADCx_MspDeInit+0x3c>)
 8000748:	0019      	movs	r1, r3
 800074a:	0010      	movs	r0, r2
 800074c:	f003 fb74 	bl	8003e38 <HAL_GPIO_DeInit>

  /* Disable GPIO clock has to be done by the application*/
  /* NUCLEO_ADCx_GPIO_CLK_DISABLE(); */
}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	b008      	add	sp, #32
 8000756:	bd80      	pop	{r7, pc}
 8000758:	40021000 	.word	0x40021000
 800075c:	fffffdff 	.word	0xfffffdff
 8000760:	48000400 	.word	0x48000400

08000764 <ADCx_Init>:
/**
  * @brief  Initializes ADC HAL.
  * @retval None
  */
static HAL_StatusTypeDef ADCx_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* Set ADC instance */
  hnucleo_Adc.Instance                   = NUCLEO_ADCx;
 8000768:	4b26      	ldr	r3, [pc, #152]	; (8000804 <ADCx_Init+0xa0>)
 800076a:	4a27      	ldr	r2, [pc, #156]	; (8000808 <ADCx_Init+0xa4>)
 800076c:	601a      	str	r2, [r3, #0]
  
  if(HAL_ADC_GetState(&hnucleo_Adc) == HAL_ADC_STATE_RESET)
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <ADCx_Init+0xa0>)
 8000770:	0018      	movs	r0, r3
 8000772:	f001 f99f 	bl	8001ab4 <HAL_ADC_GetState>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d13f      	bne.n	80007fa <ADCx_Init+0x96>
  {
    /* ADC Config */
    hnucleo_Adc.Init.ClockPrescaler        = ADC_CLOCK_SYNC_PCLK_DIV4;      /* ADC clock of STM32F0 must not exceed 14MHz */
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <ADCx_Init+0xa0>)
 800077c:	2280      	movs	r2, #128	; 0x80
 800077e:	0612      	lsls	r2, r2, #24
 8000780:	605a      	str	r2, [r3, #4]
    hnucleo_Adc.Init.Resolution            = ADC_RESOLUTION_12B;
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <ADCx_Init+0xa0>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
    hnucleo_Adc.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8000788:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <ADCx_Init+0xa0>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
    hnucleo_Adc.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;    /* Sequencer will convert the number of channels configured below, successively from the lowest to the highest channel number */
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <ADCx_Init+0xa0>)
 8000790:	2201      	movs	r2, #1
 8000792:	611a      	str	r2, [r3, #16]
    hnucleo_Adc.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8000794:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <ADCx_Init+0xa0>)
 8000796:	2204      	movs	r2, #4
 8000798:	615a      	str	r2, [r3, #20]
    hnucleo_Adc.Init.LowPowerAutoWait      = DISABLE;
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <ADCx_Init+0xa0>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
    hnucleo_Adc.Init.LowPowerAutoPowerOff  = DISABLE;
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <ADCx_Init+0xa0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
    hnucleo_Adc.Init.ContinuousConvMode    = DISABLE;                       /* Continuous mode disabled to have only 1 conversion at each conversion trig */
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <ADCx_Init+0xa0>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
    hnucleo_Adc.Init.DiscontinuousConvMode = DISABLE;                       /* Parameter discarded because sequencer is disabled */
 80007ac:	4b15      	ldr	r3, [pc, #84]	; (8000804 <ADCx_Init+0xa0>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
    hnucleo_Adc.Init.ExternalTrigConv      = ADC_SOFTWARE_START;            /* Software start to trig the 1st conversion manually, without external event */
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <ADCx_Init+0xa0>)
 80007b4:	22c2      	movs	r2, #194	; 0xc2
 80007b6:	32ff      	adds	r2, #255	; 0xff
 80007b8:	629a      	str	r2, [r3, #40]	; 0x28
    hnucleo_Adc.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE; /* Parameter discarded because trig by software start */
 80007ba:	4b12      	ldr	r3, [pc, #72]	; (8000804 <ADCx_Init+0xa0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	62da      	str	r2, [r3, #44]	; 0x2c
    hnucleo_Adc.Init.DMAContinuousRequests = DISABLE;
 80007c0:	4b10      	ldr	r3, [pc, #64]	; (8000804 <ADCx_Init+0xa0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	631a      	str	r2, [r3, #48]	; 0x30
    hnucleo_Adc.Init.Overrun               = ADC_OVR_DATA_OVERWRITTEN;
 80007c6:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <ADCx_Init+0xa0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	635a      	str	r2, [r3, #52]	; 0x34
    hnucleo_Adc.Init.SamplingTimeCommon    = ADC_SAMPLETIME_41CYCLES_5;
 80007cc:	4b0d      	ldr	r3, [pc, #52]	; (8000804 <ADCx_Init+0xa0>)
 80007ce:	2204      	movs	r2, #4
 80007d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Initialize MSP related to ADC */
    ADCx_MspInit(&hnucleo_Adc);
 80007d2:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <ADCx_Init+0xa0>)
 80007d4:	0018      	movs	r0, r3
 80007d6:	f7ff ff6d 	bl	80006b4 <ADCx_MspInit>
    
    /* Initialize ADC */
    if (HAL_ADC_Init(&hnucleo_Adc) != HAL_OK)
 80007da:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <ADCx_Init+0xa0>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f000 f9e3 	bl	8000ba8 <HAL_ADC_Init>
 80007e2:	1e03      	subs	r3, r0, #0
 80007e4:	d001      	beq.n	80007ea <ADCx_Init+0x86>
    {
      return HAL_ERROR;
 80007e6:	2301      	movs	r3, #1
 80007e8:	e008      	b.n	80007fc <ADCx_Init+0x98>
    }

    /* Run ADC calibration */
    if (HAL_ADCEx_Calibration_Start(&hnucleo_Adc) != HAL_OK)
 80007ea:	4b06      	ldr	r3, [pc, #24]	; (8000804 <ADCx_Init+0xa0>)
 80007ec:	0018      	movs	r0, r3
 80007ee:	f001 fb23 	bl	8001e38 <HAL_ADCEx_Calibration_Start>
 80007f2:	1e03      	subs	r3, r0, #0
 80007f4:	d001      	beq.n	80007fa <ADCx_Init+0x96>
    {
      return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
 80007f8:	e000      	b.n	80007fc <ADCx_Init+0x98>
    }
  }
  
  return HAL_OK;
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	0018      	movs	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	2000002c 	.word	0x2000002c
 8000808:	40012400 	.word	0x40012400

0800080c <ADCx_DeInit>:
/**
  * @brief  Initializes ADC HAL.
  * @retval None
  */
static void ADCx_DeInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
    hnucleo_Adc.Instance   = NUCLEO_ADCx;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <ADCx_DeInit+0x20>)
 8000812:	4a07      	ldr	r2, [pc, #28]	; (8000830 <ADCx_DeInit+0x24>)
 8000814:	601a      	str	r2, [r3, #0]
    
    HAL_ADC_DeInit(&hnucleo_Adc);
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <ADCx_DeInit+0x20>)
 8000818:	0018      	movs	r0, r3
 800081a:	f000 fb03 	bl	8000e24 <HAL_ADC_DeInit>
    ADCx_MspDeInit(&hnucleo_Adc);
 800081e:	4b03      	ldr	r3, [pc, #12]	; (800082c <ADCx_DeInit+0x20>)
 8000820:	0018      	movs	r0, r3
 8000822:	f7ff ff7f 	bl	8000724 <ADCx_MspDeInit>
}
 8000826:	46c0      	nop			; (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000002c 	.word	0x2000002c
 8000830:	40012400 	.word	0x40012400

08000834 <BSP_JOY_Init>:
  * @brief  Configures joystick available on adafruit 1.8" TFT shield 
  *         managed through ADC to detect motion.
  * @retval Joystickstatus (0=> success, 1=> fail) 
  */
uint8_t BSP_JOY_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  if (ADCx_Init() != HAL_OK)
 8000838:	f7ff ff94 	bl	8000764 <ADCx_Init>
 800083c:	1e03      	subs	r3, r0, #0
 800083e:	d001      	beq.n	8000844 <BSP_JOY_Init+0x10>
  {
    return (uint8_t) HAL_ERROR; 
 8000840:	2301      	movs	r3, #1
 8000842:	e00d      	b.n	8000860 <BSP_JOY_Init+0x2c>
  }
  
  /* Select Channel 8 to be converted */
  sConfig.Channel = ADC_CHANNEL_8;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <BSP_JOY_Init+0x34>)
 8000846:	2208      	movs	r2, #8
 8000848:	601a      	str	r2, [r3, #0]
  sConfig.Rank    = ADC_RANK_CHANNEL_NUMBER;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <BSP_JOY_Init+0x34>)
 800084c:	2280      	movs	r2, #128	; 0x80
 800084e:	0152      	lsls	r2, r2, #5
 8000850:	605a      	str	r2, [r3, #4]

  /* Return Joystick initialization status */
  return (uint8_t)HAL_ADC_ConfigChannel(&hnucleo_Adc, &sConfig);
 8000852:	4a05      	ldr	r2, [pc, #20]	; (8000868 <BSP_JOY_Init+0x34>)
 8000854:	4b05      	ldr	r3, [pc, #20]	; (800086c <BSP_JOY_Init+0x38>)
 8000856:	0011      	movs	r1, r2
 8000858:	0018      	movs	r0, r3
 800085a:	f000 ff8f 	bl	800177c <HAL_ADC_ConfigChannel>
 800085e:	0003      	movs	r3, r0
}
 8000860:	0018      	movs	r0, r3
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	20000078 	.word	0x20000078
 800086c:	2000002c 	.word	0x2000002c

08000870 <BSP_JOY_DeInit>:
  * @brief  DeInit joystick GPIOs.
  * @note   JOY DeInit does not disable the Mfx, just set the Mfx pins in Off mode
  * @retval None.
  */
void BSP_JOY_DeInit(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
    ADCx_DeInit();
 8000874:	f7ff ffca 	bl	800080c <ADCx_DeInit>
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <BSP_JOY_GetState>:
  *           - RIGHT : 0.595 V / 737
  *           - UP    : 1.65 V / 2046
  * @retval JOYState_TypeDef: Code of the Joystick key pressed.
  */
JOYState_TypeDef BSP_JOY_GetState(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
  JOYState_TypeDef state;
  uint16_t  KeyConvertedValue = 0;
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	2200      	movs	r2, #0
 800088a:	801a      	strh	r2, [r3, #0]
  
 /* Start the conversion process */
  HAL_ADC_Start(&hnucleo_Adc);
 800088c:	4b30      	ldr	r3, [pc, #192]	; (8000950 <BSP_JOY_GetState+0xd0>)
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fb64 	bl	8000f5c <HAL_ADC_Start>
  
  /* Wait for the end of conversion */
  if (HAL_ADC_PollForConversion(&hnucleo_Adc, 10) != HAL_TIMEOUT)
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <BSP_JOY_GetState+0xd0>)
 8000896:	210a      	movs	r1, #10
 8000898:	0018      	movs	r0, r3
 800089a:	f000 fbf5 	bl	8001088 <HAL_ADC_PollForConversion>
 800089e:	0003      	movs	r3, r0
 80008a0:	2b03      	cmp	r3, #3
 80008a2:	d006      	beq.n	80008b2 <BSP_JOY_GetState+0x32>
  {
    /* Get the converted value of regular channel */
    KeyConvertedValue = HAL_ADC_GetValue(&hnucleo_Adc);
 80008a4:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <BSP_JOY_GetState+0xd0>)
 80008a6:	0018      	movs	r0, r3
 80008a8:	f000 fe86 	bl	80015b8 <HAL_ADC_GetValue>
 80008ac:	0002      	movs	r2, r0
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	801a      	strh	r2, [r3, #0]
  }
  
  if((KeyConvertedValue > 2010) && (KeyConvertedValue < 2090))
 80008b2:	1d3b      	adds	r3, r7, #4
 80008b4:	881b      	ldrh	r3, [r3, #0]
 80008b6:	4a27      	ldr	r2, [pc, #156]	; (8000954 <BSP_JOY_GetState+0xd4>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d908      	bls.n	80008ce <BSP_JOY_GetState+0x4e>
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	881b      	ldrh	r3, [r3, #0]
 80008c0:	4a25      	ldr	r2, [pc, #148]	; (8000958 <BSP_JOY_GetState+0xd8>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d803      	bhi.n	80008ce <BSP_JOY_GetState+0x4e>
  {
    state = JOY_UP;
 80008c6:	1dfb      	adds	r3, r7, #7
 80008c8:	2205      	movs	r2, #5
 80008ca:	701a      	strb	r2, [r3, #0]
 80008cc:	e03a      	b.n	8000944 <BSP_JOY_GetState+0xc4>
  }
  else if((KeyConvertedValue > 680) && (KeyConvertedValue < 780))
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	881a      	ldrh	r2, [r3, #0]
 80008d2:	23aa      	movs	r3, #170	; 0xaa
 80008d4:	009b      	lsls	r3, r3, #2
 80008d6:	429a      	cmp	r2, r3
 80008d8:	d908      	bls.n	80008ec <BSP_JOY_GetState+0x6c>
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	881b      	ldrh	r3, [r3, #0]
 80008de:	4a1f      	ldr	r2, [pc, #124]	; (800095c <BSP_JOY_GetState+0xdc>)
 80008e0:	4293      	cmp	r3, r2
 80008e2:	d803      	bhi.n	80008ec <BSP_JOY_GetState+0x6c>
  {
    state = JOY_RIGHT;
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	2204      	movs	r2, #4
 80008e8:	701a      	strb	r2, [r3, #0]
 80008ea:	e02b      	b.n	8000944 <BSP_JOY_GetState+0xc4>
  }
  else if((KeyConvertedValue > 1270) && (KeyConvertedValue < 1350))
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	881b      	ldrh	r3, [r3, #0]
 80008f0:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <BSP_JOY_GetState+0xe0>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d908      	bls.n	8000908 <BSP_JOY_GetState+0x88>
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	881b      	ldrh	r3, [r3, #0]
 80008fa:	4a1a      	ldr	r2, [pc, #104]	; (8000964 <BSP_JOY_GetState+0xe4>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d803      	bhi.n	8000908 <BSP_JOY_GetState+0x88>
  {
    state = JOY_SEL;
 8000900:	1dfb      	adds	r3, r7, #7
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
 8000906:	e01d      	b.n	8000944 <BSP_JOY_GetState+0xc4>
  }
  else if((KeyConvertedValue > 50) && (KeyConvertedValue < 130))
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	881b      	ldrh	r3, [r3, #0]
 800090c:	2b32      	cmp	r3, #50	; 0x32
 800090e:	d907      	bls.n	8000920 <BSP_JOY_GetState+0xa0>
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	881b      	ldrh	r3, [r3, #0]
 8000914:	2b81      	cmp	r3, #129	; 0x81
 8000916:	d803      	bhi.n	8000920 <BSP_JOY_GetState+0xa0>
  {
    state = JOY_DOWN;
 8000918:	1dfb      	adds	r3, r7, #7
 800091a:	2202      	movs	r2, #2
 800091c:	701a      	strb	r2, [r3, #0]
 800091e:	e011      	b.n	8000944 <BSP_JOY_GetState+0xc4>
  }
  else if((KeyConvertedValue > 3680) && (KeyConvertedValue < 3760))
 8000920:	1d3b      	adds	r3, r7, #4
 8000922:	881a      	ldrh	r2, [r3, #0]
 8000924:	23e6      	movs	r3, #230	; 0xe6
 8000926:	011b      	lsls	r3, r3, #4
 8000928:	429a      	cmp	r2, r3
 800092a:	d908      	bls.n	800093e <BSP_JOY_GetState+0xbe>
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	881b      	ldrh	r3, [r3, #0]
 8000930:	4a0d      	ldr	r2, [pc, #52]	; (8000968 <BSP_JOY_GetState+0xe8>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d803      	bhi.n	800093e <BSP_JOY_GetState+0xbe>
  {
    state = JOY_LEFT;
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	2203      	movs	r2, #3
 800093a:	701a      	strb	r2, [r3, #0]
 800093c:	e002      	b.n	8000944 <BSP_JOY_GetState+0xc4>
  }
  else
  {
    state = JOY_NONE;
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return the code of the Joystick key pressed */
  return state;
 8000944:	1dfb      	adds	r3, r7, #7
 8000946:	781b      	ldrb	r3, [r3, #0]
}
 8000948:	0018      	movs	r0, r3
 800094a:	46bd      	mov	sp, r7
 800094c:	b002      	add	sp, #8
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000002c 	.word	0x2000002c
 8000954:	000007da 	.word	0x000007da
 8000958:	00000829 	.word	0x00000829
 800095c:	0000030b 	.word	0x0000030b
 8000960:	000004f6 	.word	0x000004f6
 8000964:	00000545 	.word	0x00000545
 8000968:	00000eaf 	.word	0x00000eaf

0800096c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <HAL_Init+0x24>)
 8000972:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_Init+0x24>)
 8000974:	6812      	ldr	r2, [r2, #0]
 8000976:	2110      	movs	r1, #16
 8000978:	430a      	orrs	r2, r1
 800097a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800097c:	2003      	movs	r0, #3
 800097e:	f000 f833 	bl	80009e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000982:	f003 fbd1 	bl	8004128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000986:	2300      	movs	r3, #0
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	40022000 	.word	0x40022000

08000994 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000998:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <HAL_DeInit+0x3c>)
 800099a:	2201      	movs	r2, #1
 800099c:	4252      	negs	r2, r2
 800099e:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_DeInit+0x3c>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 80009a6:	4b0a      	ldr	r3, [pc, #40]	; (80009d0 <HAL_DeInit+0x3c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	4252      	negs	r2, r2
 80009ac:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 80009ae:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_DeInit+0x3c>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	60da      	str	r2, [r3, #12]

  __HAL_RCC_AHB_FORCE_RESET();
 80009b4:	4b06      	ldr	r3, [pc, #24]	; (80009d0 <HAL_DeInit+0x3c>)
 80009b6:	2201      	movs	r2, #1
 80009b8:	4252      	negs	r2, r2
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 80009bc:	4b04      	ldr	r3, [pc, #16]	; (80009d0 <HAL_DeInit+0x3c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	629a      	str	r2, [r3, #40]	; 0x28

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80009c2:	f003 fbb6 	bl	8004132 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	0018      	movs	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	40021000 	.word	0x40021000
/**
  * @brief  Initializes the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}

080009e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b082      	sub	sp, #8
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 80009f0:	f004 f92c 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 80009f4:	0002      	movs	r2, r0
 80009f6:	23fa      	movs	r3, #250	; 0xfa
 80009f8:	0099      	lsls	r1, r3, #2
 80009fa:	0010      	movs	r0, r2
 80009fc:	f7ff fb94 	bl	8000128 <__udivsi3>
 8000a00:	0003      	movs	r3, r0
 8000a02:	0018      	movs	r0, r3
 8000a04:	f001 fc47 	bl	8002296 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000a08:	6879      	ldr	r1, [r7, #4]
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	425b      	negs	r3, r3
 8000a0e:	2200      	movs	r2, #0
 8000a10:	0018      	movs	r0, r3
 8000a12:	f001 fc03 	bl	800221c <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	0018      	movs	r0, r3
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}

08000a20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0
  uwTick++;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <HAL_IncTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	1c5a      	adds	r2, r3, #1
 8000a2a:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <HAL_IncTick+0x14>)
 8000a2c:	601a      	str	r2, [r3, #0]
}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	200000c8 	.word	0x200000c8

08000a38 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b02      	ldr	r3, [pc, #8]	; (8000a48 <HAL_GetTick+0x10>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	0018      	movs	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	200000c8 	.word	0x200000c8

08000a4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b084      	sub	sp, #16
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a54:	f7ff fff0 	bl	8000a38 <HAL_GetTick>
 8000a58:	0003      	movs	r3, r0
 8000a5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	60fb      	str	r3, [r7, #12]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	3301      	adds	r3, #1
 8000a64:	d002      	beq.n	8000a6c <HAL_Delay+0x20>
  {
     wait++;
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000a6c:	46c0      	nop			; (mov r8, r8)
 8000a6e:	f7ff ffe3 	bl	8000a38 <HAL_GetTick>
 8000a72:	0002      	movs	r2, r0
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1ad2      	subs	r2, r2, r3
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d3f7      	bcc.n	8000a6e <HAL_Delay+0x22>
  {
  }
}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	46bd      	mov	sp, r7
 8000a82:	b004      	add	sp, #16
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <HAL_SuspendTick+0x18>)
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_SuspendTick+0x18>)
 8000a90:	6812      	ldr	r2, [r2, #0]
 8000a92:	2102      	movs	r1, #2
 8000a94:	438a      	bics	r2, r1
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	e000e010 	.word	0xe000e010

08000aa4 <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <HAL_ResumeTick+0x18>)
 8000aaa:	4a04      	ldr	r2, [pc, #16]	; (8000abc <HAL_ResumeTick+0x18>)
 8000aac:	6812      	ldr	r2, [r2, #0]
 8000aae:	2102      	movs	r1, #2
 8000ab0:	430a      	orrs	r2, r1
 8000ab2:	601a      	str	r2, [r3, #0]
}
 8000ab4:	46c0      	nop			; (mov r8, r8)
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	46c0      	nop			; (mov r8, r8)
 8000abc:	e000e010 	.word	0xe000e010

08000ac0 <HAL_GetHalVersion>:
/**
  * @brief  This method returns the HAL revision
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
 return __STM32F0xx_HAL_VERSION;
 8000ac4:	4b01      	ldr	r3, [pc, #4]	; (8000acc <HAL_GetHalVersion+0xc>)
}
 8000ac6:	0018      	movs	r0, r3
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	01070000 	.word	0x01070000

08000ad0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8000ad4:	4b02      	ldr	r3, [pc, #8]	; (8000ae0 <HAL_GetREVID+0x10>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	0c1b      	lsrs	r3, r3, #16
}
 8000ada:	0018      	movs	r0, r3
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40015800 	.word	0x40015800

08000ae4 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <HAL_GetDEVID+0x14>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	051b      	lsls	r3, r3, #20
 8000aee:	0d1b      	lsrs	r3, r3, #20
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	40015800 	.word	0x40015800

08000afc <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)UID_BASE)));
 8000b00:	4b02      	ldr	r3, [pc, #8]	; (8000b0c <HAL_GetUIDw0+0x10>)
 8000b02:	681b      	ldr	r3, [r3, #0]
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	1ffff7ac 	.word	0x1ffff7ac

08000b10 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8000b14:	4b02      	ldr	r3, [pc, #8]	; (8000b20 <HAL_GetUIDw1+0x10>)
 8000b16:	681b      	ldr	r3, [r3, #0]
}
 8000b18:	0018      	movs	r0, r3
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	46c0      	nop			; (mov r8, r8)
 8000b20:	1ffff7b0 	.word	0x1ffff7b0

08000b24 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
   return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8000b28:	4b02      	ldr	r3, [pc, #8]	; (8000b34 <HAL_GetUIDw2+0x10>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	1ffff7b4 	.word	0x1ffff7b4

08000b38 <HAL_DBGMCU_EnableDBGStopMode>:
/**
  * @brief  Enable the Debug Module during STOP mode       
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStopMode(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000b3e:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_DBGMCU_EnableDBGStopMode+0x18>)
 8000b40:	6852      	ldr	r2, [r2, #4]
 8000b42:	2102      	movs	r1, #2
 8000b44:	430a      	orrs	r2, r1
 8000b46:	605a      	str	r2, [r3, #4]
}
 8000b48:	46c0      	nop			; (mov r8, r8)
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	40015800 	.word	0x40015800

08000b54 <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the Debug Module during STOP mode       
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8000b58:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8000b5a:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <HAL_DBGMCU_DisableDBGStopMode+0x18>)
 8000b5c:	6852      	ldr	r2, [r2, #4]
 8000b5e:	2102      	movs	r1, #2
 8000b60:	438a      	bics	r2, r1
 8000b62:	605a      	str	r2, [r3, #4]
}
 8000b64:	46c0      	nop			; (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	40015800 	.word	0x40015800

08000b70 <HAL_DBGMCU_EnableDBGStandbyMode>:
/**
  * @brief  Enable the Debug Module during STANDBY mode       
  * @retval None
  */
void HAL_DBGMCU_EnableDBGStandbyMode(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  SET_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000b74:	4b04      	ldr	r3, [pc, #16]	; (8000b88 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000b76:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <HAL_DBGMCU_EnableDBGStandbyMode+0x18>)
 8000b78:	6852      	ldr	r2, [r2, #4]
 8000b7a:	2104      	movs	r1, #4
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	605a      	str	r2, [r3, #4]
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	40015800 	.word	0x40015800

08000b8c <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the Debug Module during STANDBY mode       
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8000b94:	6852      	ldr	r2, [r2, #4]
 8000b96:	2104      	movs	r1, #4
 8000b98:	438a      	bics	r2, r1
 8000b9a:	605a      	str	r2, [r3, #4]
}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	40015800 	.word	0x40015800

08000ba8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bb0:	230f      	movs	r3, #15
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	e124      	b.n	8000e10 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10a      	bne.n	8000be4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2240      	movs	r2, #64	; 0x40
 8000bd8:	2100      	movs	r1, #0
 8000bda:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	0018      	movs	r0, r3
 8000be0:	f005 fa2a 	bl	8006038 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be8:	2210      	movs	r2, #16
 8000bea:	4013      	ands	r3, r2
 8000bec:	d000      	beq.n	8000bf0 <HAL_ADC_Init+0x48>
 8000bee:	e102      	b.n	8000df6 <HAL_ADC_Init+0x24e>
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	18fb      	adds	r3, r7, r3
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d000      	beq.n	8000bfc <HAL_ADC_Init+0x54>
 8000bfa:	e0fc      	b.n	8000df6 <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	689b      	ldr	r3, [r3, #8]
 8000c02:	2204      	movs	r2, #4
 8000c04:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000c06:	d000      	beq.n	8000c0a <HAL_ADC_Init+0x62>
 8000c08:	e0f5      	b.n	8000df6 <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a82      	ldr	r2, [pc, #520]	; (8000e18 <HAL_ADC_Init+0x270>)
 8000c10:	4013      	ands	r3, r2
 8000c12:	2202      	movs	r2, #2
 8000c14:	431a      	orrs	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	2203      	movs	r2, #3
 8000c22:	4013      	ands	r3, r2
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d112      	bne.n	8000c4e <HAL_ADC_Init+0xa6>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2201      	movs	r2, #1
 8000c30:	4013      	ands	r3, r2
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d009      	beq.n	8000c4a <HAL_ADC_Init+0xa2>
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	68da      	ldr	r2, [r3, #12]
 8000c3c:	2380      	movs	r3, #128	; 0x80
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	401a      	ands	r2, r3
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	021b      	lsls	r3, r3, #8
 8000c46:	429a      	cmp	r2, r3
 8000c48:	d101      	bne.n	8000c4e <HAL_ADC_Init+0xa6>
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e000      	b.n	8000c50 <HAL_ADC_Init+0xa8>
 8000c4e:	2300      	movs	r3, #0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d116      	bne.n	8000c82 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	687a      	ldr	r2, [r7, #4]
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	68d2      	ldr	r2, [r2, #12]
 8000c5e:	2118      	movs	r1, #24
 8000c60:	438a      	bics	r2, r1
 8000c62:	0011      	movs	r1, r2
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	6892      	ldr	r2, [r2, #8]
 8000c68:	430a      	orrs	r2, r1
 8000c6a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	6912      	ldr	r2, [r2, #16]
 8000c76:	0092      	lsls	r2, r2, #2
 8000c78:	0891      	lsrs	r1, r2, #2
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6852      	ldr	r2, [r2, #4]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	6812      	ldr	r2, [r2, #0]
 8000c8a:	68d2      	ldr	r2, [r2, #12]
 8000c8c:	4963      	ldr	r1, [pc, #396]	; (8000e1c <HAL_ADC_Init+0x274>)
 8000c8e:	400a      	ands	r2, r1
 8000c90:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	69db      	ldr	r3, [r3, #28]
 8000c9c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000c9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6a1b      	ldr	r3, [r3, #32]
 8000ca4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000ca6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cac:	2b01      	cmp	r3, #1
 8000cae:	d002      	beq.n	8000cb6 <HAL_ADC_Init+0x10e>
 8000cb0:	2380      	movs	r3, #128	; 0x80
 8000cb2:	015b      	lsls	r3, r3, #5
 8000cb4:	e000      	b.n	8000cb8 <HAL_ADC_Init+0x110>
 8000cb6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000cb8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000cbe:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	691b      	ldr	r3, [r3, #16]
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d101      	bne.n	8000ccc <HAL_ADC_Init+0x124>
 8000cc8:	2304      	movs	r3, #4
 8000cca:	e000      	b.n	8000cce <HAL_ADC_Init+0x126>
 8000ccc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 8000cce:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd4:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000cd6:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000cd8:	68ba      	ldr	r2, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d115      	bne.n	8000d12 <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6a1b      	ldr	r3, [r3, #32]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d105      	bne.n	8000cfa <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000cee:	68bb      	ldr	r3, [r7, #8]
 8000cf0:	2280      	movs	r2, #128	; 0x80
 8000cf2:	0252      	lsls	r2, r2, #9
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	e00b      	b.n	8000d12 <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	2220      	movs	r2, #32
 8000d00:	431a      	orrs	r2, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d16:	23c2      	movs	r3, #194	; 0xc2
 8000d18:	33ff      	adds	r3, #255	; 0xff
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	d007      	beq.n	8000d2e <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000d26:	4313      	orrs	r3, r2
 8000d28:	68ba      	ldr	r2, [r7, #8]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	687a      	ldr	r2, [r7, #4]
 8000d34:	6812      	ldr	r2, [r2, #0]
 8000d36:	68d1      	ldr	r1, [r2, #12]
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	430a      	orrs	r2, r1
 8000d3c:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d42:	2380      	movs	r3, #128	; 0x80
 8000d44:	055b      	lsls	r3, r3, #21
 8000d46:	429a      	cmp	r2, r3
 8000d48:	d01b      	beq.n	8000d82 <HAL_ADC_Init+0x1da>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d017      	beq.n	8000d82 <HAL_ADC_Init+0x1da>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d013      	beq.n	8000d82 <HAL_ADC_Init+0x1da>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d5e:	2b03      	cmp	r3, #3
 8000d60:	d00f      	beq.n	8000d82 <HAL_ADC_Init+0x1da>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d00b      	beq.n	8000d82 <HAL_ADC_Init+0x1da>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d6e:	2b05      	cmp	r3, #5
 8000d70:	d007      	beq.n	8000d82 <HAL_ADC_Init+0x1da>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d003      	beq.n	8000d82 <HAL_ADC_Init+0x1da>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d7e:	2b07      	cmp	r3, #7
 8000d80:	d112      	bne.n	8000da8 <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	6812      	ldr	r2, [r2, #0]
 8000d8a:	6952      	ldr	r2, [r2, #20]
 8000d8c:	2107      	movs	r1, #7
 8000d8e:	438a      	bics	r2, r1
 8000d90:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	6812      	ldr	r2, [r2, #0]
 8000d9a:	6951      	ldr	r1, [r2, #20]
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000da0:	2007      	movs	r0, #7
 8000da2:	4002      	ands	r2, r0
 8000da4:	430a      	orrs	r2, r1
 8000da6:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	68db      	ldr	r3, [r3, #12]
 8000dae:	4a1c      	ldr	r2, [pc, #112]	; (8000e20 <HAL_ADC_Init+0x278>)
 8000db0:	401a      	ands	r2, r3
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d10b      	bne.n	8000dd0 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2200      	movs	r2, #0
 8000dbc:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	4393      	bics	r3, r2
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000dce:	e01c      	b.n	8000e0a <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd4:	2212      	movs	r2, #18
 8000dd6:	4393      	bics	r3, r2
 8000dd8:	2210      	movs	r2, #16
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000de4:	2201      	movs	r2, #1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000dec:	230f      	movs	r3, #15
 8000dee:	18fb      	adds	r3, r7, r3
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000df4:	e009      	b.n	8000e0a <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	2210      	movs	r2, #16
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8000e02:	230f      	movs	r3, #15
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e0a:	230f      	movs	r3, #15
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	781b      	ldrb	r3, [r3, #0]
}
 8000e10:	0018      	movs	r0, r3
 8000e12:	46bd      	mov	sp, r7
 8000e14:	b004      	add	sp, #16
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	fffffefd 	.word	0xfffffefd
 8000e1c:	fffe0219 	.word	0xfffe0219
 8000e20:	833fffe7 	.word	0x833fffe7

08000e24 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef* hadc)
{
 8000e24:	b590      	push	{r4, r7, lr}
 8000e26:	b085      	sub	sp, #20
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e2c:	230f      	movs	r3, #15
 8000e2e:	18fb      	adds	r3, r7, r3
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d101      	bne.n	8000e3e <HAL_ADC_DeInit+0x1a>
  {
     return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e072      	b.n	8000f24 <HAL_ADC_DeInit+0x100>
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	2202      	movs	r2, #2
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8000e4a:	230f      	movs	r3, #15
 8000e4c:	18fc      	adds	r4, r7, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 ff28 	bl	8001ca6 <ADC_ConversionStop>
 8000e56:	0003      	movs	r3, r0
 8000e58:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000e5a:	230f      	movs	r3, #15
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d10f      	bne.n	8000e84 <HAL_ADC_DeInit+0x60>
  {   
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8000e64:	230f      	movs	r3, #15
 8000e66:	18fc      	adds	r4, r7, r3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f000 feb2 	bl	8001bd4 <ADC_Disable>
 8000e70:	0003      	movs	r3, r0
 8000e72:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status != HAL_ERROR)
 8000e74:	230f      	movs	r3, #15
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d002      	beq.n	8000e84 <HAL_ADC_DeInit+0x60>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2201      	movs	r2, #1
 8000e82:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (tmp_hal_status != HAL_ERROR)
 8000e84:	230f      	movs	r3, #15
 8000e86:	18fb      	adds	r3, r7, r3
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d043      	beq.n	8000f16 <HAL_ADC_DeInit+0xf2>
  {
  
    /* ========== Reset ADC registers ========== */
    /* Reset register IER */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD   | ADC_IT_OVR  |
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	687a      	ldr	r2, [r7, #4]
 8000e94:	6812      	ldr	r2, [r2, #0]
 8000e96:	6852      	ldr	r2, [r2, #4]
 8000e98:	219f      	movs	r1, #159	; 0x9f
 8000e9a:	438a      	bics	r2, r1
 8000e9c:	605a      	str	r2, [r3, #4]
                                ADC_IT_EOS   | ADC_IT_EOC  |
                                ADC_IT_EOSMP | ADC_IT_RDY   ) );
        
    /* Reset register ISR */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD   | ADC_FLAG_OVR  |
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	229f      	movs	r2, #159	; 0x9f
 8000ea4:	601a      	str	r2, [r3, #0]
    /* Reset register CR */
    /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
    /* "read-set": no direct reset applicable.                                */

    /* Reset register CFGR1 */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWDCH   | ADC_CFGR1_AWDEN  | ADC_CFGR1_AWDSGL | ADC_CFGR1_DISCEN |
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	6812      	ldr	r2, [r2, #0]
 8000eae:	68d2      	ldr	r2, [r2, #12]
 8000eb0:	491e      	ldr	r1, [pc, #120]	; (8000f2c <HAL_ADC_DeInit+0x108>)
 8000eb2:	400a      	ands	r2, r1
 8000eb4:	60da      	str	r2, [r3, #12]
                               ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN                      );
    
    /* Reset register CFGR2 */
    /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
    /*       already done above.                                              */
    hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	687a      	ldr	r2, [r7, #4]
 8000ebc:	6812      	ldr	r2, [r2, #0]
 8000ebe:	6912      	ldr	r2, [r2, #16]
 8000ec0:	0092      	lsls	r2, r2, #2
 8000ec2:	0892      	lsrs	r2, r2, #2
 8000ec4:	611a      	str	r2, [r3, #16]
    
    /* Reset register SMPR */
    hadc->Instance->SMPR &= ~ADC_SMPR_SMP;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	6812      	ldr	r2, [r2, #0]
 8000ece:	6952      	ldr	r2, [r2, #20]
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	438a      	bics	r2, r1
 8000ed4:	615a      	str	r2, [r3, #20]
    
    /* Reset register TR1 */
    hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	687a      	ldr	r2, [r7, #4]
 8000edc:	6812      	ldr	r2, [r2, #0]
 8000ede:	6a12      	ldr	r2, [r2, #32]
 8000ee0:	4913      	ldr	r1, [pc, #76]	; (8000f30 <HAL_ADC_DeInit+0x10c>)
 8000ee2:	400a      	ands	r2, r1
 8000ee4:	621a      	str	r2, [r3, #32]
    
    /* Reset register CHSELR */
    hadc->Instance->CHSELR &= ~(ADC_CHSELR_CHSEL18 | ADC_CHSELR_CHSEL17 | ADC_CHSELR_CHSEL16 |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6812      	ldr	r2, [r2, #0]
 8000eee:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8000ef0:	0cd2      	lsrs	r2, r2, #19
 8000ef2:	04d2      	lsls	r2, r2, #19
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Reset register DR */
    /* bits in access mode read only, no direct reset applicable*/
    
    /* Reset register CCR */
    ADC->CCR &= ~(ADC_CCR_ALL);
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <HAL_ADC_DeInit+0x110>)
 8000ef8:	4a0e      	ldr	r2, [pc, #56]	; (8000f34 <HAL_ADC_DeInit+0x110>)
 8000efa:	6812      	ldr	r2, [r2, #0]
 8000efc:	490e      	ldr	r1, [pc, #56]	; (8000f38 <HAL_ADC_DeInit+0x114>)
 8000efe:	400a      	ands	r2, r1
 8000f00:	601a      	str	r2, [r3, #0]
    /*                                                                        */
    /*  __HAL_RCC_ADC1_FORCE_RESET()                                                  */
    /*  __HAL_RCC_ADC1_RELEASE_RESET()                                                */
    
    /* DeInit the low level hardware */
    HAL_ADC_MspDeInit(hadc);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	0018      	movs	r0, r3
 8000f06:	f005 f991 	bl	800622c <HAL_ADC_MspDeInit>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set ADC state */
    hadc->State = HAL_ADC_STATE_RESET; 
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	2200      	movs	r2, #0
 8000f14:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2240      	movs	r2, #64	; 0x40
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000f1e:	230f      	movs	r3, #15
 8000f20:	18fb      	adds	r3, r7, r3
 8000f22:	781b      	ldrb	r3, [r3, #0]
}
 8000f24:	0018      	movs	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	b005      	add	sp, #20
 8000f2a:	bd90      	pop	{r4, r7, pc}
 8000f2c:	833e0200 	.word	0x833e0200
 8000f30:	f000f000 	.word	0xf000f000
 8000f34:	40012708 	.word	0x40012708
 8000f38:	fe3fffff 	.word	0xfe3fffff
  * @brief  Initializes the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspInit must be implemented in the user file.
   */ 
}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b002      	add	sp, #8
 8000f4a:	bd80      	pop	{r7, pc}
  * @brief  DeInitializes the ADC MSP.
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_MspDeInit(ADC_HandleTypeDef* hadc)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_MspDeInit must be implemented in the user file.
   */ 
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b002      	add	sp, #8
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f5c:	b590      	push	{r4, r7, lr}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f64:	230f      	movs	r3, #15
 8000f66:	18fb      	adds	r3, r7, r3
 8000f68:	2200      	movs	r2, #0
 8000f6a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2204      	movs	r2, #4
 8000f74:	4013      	ands	r3, r2
 8000f76:	d138      	bne.n	8000fea <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2240      	movs	r2, #64	; 0x40
 8000f7c:	5c9b      	ldrb	r3, [r3, r2]
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d101      	bne.n	8000f86 <HAL_ADC_Start+0x2a>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e038      	b.n	8000ff8 <HAL_ADC_Start+0x9c>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2240      	movs	r2, #64	; 0x40
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d007      	beq.n	8000fa6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000f96:	230f      	movs	r3, #15
 8000f98:	18fc      	adds	r4, r7, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	0018      	movs	r0, r3
 8000f9e:	f000 fd9d 	bl	8001adc <ADC_Enable>
 8000fa2:	0003      	movs	r3, r0
 8000fa4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000fa6:	230f      	movs	r3, #15
 8000fa8:	18fb      	adds	r3, r7, r3
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d120      	bne.n	8000ff2 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb4:	4a12      	ldr	r2, [pc, #72]	; (8001000 <HAL_ADC_Start+0xa4>)
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	2280      	movs	r2, #128	; 0x80
 8000fba:	0052      	lsls	r2, r2, #1
 8000fbc:	431a      	orrs	r2, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2240      	movs	r2, #64	; 0x40
 8000fcc:	2100      	movs	r1, #0
 8000fce:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	221c      	movs	r2, #28
 8000fd6:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	687a      	ldr	r2, [r7, #4]
 8000fde:	6812      	ldr	r2, [r2, #0]
 8000fe0:	6892      	ldr	r2, [r2, #8]
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	e003      	b.n	8000ff2 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000fea:	230f      	movs	r3, #15
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	2202      	movs	r2, #2
 8000ff0:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff2:	230f      	movs	r3, #15
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	781b      	ldrb	r3, [r3, #0]
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b005      	add	sp, #20
 8000ffe:	bd90      	pop	{r4, r7, pc}
 8001000:	fffff0fe 	.word	0xfffff0fe

08001004 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8001004:	b590      	push	{r4, r7, lr}
 8001006:	b085      	sub	sp, #20
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800100c:	230f      	movs	r3, #15
 800100e:	18fb      	adds	r3, r7, r3
 8001010:	2200      	movs	r2, #0
 8001012:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2240      	movs	r2, #64	; 0x40
 8001018:	5c9b      	ldrb	r3, [r3, r2]
 800101a:	2b01      	cmp	r3, #1
 800101c:	d101      	bne.n	8001022 <HAL_ADC_Stop+0x1e>
 800101e:	2302      	movs	r3, #2
 8001020:	e02c      	b.n	800107c <HAL_ADC_Stop+0x78>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2240      	movs	r2, #64	; 0x40
 8001026:	2101      	movs	r1, #1
 8001028:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 800102a:	230f      	movs	r3, #15
 800102c:	18fc      	adds	r4, r7, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	0018      	movs	r0, r3
 8001032:	f000 fe38 	bl	8001ca6 <ADC_ConversionStop>
 8001036:	0003      	movs	r3, r0
 8001038:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800103a:	230f      	movs	r3, #15
 800103c:	18fb      	adds	r3, r7, r3
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d114      	bne.n	800106e <HAL_ADC_Stop+0x6a>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001044:	230f      	movs	r3, #15
 8001046:	18fc      	adds	r4, r7, r3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	0018      	movs	r0, r3
 800104c:	f000 fdc2 	bl	8001bd4 <ADC_Disable>
 8001050:	0003      	movs	r3, r0
 8001052:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001054:	230f      	movs	r3, #15
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	781b      	ldrb	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d107      	bne.n	800106e <HAL_ADC_Stop+0x6a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	4a08      	ldr	r2, [pc, #32]	; (8001084 <HAL_ADC_Stop+0x80>)
 8001064:	4013      	ands	r3, r2
 8001066:	2201      	movs	r2, #1
 8001068:	431a      	orrs	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2240      	movs	r2, #64	; 0x40
 8001072:	2100      	movs	r1, #0
 8001074:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001076:	230f      	movs	r3, #15
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	781b      	ldrb	r3, [r3, #0]
}
 800107c:	0018      	movs	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	b005      	add	sp, #20
 8001082:	bd90      	pop	{r4, r7, pc}
 8001084:	fffffefe 	.word	0xfffffefe

08001088 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b084      	sub	sp, #16
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	2b08      	cmp	r3, #8
 8001098:	d102      	bne.n	80010a0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800109a:	2308      	movs	r3, #8
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	e013      	b.n	80010c8 <HAL_ADC_PollForConversion+0x40>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	2201      	movs	r2, #1
 80010a8:	4013      	ands	r3, r2
 80010aa:	d00b      	beq.n	80010c4 <HAL_ADC_PollForConversion+0x3c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	2220      	movs	r2, #32
 80010b2:	431a      	orrs	r2, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2240      	movs	r2, #64	; 0x40
 80010bc:	2100      	movs	r1, #0
 80010be:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e06b      	b.n	800119c <HAL_ADC_PollForConversion+0x114>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80010c4:	230c      	movs	r3, #12
 80010c6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80010c8:	f7ff fcb6 	bl	8000a38 <HAL_GetTick>
 80010cc:	0003      	movs	r3, r0
 80010ce:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80010d0:	e019      	b.n	8001106 <HAL_ADC_PollForConversion+0x7e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	3301      	adds	r3, #1
 80010d6:	d016      	beq.n	8001106 <HAL_ADC_PollForConversion+0x7e>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d007      	beq.n	80010ee <HAL_ADC_PollForConversion+0x66>
 80010de:	f7ff fcab 	bl	8000a38 <HAL_GetTick>
 80010e2:	0002      	movs	r2, r0
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1ad2      	subs	r2, r2, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d90b      	bls.n	8001106 <HAL_ADC_PollForConversion+0x7e>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	2204      	movs	r2, #4
 80010f4:	431a      	orrs	r2, r3
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2240      	movs	r2, #64	; 0x40
 80010fe:	2100      	movs	r1, #0
 8001100:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 8001102:	2303      	movs	r3, #3
 8001104:	e04a      	b.n	800119c <HAL_ADC_PollForConversion+0x114>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	68fa      	ldr	r2, [r7, #12]
 800110e:	4013      	ands	r3, r2
 8001110:	d0df      	beq.n	80010d2 <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	431a      	orrs	r2, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	68da      	ldr	r2, [r3, #12]
 8001126:	23c0      	movs	r3, #192	; 0xc0
 8001128:	011b      	lsls	r3, r3, #4
 800112a:	4013      	ands	r3, r2
 800112c:	d12d      	bne.n	800118a <HAL_ADC_PollForConversion+0x102>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a1b      	ldr	r3, [r3, #32]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001132:	2b00      	cmp	r3, #0
 8001134:	d129      	bne.n	800118a <HAL_ADC_PollForConversion+0x102>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2208      	movs	r2, #8
 800113e:	4013      	ands	r3, r2
 8001140:	2b08      	cmp	r3, #8
 8001142:	d122      	bne.n	800118a <HAL_ADC_PollForConversion+0x102>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2204      	movs	r2, #4
 800114c:	4013      	ands	r3, r2
 800114e:	d110      	bne.n	8001172 <HAL_ADC_PollForConversion+0xea>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	687a      	ldr	r2, [r7, #4]
 8001156:	6812      	ldr	r2, [r2, #0]
 8001158:	6852      	ldr	r2, [r2, #4]
 800115a:	210c      	movs	r1, #12
 800115c:	438a      	bics	r2, r1
 800115e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001164:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_ADC_PollForConversion+0x11c>)
 8001166:	4013      	ands	r3, r2
 8001168:	2201      	movs	r2, #1
 800116a:	431a      	orrs	r2, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	645a      	str	r2, [r3, #68]	; 0x44
 8001170:	e00b      	b.n	800118a <HAL_ADC_PollForConversion+0x102>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	2220      	movs	r2, #32
 8001178:	431a      	orrs	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001182:	2201      	movs	r2, #1
 8001184:	431a      	orrs	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d103      	bne.n	800119a <HAL_ADC_PollForConversion+0x112>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	220c      	movs	r2, #12
 8001198:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	0018      	movs	r0, r3
 800119e:	46bd      	mov	sp, r7
 80011a0:	b004      	add	sp, #16
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	fffffefe 	.word	0xfffffefe

080011a8 <HAL_ADC_PollForEvent>:
  *            @arg ADC_OVR_EVENT: ADC Overrun event
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForEvent(ADC_HandleTypeDef* hadc, uint32_t EventType, uint32_t Timeout)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart=0; 
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EVENT_TYPE(EventType));
  
  /* Get tick count */
  tickstart = HAL_GetTick();   
 80011b8:	f7ff fc3e 	bl	8000a38 <HAL_GetTick>
 80011bc:	0003      	movs	r3, r0
 80011be:	617b      	str	r3, [r7, #20]
      
  /* Check selected event flag */
  while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 80011c0:	e019      	b.n	80011f6 <HAL_ADC_PollForEvent+0x4e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	3301      	adds	r3, #1
 80011c6:	d016      	beq.n	80011f6 <HAL_ADC_PollForEvent+0x4e>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d007      	beq.n	80011de <HAL_ADC_PollForEvent+0x36>
 80011ce:	f7ff fc33 	bl	8000a38 <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	1ad2      	subs	r2, r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d90b      	bls.n	80011f6 <HAL_ADC_PollForEvent+0x4e>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	2204      	movs	r2, #4
 80011e4:	431a      	orrs	r2, r3
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	2240      	movs	r2, #64	; 0x40
 80011ee:	2100      	movs	r1, #0
 80011f0:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e02d      	b.n	8001252 <HAL_ADC_PollForEvent+0xaa>
  while(__HAL_ADC_GET_FLAG(hadc, EventType) == RESET)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	68ba      	ldr	r2, [r7, #8]
 80011fe:	401a      	ands	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	429a      	cmp	r2, r3
 8001204:	d1dd      	bne.n	80011c2 <HAL_ADC_PollForEvent+0x1a>
      }
    }
  }

  switch(EventType)
 8001206:	68bb      	ldr	r3, [r7, #8]
 8001208:	2b80      	cmp	r3, #128	; 0x80
 800120a:	d10b      	bne.n	8001224 <HAL_ADC_PollForEvent+0x7c>
  {
  /* Analog watchdog (level out of window) event */
  case ADC_AWD_EVENT:
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001210:	2280      	movs	r2, #128	; 0x80
 8001212:	0252      	lsls	r2, r2, #9
 8001214:	431a      	orrs	r2, r3
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	645a      	str	r2, [r3, #68]	; 0x44
      
    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	601a      	str	r2, [r3, #0]
    break;
 8001222:	e015      	b.n	8001250 <HAL_ADC_PollForEvent+0xa8>
  default: /* Case ADC_OVR_EVENT */
    /* If overrun is set to overwrite previous data, overrun event is not     */
    /* considered as an error.                                                */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001228:	2b01      	cmp	r3, #1
 800122a:	d10c      	bne.n	8001246 <HAL_ADC_PollForEvent+0x9e>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001230:	2280      	movs	r2, #128	; 0x80
 8001232:	00d2      	lsls	r2, r2, #3
 8001234:	431a      	orrs	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	645a      	str	r2, [r3, #68]	; 0x44
        
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800123e:	2202      	movs	r2, #2
 8001240:	431a      	orrs	r2, r3
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	649a      	str	r2, [r3, #72]	; 0x48
    }
    
    /* Clear ADC Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2210      	movs	r2, #16
 800124c:	601a      	str	r2, [r3, #0]
    break;
 800124e:	46c0      	nop			; (mov r8, r8)
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b006      	add	sp, #24
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800125c:	b590      	push	{r4, r7, lr}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001264:	230f      	movs	r3, #15
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	2204      	movs	r2, #4
 8001274:	4013      	ands	r3, r2
 8001276:	d156      	bne.n	8001326 <HAL_ADC_Start_IT+0xca>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2240      	movs	r2, #64	; 0x40
 800127c:	5c9b      	ldrb	r3, [r3, r2]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d101      	bne.n	8001286 <HAL_ADC_Start_IT+0x2a>
 8001282:	2302      	movs	r3, #2
 8001284:	e056      	b.n	8001334 <HAL_ADC_Start_IT+0xd8>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2240      	movs	r2, #64	; 0x40
 800128a:	2101      	movs	r1, #1
 800128c:	5499      	strb	r1, [r3, r2]
     
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	69db      	ldr	r3, [r3, #28]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d007      	beq.n	80012a6 <HAL_ADC_Start_IT+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001296:	230f      	movs	r3, #15
 8001298:	18fc      	adds	r4, r7, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	0018      	movs	r0, r3
 800129e:	f000 fc1d 	bl	8001adc <ADC_Enable>
 80012a2:	0003      	movs	r3, r0
 80012a4:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80012a6:	230f      	movs	r3, #15
 80012a8:	18fb      	adds	r3, r7, r3
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d13e      	bne.n	800132e <HAL_ADC_Start_IT+0xd2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b4:	4a21      	ldr	r2, [pc, #132]	; (800133c <HAL_ADC_Start_IT+0xe0>)
 80012b6:	4013      	ands	r3, r2
 80012b8:	2280      	movs	r2, #128	; 0x80
 80012ba:	0052      	lsls	r2, r2, #1
 80012bc:	431a      	orrs	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2240      	movs	r2, #64	; 0x40
 80012cc:	2100      	movs	r1, #0
 80012ce:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	221c      	movs	r2, #28
 80012d6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	695b      	ldr	r3, [r3, #20]
 80012dc:	2b08      	cmp	r3, #8
 80012de:	d110      	bne.n	8001302 <HAL_ADC_Start_IT+0xa6>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	6852      	ldr	r2, [r2, #4]
 80012ea:	2104      	movs	r1, #4
 80012ec:	438a      	bics	r2, r1
 80012ee:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS | ADC_IT_OVR));
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	687a      	ldr	r2, [r7, #4]
 80012f6:	6812      	ldr	r2, [r2, #0]
 80012f8:	6852      	ldr	r2, [r2, #4]
 80012fa:	2118      	movs	r1, #24
 80012fc:	430a      	orrs	r2, r1
 80012fe:	605a      	str	r2, [r3, #4]
          break;
 8001300:	e008      	b.n	8001314 <HAL_ADC_Start_IT+0xb8>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	6852      	ldr	r2, [r2, #4]
 800130c:	211c      	movs	r1, #28
 800130e:	430a      	orrs	r2, r1
 8001310:	605a      	str	r2, [r3, #4]
          break;
 8001312:	46c0      	nop			; (mov r8, r8)
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6812      	ldr	r2, [r2, #0]
 800131c:	6892      	ldr	r2, [r2, #8]
 800131e:	2104      	movs	r1, #4
 8001320:	430a      	orrs	r2, r1
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	e003      	b.n	800132e <HAL_ADC_Start_IT+0xd2>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001326:	230f      	movs	r3, #15
 8001328:	18fb      	adds	r3, r7, r3
 800132a:	2202      	movs	r2, #2
 800132c:	701a      	strb	r2, [r3, #0]
  }    
    
  /* Return function status */
  return tmp_hal_status;
 800132e:	230f      	movs	r3, #15
 8001330:	18fb      	adds	r3, r7, r3
 8001332:	781b      	ldrb	r3, [r3, #0]
}
 8001334:	0018      	movs	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	b005      	add	sp, #20
 800133a:	bd90      	pop	{r4, r7, pc}
 800133c:	fffff0fe 	.word	0xfffff0fe

08001340 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b085      	sub	sp, #20
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001348:	230f      	movs	r3, #15
 800134a:	18fb      	adds	r3, r7, r3
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2240      	movs	r2, #64	; 0x40
 8001354:	5c9b      	ldrb	r3, [r3, r2]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d101      	bne.n	800135e <HAL_ADC_Stop_IT+0x1e>
 800135a:	2302      	movs	r3, #2
 800135c:	e034      	b.n	80013c8 <HAL_ADC_Stop_IT+0x88>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2240      	movs	r2, #64	; 0x40
 8001362:	2101      	movs	r1, #1
 8001364:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001366:	230f      	movs	r3, #15
 8001368:	18fc      	adds	r4, r7, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	0018      	movs	r0, r3
 800136e:	f000 fc9a 	bl	8001ca6 <ADC_ConversionStop>
 8001372:	0003      	movs	r3, r0
 8001374:	7023      	strb	r3, [r4, #0]
   
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001376:	230f      	movs	r3, #15
 8001378:	18fb      	adds	r3, r7, r3
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d11c      	bne.n	80013ba <HAL_ADC_Stop_IT+0x7a>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6812      	ldr	r2, [r2, #0]
 8001388:	6852      	ldr	r2, [r2, #4]
 800138a:	211c      	movs	r1, #28
 800138c:	438a      	bics	r2, r1
 800138e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001390:	230f      	movs	r3, #15
 8001392:	18fc      	adds	r4, r7, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	0018      	movs	r0, r3
 8001398:	f000 fc1c 	bl	8001bd4 <ADC_Disable>
 800139c:	0003      	movs	r3, r0
 800139e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80013a0:	230f      	movs	r3, #15
 80013a2:	18fb      	adds	r3, r7, r3
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d107      	bne.n	80013ba <HAL_ADC_Stop_IT+0x7a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ae:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <HAL_ADC_Stop_IT+0x90>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	2201      	movs	r2, #1
 80013b4:	431a      	orrs	r2, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2240      	movs	r2, #64	; 0x40
 80013be:	2100      	movs	r1, #0
 80013c0:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80013c2:	230f      	movs	r3, #15
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	781b      	ldrb	r3, [r3, #0]
}
 80013c8:	0018      	movs	r0, r3
 80013ca:	46bd      	mov	sp, r7
 80013cc:	b005      	add	sp, #20
 80013ce:	bd90      	pop	{r4, r7, pc}
 80013d0:	fffffefe 	.word	0xfffffefe

080013d4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e0:	2317      	movs	r3, #23
 80013e2:	18fb      	adds	r3, r7, r3
 80013e4:	2200      	movs	r2, #0
 80013e6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	2204      	movs	r2, #4
 80013f0:	4013      	ands	r3, r2
 80013f2:	d15e      	bne.n	80014b2 <HAL_ADC_Start_DMA+0xde>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	2240      	movs	r2, #64	; 0x40
 80013f8:	5c9b      	ldrb	r3, [r3, r2]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d101      	bne.n	8001402 <HAL_ADC_Start_DMA+0x2e>
 80013fe:	2302      	movs	r3, #2
 8001400:	e05e      	b.n	80014c0 <HAL_ADC_Start_DMA+0xec>
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	2240      	movs	r2, #64	; 0x40
 8001406:	2101      	movs	r1, #1
 8001408:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are       */
    /* performed automatically by hardware.                                     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	69db      	ldr	r3, [r3, #28]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d007      	beq.n	8001422 <HAL_ADC_Start_DMA+0x4e>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001412:	2317      	movs	r3, #23
 8001414:	18fc      	adds	r4, r7, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	0018      	movs	r0, r3
 800141a:	f000 fb5f 	bl	8001adc <ADC_Enable>
 800141e:	0003      	movs	r3, r0
 8001420:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001422:	2317      	movs	r3, #23
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d146      	bne.n	80014ba <HAL_ADC_Start_DMA+0xe6>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	4a25      	ldr	r2, [pc, #148]	; (80014c8 <HAL_ADC_Start_DMA+0xf4>)
 8001432:	4013      	ands	r3, r2
 8001434:	2280      	movs	r2, #128	; 0x80
 8001436:	0052      	lsls	r2, r2, #1
 8001438:	431a      	orrs	r2, r3
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	2200      	movs	r2, #0
 8001442:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	2240      	movs	r2, #64	; 0x40
 8001448:	2100      	movs	r1, #0
 800144a:	5499      	strb	r1, [r3, r2]

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001450:	4a1e      	ldr	r2, [pc, #120]	; (80014cc <HAL_ADC_Start_DMA+0xf8>)
 8001452:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001458:	4a1d      	ldr	r2, [pc, #116]	; (80014d0 <HAL_ADC_Start_DMA+0xfc>)
 800145a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001460:	4a1c      	ldr	r2, [pc, #112]	; (80014d4 <HAL_ADC_Start_DMA+0x100>)
 8001462:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	221c      	movs	r2, #28
 800146a:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	68fa      	ldr	r2, [r7, #12]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	6852      	ldr	r2, [r2, #4]
 8001476:	2110      	movs	r1, #16
 8001478:	430a      	orrs	r2, r1
 800147a:	605a      	str	r2, [r3, #4]
      
      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	6812      	ldr	r2, [r2, #0]
 8001484:	68d2      	ldr	r2, [r2, #12]
 8001486:	2101      	movs	r1, #1
 8001488:	430a      	orrs	r2, r1
 800148a:	60da      	str	r2, [r3, #12]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	3340      	adds	r3, #64	; 0x40
 8001496:	0019      	movs	r1, r3
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	f001 f84a 	bl	8002534 <HAL_DMA_Start_IT>
           
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	6812      	ldr	r2, [r2, #0]
 80014a8:	6892      	ldr	r2, [r2, #8]
 80014aa:	2104      	movs	r1, #4
 80014ac:	430a      	orrs	r2, r1
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	e003      	b.n	80014ba <HAL_ADC_Start_DMA+0xe6>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80014b2:	2317      	movs	r3, #23
 80014b4:	18fb      	adds	r3, r7, r3
 80014b6:	2202      	movs	r2, #2
 80014b8:	701a      	strb	r2, [r3, #0]
  }
    
  /* Return function status */
  return tmp_hal_status;
 80014ba:	2317      	movs	r3, #23
 80014bc:	18fb      	adds	r3, r7, r3
 80014be:	781b      	ldrb	r3, [r3, #0]
}
 80014c0:	0018      	movs	r0, r3
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b007      	add	sp, #28
 80014c6:	bd90      	pop	{r4, r7, pc}
 80014c8:	fffff0fe 	.word	0xfffff0fe
 80014cc:	08001d31 	.word	0x08001d31
 80014d0:	08001de5 	.word	0x08001de5
 80014d4:	08001e03 	.word	0x08001e03

080014d8 <HAL_ADC_Stop_DMA>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{  
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e0:	230f      	movs	r3, #15
 80014e2:	18fb      	adds	r3, r7, r3
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2240      	movs	r2, #64	; 0x40
 80014ec:	5c9b      	ldrb	r3, [r3, r2]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <HAL_ADC_Stop_DMA+0x1e>
 80014f2:	2302      	movs	r3, #2
 80014f4:	e05a      	b.n	80015ac <HAL_ADC_Stop_DMA+0xd4>
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2240      	movs	r2, #64	; 0x40
 80014fa:	2101      	movs	r1, #1
 80014fc:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80014fe:	230f      	movs	r3, #15
 8001500:	18fc      	adds	r4, r7, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	0018      	movs	r0, r3
 8001506:	f000 fbce 	bl	8001ca6 <ADC_ConversionStop>
 800150a:	0003      	movs	r3, r0
 800150c:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800150e:	230f      	movs	r3, #15
 8001510:	18fb      	adds	r3, r7, r3
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d142      	bne.n	800159e <HAL_ADC_Stop_DMA+0xc6>
  {
    /* Disable ADC DMA (ADC DMA configuration ADC_CFGR_DMACFG is kept) */
    hadc->Instance->CFGR1 &= ~ADC_CFGR1_DMAEN;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6812      	ldr	r2, [r2, #0]
 8001520:	68d2      	ldr	r2, [r2, #12]
 8001522:	2101      	movs	r1, #1
 8001524:	438a      	bics	r2, r1
 8001526:	60da      	str	r2, [r3, #12]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* while DMA transfer is on going)                                        */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);   
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152c:	220f      	movs	r2, #15
 800152e:	18bc      	adds	r4, r7, r2
 8001530:	0018      	movs	r0, r3
 8001532:	f001 f865 	bl	8002600 <HAL_DMA_Abort>
 8001536:	0003      	movs	r3, r0
 8001538:	7023      	strb	r3, [r4, #0]
    
    /* Check if DMA channel effectively disabled */
    if (tmp_hal_status != HAL_OK)
 800153a:	230f      	movs	r3, #15
 800153c:	18fb      	adds	r3, r7, r3
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d005      	beq.n	8001550 <HAL_ADC_Stop_DMA+0x78>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001548:	2240      	movs	r2, #64	; 0x40
 800154a:	431a      	orrs	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	6852      	ldr	r2, [r2, #4]
 800155a:	2110      	movs	r1, #16
 800155c:	438a      	bics	r2, r1
 800155e:	605a      	str	r2, [r3, #4]
    
    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed, to keep  */
    /* in memory a potential failing status.                                  */
    if (tmp_hal_status == HAL_OK)
 8001560:	230f      	movs	r3, #15
 8001562:	18fb      	adds	r3, r7, r3
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d108      	bne.n	800157c <HAL_ADC_Stop_DMA+0xa4>
    {
      tmp_hal_status = ADC_Disable(hadc);
 800156a:	230f      	movs	r3, #15
 800156c:	18fc      	adds	r4, r7, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	0018      	movs	r0, r3
 8001572:	f000 fb2f 	bl	8001bd4 <ADC_Disable>
 8001576:	0003      	movs	r3, r0
 8001578:	7023      	strb	r3, [r4, #0]
 800157a:	e003      	b.n	8001584 <HAL_ADC_Stop_DMA+0xac>
    }
    else
    {
      ADC_Disable(hadc);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	0018      	movs	r0, r3
 8001580:	f000 fb28 	bl	8001bd4 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001584:	230f      	movs	r3, #15
 8001586:	18fb      	adds	r3, r7, r3
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d107      	bne.n	800159e <HAL_ADC_Stop_DMA+0xc6>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	4a08      	ldr	r2, [pc, #32]	; (80015b4 <HAL_ADC_Stop_DMA+0xdc>)
 8001594:	4013      	ands	r3, r2
 8001596:	2201      	movs	r2, #1
 8001598:	431a      	orrs	r2, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2240      	movs	r2, #64	; 0x40
 80015a2:	2100      	movs	r1, #0
 80015a4:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80015a6:	230f      	movs	r3, #15
 80015a8:	18fb      	adds	r3, r7, r3
 80015aa:	781b      	ldrb	r3, [r3, #0]
}
 80015ac:	0018      	movs	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	b005      	add	sp, #20
 80015b2:	bd90      	pop	{r4, r7, pc}
 80015b4:	fffffefe 	.word	0xfffffefe

080015b8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80015c6:	0018      	movs	r0, r3
 80015c8:	46bd      	mov	sp, r7
 80015ca:	b002      	add	sp, #8
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2204      	movs	r2, #4
 80015e0:	4013      	ands	r3, r2
 80015e2:	2b04      	cmp	r3, #4
 80015e4:	d106      	bne.n	80015f4 <HAL_ADC_IRQHandler+0x24>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2204      	movs	r2, #4
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d00d      	beq.n	8001610 <HAL_ADC_IRQHandler+0x40>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2208      	movs	r2, #8
 80015fc:	4013      	ands	r3, r2
  if( (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC)) || 
 80015fe:	2b08      	cmp	r3, #8
 8001600:	d14f      	bne.n	80016a2 <HAL_ADC_IRQHandler+0xd2>
      (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOS))   )
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2208      	movs	r2, #8
 800160a:	4013      	ands	r3, r2
 800160c:	2b08      	cmp	r3, #8
 800160e:	d148      	bne.n	80016a2 <HAL_ADC_IRQHandler+0xd2>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001614:	2210      	movs	r2, #16
 8001616:	4013      	ands	r3, r2
 8001618:	d106      	bne.n	8001628 <HAL_ADC_IRQHandler+0x58>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	2280      	movs	r2, #128	; 0x80
 8001620:	0092      	lsls	r2, r2, #2
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68da      	ldr	r2, [r3, #12]
 800162e:	23c0      	movs	r3, #192	; 0xc0
 8001630:	011b      	lsls	r3, r3, #4
 8001632:	4013      	ands	r3, r2
 8001634:	d12d      	bne.n	8001692 <HAL_ADC_IRQHandler+0xc2>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a1b      	ldr	r3, [r3, #32]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800163a:	2b00      	cmp	r3, #0
 800163c:	d129      	bne.n	8001692 <HAL_ADC_IRQHandler+0xc2>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	2208      	movs	r2, #8
 8001646:	4013      	ands	r3, r2
 8001648:	2b08      	cmp	r3, #8
 800164a:	d122      	bne.n	8001692 <HAL_ADC_IRQHandler+0xc2>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	2204      	movs	r2, #4
 8001654:	4013      	ands	r3, r2
 8001656:	d110      	bne.n	800167a <HAL_ADC_IRQHandler+0xaa>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	6852      	ldr	r2, [r2, #4]
 8001662:	210c      	movs	r1, #12
 8001664:	438a      	bics	r2, r1
 8001666:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166c:	4a32      	ldr	r2, [pc, #200]	; (8001738 <HAL_ADC_IRQHandler+0x168>)
 800166e:	4013      	ands	r3, r2
 8001670:	2201      	movs	r2, #1
 8001672:	431a      	orrs	r2, r3
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	645a      	str	r2, [r3, #68]	; 0x44
 8001678:	e00b      	b.n	8001692 <HAL_ADC_IRQHandler+0xc2>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	2220      	movs	r2, #32
 8001680:	431a      	orrs	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800168a:	2201      	movs	r2, #1
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Conversion complete callback */
    /* Note: into callback, to determine if conversion has been triggered     */
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
      HAL_ADC_ConvCpltCallback(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	0018      	movs	r0, r3
 8001696:	f000 f851 	bl	800173c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	220c      	movs	r2, #12
 80016a0:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2280      	movs	r2, #128	; 0x80
 80016aa:	4013      	ands	r3, r2
 80016ac:	2b80      	cmp	r3, #128	; 0x80
 80016ae:	d115      	bne.n	80016dc <HAL_ADC_IRQHandler+0x10c>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2280      	movs	r2, #128	; 0x80
 80016b8:	4013      	ands	r3, r2
 80016ba:	2b80      	cmp	r3, #128	; 0x80
 80016bc:	d10e      	bne.n	80016dc <HAL_ADC_IRQHandler+0x10c>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	2280      	movs	r2, #128	; 0x80
 80016c4:	0252      	lsls	r2, r2, #9
 80016c6:	431a      	orrs	r2, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Level out of window callback */ 
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	0018      	movs	r0, r3
 80016d0:	f000 f844 	bl	800175c <HAL_ADC_LevelOutOfWindowCallback>
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2280      	movs	r2, #128	; 0x80
 80016da:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR) && __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	2210      	movs	r2, #16
 80016e4:	4013      	ands	r3, r2
 80016e6:	2b10      	cmp	r3, #16
 80016e8:	d122      	bne.n	8001730 <HAL_ADC_IRQHandler+0x160>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2210      	movs	r2, #16
 80016f2:	4013      	ands	r3, r2
 80016f4:	2b10      	cmp	r3, #16
 80016f6:	d11b      	bne.n	8001730 <HAL_ADC_IRQHandler+0x160>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d005      	beq.n	800170c <HAL_ADC_IRQHandler+0x13c>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2201      	movs	r2, #1
 8001708:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800170a:	d00d      	beq.n	8001728 <HAL_ADC_IRQHandler+0x158>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001710:	2202      	movs	r2, #2
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	2210      	movs	r2, #16
 800171e:	601a      	str	r2, [r3, #0]
      
      /* Error callback */ 
      HAL_ADC_ErrorCallback(hadc);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	0018      	movs	r0, r3
 8001724:	f000 f822 	bl	800176c <HAL_ADC_ErrorCallback>
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2210      	movs	r2, #16
 800172e:	601a      	str	r2, [r3, #0]
  }

}
 8001730:	46c0      	nop			; (mov r8, r8)
 8001732:	46bd      	mov	sp, r7
 8001734:	b002      	add	sp, #8
 8001736:	bd80      	pop	{r7, pc}
 8001738:	fffffefe 	.word	0xfffffefe

0800173c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001744:	46c0      	nop			; (mov r8, r8)
 8001746:	46bd      	mov	sp, r7
 8001748:	b002      	add	sp, #8
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b082      	sub	sp, #8
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001754:	46c0      	nop			; (mov r8, r8)
 8001756:	46bd      	mov	sp, r7
 8001758:	b002      	add	sp, #8
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001764:	46c0      	nop			; (mov r8, r8)
 8001766:	46bd      	mov	sp, r7
 8001768:	b002      	add	sp, #8
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b002      	add	sp, #8
 800177a:	bd80      	pop	{r7, pc}

0800177c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001786:	230f      	movs	r3, #15
 8001788:	18fb      	adds	r3, r7, r3
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 800178e:	2300      	movs	r3, #0
 8001790:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	055b      	lsls	r3, r3, #21
 800179a:	429a      	cmp	r2, r3
 800179c:	d011      	beq.n	80017c2 <HAL_ADC_ConfigChannel+0x46>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d00d      	beq.n	80017c2 <HAL_ADC_ConfigChannel+0x46>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d009      	beq.n	80017c2 <HAL_ADC_ConfigChannel+0x46>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	2b03      	cmp	r3, #3
 80017b4:	d005      	beq.n	80017c2 <HAL_ADC_ConfigChannel+0x46>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ba:	2b04      	cmp	r3, #4
 80017bc:	d001      	beq.n	80017c2 <HAL_ADC_ConfigChannel+0x46>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2240      	movs	r2, #64	; 0x40
 80017c6:	5c9b      	ldrb	r3, [r3, r2]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d101      	bne.n	80017d0 <HAL_ADC_ConfigChannel+0x54>
 80017cc:	2302      	movs	r3, #2
 80017ce:	e0d1      	b.n	8001974 <HAL_ADC_ConfigChannel+0x1f8>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2240      	movs	r2, #64	; 0x40
 80017d4:	2101      	movs	r1, #1
 80017d6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2204      	movs	r2, #4
 80017e0:	4013      	ands	r3, r2
 80017e2:	d000      	beq.n	80017e6 <HAL_ADC_ConfigChannel+0x6a>
 80017e4:	e0b5      	b.n	8001952 <HAL_ADC_ConfigChannel+0x1d6>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a64      	ldr	r2, [pc, #400]	; (800197c <HAL_ADC_ConfigChannel+0x200>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d100      	bne.n	80017f2 <HAL_ADC_ConfigChannel+0x76>
 80017f0:	e083      	b.n	80018fa <HAL_ADC_ConfigChannel+0x17e>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	687a      	ldr	r2, [r7, #4]
 80017f8:	6812      	ldr	r2, [r2, #0]
 80017fa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	2001      	movs	r0, #1
 8001802:	4090      	lsls	r0, r2
 8001804:	0002      	movs	r2, r0
 8001806:	430a      	orrs	r2, r1
 8001808:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800180e:	2380      	movs	r3, #128	; 0x80
 8001810:	055b      	lsls	r3, r3, #21
 8001812:	429a      	cmp	r2, r3
 8001814:	d037      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x10a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800181a:	2b01      	cmp	r3, #1
 800181c:	d033      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x10a>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001822:	2b02      	cmp	r3, #2
 8001824:	d02f      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x10a>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800182a:	2b03      	cmp	r3, #3
 800182c:	d02b      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x10a>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001832:	2b04      	cmp	r3, #4
 8001834:	d027      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x10a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800183a:	2b05      	cmp	r3, #5
 800183c:	d023      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x10a>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001842:	2b06      	cmp	r3, #6
 8001844:	d01f      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x10a>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800184a:	2b07      	cmp	r3, #7
 800184c:	d01b      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x10a>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	689a      	ldr	r2, [r3, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	2107      	movs	r1, #7
 800185a:	400b      	ands	r3, r1
 800185c:	429a      	cmp	r2, r3
 800185e:	d012      	beq.n	8001886 <HAL_ADC_ConfigChannel+0x10a>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	6812      	ldr	r2, [r2, #0]
 8001868:	6952      	ldr	r2, [r2, #20]
 800186a:	2107      	movs	r1, #7
 800186c:	438a      	bics	r2, r1
 800186e:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	6951      	ldr	r1, [r2, #20]
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	6892      	ldr	r2, [r2, #8]
 800187e:	2007      	movs	r0, #7
 8001880:	4002      	ands	r2, r0
 8001882:	430a      	orrs	r2, r1
 8001884:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	2b10      	cmp	r3, #16
 800188c:	d007      	beq.n	800189e <HAL_ADC_ConfigChannel+0x122>
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	2b11      	cmp	r3, #17
 8001894:	d003      	beq.n	800189e <HAL_ADC_ConfigChannel+0x122>
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b12      	cmp	r3, #18
 800189c:	d163      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800189e:	4a38      	ldr	r2, [pc, #224]	; (8001980 <HAL_ADC_ConfigChannel+0x204>)
 80018a0:	4b37      	ldr	r3, [pc, #220]	; (8001980 <HAL_ADC_ConfigChannel+0x204>)
 80018a2:	6819      	ldr	r1, [r3, #0]
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2b10      	cmp	r3, #16
 80018aa:	d009      	beq.n	80018c0 <HAL_ADC_ConfigChannel+0x144>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b11      	cmp	r3, #17
 80018b2:	d102      	bne.n	80018ba <HAL_ADC_ConfigChannel+0x13e>
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	03db      	lsls	r3, r3, #15
 80018b8:	e004      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x148>
 80018ba:	2380      	movs	r3, #128	; 0x80
 80018bc:	045b      	lsls	r3, r3, #17
 80018be:	e001      	b.n	80018c4 <HAL_ADC_ConfigChannel+0x148>
 80018c0:	2380      	movs	r3, #128	; 0x80
 80018c2:	041b      	lsls	r3, r3, #16
 80018c4:	430b      	orrs	r3, r1
 80018c6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	2b10      	cmp	r3, #16
 80018ce:	d14a      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x1ea>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018d0:	4b2c      	ldr	r3, [pc, #176]	; (8001984 <HAL_ADC_ConfigChannel+0x208>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	492c      	ldr	r1, [pc, #176]	; (8001988 <HAL_ADC_ConfigChannel+0x20c>)
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7fe fc26 	bl	8000128 <__udivsi3>
 80018dc:	0003      	movs	r3, r0
 80018de:	001a      	movs	r2, r3
 80018e0:	0013      	movs	r3, r2
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	189b      	adds	r3, r3, r2
 80018e6:	005b      	lsls	r3, r3, #1
 80018e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018ea:	e002      	b.n	80018f2 <HAL_ADC_ConfigChannel+0x176>
          {
            wait_loop_index--;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f9      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x170>
 80018f8:	e035      	b.n	8001966 <HAL_ADC_ConfigChannel+0x1ea>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001904:	683a      	ldr	r2, [r7, #0]
 8001906:	6812      	ldr	r2, [r2, #0]
 8001908:	2001      	movs	r0, #1
 800190a:	4090      	lsls	r0, r2
 800190c:	0002      	movs	r2, r0
 800190e:	43d2      	mvns	r2, r2
 8001910:	400a      	ands	r2, r1
 8001912:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b10      	cmp	r3, #16
 800191a:	d007      	beq.n	800192c <HAL_ADC_ConfigChannel+0x1b0>
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2b11      	cmp	r3, #17
 8001922:	d003      	beq.n	800192c <HAL_ADC_ConfigChannel+0x1b0>
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b12      	cmp	r3, #18
 800192a:	d11c      	bne.n	8001966 <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800192c:	4a14      	ldr	r2, [pc, #80]	; (8001980 <HAL_ADC_ConfigChannel+0x204>)
 800192e:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_ADC_ConfigChannel+0x204>)
 8001930:	6819      	ldr	r1, [r3, #0]
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	2b10      	cmp	r3, #16
 8001938:	d007      	beq.n	800194a <HAL_ADC_ConfigChannel+0x1ce>
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b11      	cmp	r3, #17
 8001940:	d101      	bne.n	8001946 <HAL_ADC_ConfigChannel+0x1ca>
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_ADC_ConfigChannel+0x210>)
 8001944:	e002      	b.n	800194c <HAL_ADC_ConfigChannel+0x1d0>
 8001946:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_ADC_ConfigChannel+0x214>)
 8001948:	e000      	b.n	800194c <HAL_ADC_ConfigChannel+0x1d0>
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_ADC_ConfigChannel+0x218>)
 800194c:	400b      	ands	r3, r1
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	e009      	b.n	8001966 <HAL_ADC_ConfigChannel+0x1ea>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001956:	2220      	movs	r2, #32
 8001958:	431a      	orrs	r2, r3
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800195e:	230f      	movs	r3, #15
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2240      	movs	r2, #64	; 0x40
 800196a:	2100      	movs	r1, #0
 800196c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800196e:	230f      	movs	r3, #15
 8001970:	18fb      	adds	r3, r7, r3
 8001972:	781b      	ldrb	r3, [r3, #0]
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	b004      	add	sp, #16
 800197a:	bd80      	pop	{r7, pc}
 800197c:	00001001 	.word	0x00001001
 8001980:	40012708 	.word	0x40012708
 8001984:	2000000c 	.word	0x2000000c
 8001988:	000f4240 	.word	0x000f4240
 800198c:	ffbfffff 	.word	0xffbfffff
 8001990:	feffffff 	.word	0xfeffffff
 8001994:	ff7fffff 	.word	0xff7fffff

08001998 <HAL_ADC_AnalogWDGConfig>:
  * @param  hadc ADC handle
  * @param  AnalogWDGConfig Structure of ADC analog watchdog configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_AnalogWDGConfig(ADC_HandleTypeDef* hadc, ADC_AnalogWDGConfTypeDef* AnalogWDGConfig)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a2:	2317      	movs	r3, #23
 80019a4:	18fb      	adds	r3, r7, r3
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
  {
    assert_param(IS_ADC_CHANNEL(AnalogWDGConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2240      	movs	r2, #64	; 0x40
 80019ae:	5c9b      	ldrb	r3, [r3, r2]
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_ADC_AnalogWDGConfig+0x20>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e074      	b.n	8001aa2 <HAL_ADC_AnalogWDGConfig+0x10a>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2240      	movs	r2, #64	; 0x40
 80019bc:	2101      	movs	r1, #1
 80019be:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Analog watchdog channels                                              */
  /*  - Analog watchdog thresholds                                            */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2204      	movs	r2, #4
 80019c8:	4013      	ands	r3, r2
 80019ca:	d159      	bne.n	8001a80 <HAL_ADC_AnalogWDGConfig+0xe8>
    /* Configuration of analog watchdog:                                      */
    /*  - Set the analog watchdog enable mode: one or overall group of        */
    /*    channels.                                                           */
    /*  - Set the Analog watchdog channel (is not used if watchdog            */
    /*    mode "all channels": ADC_CFGR_AWD1SGL=0).                           */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_AWDSGL |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	6812      	ldr	r2, [r2, #0]
 80019d4:	68d2      	ldr	r2, [r2, #12]
 80019d6:	4935      	ldr	r1, [pc, #212]	; (8001aac <HAL_ADC_AnalogWDGConfig+0x114>)
 80019d8:	400a      	ands	r2, r1
 80019da:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_AWDEN  |
                                ADC_CFGR1_AWDCH   );
    
    hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	68d1      	ldr	r1, [r2, #12]
 80019e6:	683a      	ldr	r2, [r7, #0]
 80019e8:	6810      	ldr	r0, [r2, #0]
                               ADC_CFGR_AWDCH(AnalogWDGConfig->Channel)  );
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	6852      	ldr	r2, [r2, #4]
 80019ee:	0692      	lsls	r2, r2, #26
    hadc->Instance->CFGR1 |= ( AnalogWDGConfig->WatchdogMode            |
 80019f0:	4302      	orrs	r2, r0
 80019f2:	430a      	orrs	r2, r1
 80019f4:	60da      	str	r2, [r3, #12]

    /* Shift the offset in function of the selected ADC resolution: Thresholds*/
    /* have to be left-aligned on bit 11, the LSB (right bits) are set to 0   */
    tmpAWDHighThresholdShifted = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->HighThreshold);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	08db      	lsrs	r3, r3, #3
 8001a02:	2103      	movs	r1, #3
 8001a04:	400b      	ands	r3, r1
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	409a      	lsls	r2, r3
 8001a0a:	0013      	movs	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
    tmpAWDLowThresholdShifted  = ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(hadc, AnalogWDGConfig->LowThreshold);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	691a      	ldr	r2, [r3, #16]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	08db      	lsrs	r3, r3, #3
 8001a1a:	2103      	movs	r1, #3
 8001a1c:	400b      	ands	r3, r1
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	409a      	lsls	r2, r3
 8001a22:	0013      	movs	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
    
    /* Set the high and low thresholds */
    hadc->Instance->TR &= ~(ADC_TR_HT | ADC_TR_LT);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6812      	ldr	r2, [r2, #0]
 8001a2e:	6a12      	ldr	r2, [r2, #32]
 8001a30:	491f      	ldr	r1, [pc, #124]	; (8001ab0 <HAL_ADC_AnalogWDGConfig+0x118>)
 8001a32:	400a      	ands	r2, r1
 8001a34:	621a      	str	r2, [r3, #32]
    hadc->Instance->TR |=  ( ADC_TRX_HIGHTHRESHOLD (tmpAWDHighThresholdShifted) |
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	6812      	ldr	r2, [r2, #0]
 8001a3e:	6a11      	ldr	r1, [r2, #32]
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	0410      	lsls	r0, r2, #16
 8001a44:	68fa      	ldr	r2, [r7, #12]
 8001a46:	4302      	orrs	r2, r0
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	621a      	str	r2, [r3, #32]
                             tmpAWDLowThresholdShifted                           );
    
    /* Clear the ADC Analog watchdog flag (in case of left enabled by         */
    /* previous ADC operations) to be ready to use for HAL_ADC_IRQHandler()   */
    /* or HAL_ADC_PollForEvent().                                             */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_IT_AWD);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	601a      	str	r2, [r3, #0]
    
    /* Configure ADC Analog watchdog interrupt */
    if(AnalogWDGConfig->ITMode == ENABLE)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	2b01      	cmp	r3, #1
 8001a5a:	d108      	bne.n	8001a6e <HAL_ADC_AnalogWDGConfig+0xd6>
    {
      /* Enable the ADC Analog watchdog interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_AWD);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	6852      	ldr	r2, [r2, #4]
 8001a66:	2180      	movs	r1, #128	; 0x80
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	e012      	b.n	8001a94 <HAL_ADC_AnalogWDGConfig+0xfc>
    }
    else
    {
      /* Disable the ADC Analog watchdog interrupt */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_AWD);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	687a      	ldr	r2, [r7, #4]
 8001a74:	6812      	ldr	r2, [r2, #0]
 8001a76:	6852      	ldr	r2, [r2, #4]
 8001a78:	2180      	movs	r1, #128	; 0x80
 8001a7a:	438a      	bics	r2, r1
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	e009      	b.n	8001a94 <HAL_ADC_AnalogWDGConfig+0xfc>
  /* If a conversion is on going on regular group, no update could be done    */
  /* on neither of the AWD configuration structure parameters.                */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	2220      	movs	r2, #32
 8001a86:	431a      	orrs	r2, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001a8c:	2317      	movs	r3, #23
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	2201      	movs	r2, #1
 8001a92:	701a      	strb	r2, [r3, #0]
  }
  
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2240      	movs	r2, #64	; 0x40
 8001a98:	2100      	movs	r1, #0
 8001a9a:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001a9c:	2317      	movs	r3, #23
 8001a9e:	18fb      	adds	r3, r7, r3
 8001aa0:	781b      	ldrb	r3, [r3, #0]
}
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	b006      	add	sp, #24
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	833fffff 	.word	0x833fffff
 8001ab0:	f000f000 	.word	0xf000f000

08001ab4 <HAL_ADC_GetState>:
  *           " if (HAL_IS_BIT_SET(HAL_ADC_GetState(hadc1), HAL_ADC_STATE_AWD1)    ) "
  * @param  hadc ADC handle
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Return ADC state */
  return hadc->State;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	b002      	add	sp, #8
 8001ac6:	bd80      	pop	{r7, pc}

08001ac8 <HAL_ADC_GetError>:
  * @brief  Return the ADC error code
  * @param  hadc ADC handle
  * @retval ADC Error Code
  */
uint32_t HAL_ADC_GetError(ADC_HandleTypeDef *hadc)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  return hadc->ErrorCode;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
}
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b002      	add	sp, #8
 8001ada:	bd80      	pop	{r7, pc}

08001adc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	2203      	movs	r2, #3
 8001af4:	4013      	ands	r3, r2
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	d112      	bne.n	8001b20 <ADC_Enable+0x44>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2201      	movs	r2, #1
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b01      	cmp	r3, #1
 8001b06:	d009      	beq.n	8001b1c <ADC_Enable+0x40>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	2380      	movs	r3, #128	; 0x80
 8001b10:	021b      	lsls	r3, r3, #8
 8001b12:	401a      	ands	r2, r3
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	021b      	lsls	r3, r3, #8
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d101      	bne.n	8001b20 <ADC_Enable+0x44>
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <ADC_Enable+0x46>
 8001b20:	2300      	movs	r3, #0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d14b      	bne.n	8001bbe <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	4a26      	ldr	r2, [pc, #152]	; (8001bc8 <ADC_Enable+0xec>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d00d      	beq.n	8001b4e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b36:	2210      	movs	r2, #16
 8001b38:	431a      	orrs	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b42:	2201      	movs	r2, #1
 8001b44:	431a      	orrs	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e038      	b.n	8001bc0 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	6892      	ldr	r2, [r2, #8]
 8001b58:	2101      	movs	r1, #1
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b5e:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <ADC_Enable+0xf0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	491b      	ldr	r1, [pc, #108]	; (8001bd0 <ADC_Enable+0xf4>)
 8001b64:	0018      	movs	r0, r3
 8001b66:	f7fe fadf 	bl	8000128 <__udivsi3>
 8001b6a:	0003      	movs	r3, r0
 8001b6c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b6e:	e002      	b.n	8001b76 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	3b01      	subs	r3, #1
 8001b74:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d1f9      	bne.n	8001b70 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b7c:	f7fe ff5c 	bl	8000a38 <HAL_GetTick>
 8001b80:	0003      	movs	r3, r0
 8001b82:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b84:	e014      	b.n	8001bb0 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b86:	f7fe ff57 	bl	8000a38 <HAL_GetTick>
 8001b8a:	0002      	movs	r2, r0
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	2b02      	cmp	r3, #2
 8001b92:	d90d      	bls.n	8001bb0 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b98:	2210      	movs	r2, #16
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e007      	b.n	8001bc0 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d1e3      	bne.n	8001b86 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	b004      	add	sp, #16
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	80000017 	.word	0x80000017
 8001bcc:	2000000c 	.word	0x2000000c
 8001bd0:	000f4240 	.word	0x000f4240

08001bd4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2203      	movs	r2, #3
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d112      	bne.n	8001c14 <ADC_Disable+0x40>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d009      	beq.n	8001c10 <ADC_Disable+0x3c>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68da      	ldr	r2, [r3, #12]
 8001c02:	2380      	movs	r3, #128	; 0x80
 8001c04:	021b      	lsls	r3, r3, #8
 8001c06:	401a      	ands	r2, r3
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	021b      	lsls	r3, r3, #8
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d101      	bne.n	8001c14 <ADC_Disable+0x40>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <ADC_Disable+0x42>
 8001c14:	2300      	movs	r3, #0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d040      	beq.n	8001c9c <ADC_Disable+0xc8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2205      	movs	r2, #5
 8001c22:	4013      	ands	r3, r2
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d110      	bne.n	8001c4a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6812      	ldr	r2, [r2, #0]
 8001c30:	6892      	ldr	r2, [r2, #8]
 8001c32:	2102      	movs	r1, #2
 8001c34:	430a      	orrs	r2, r1
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001c40:	f7fe fefa 	bl	8000a38 <HAL_GetTick>
 8001c44:	0003      	movs	r3, r0
 8001c46:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c48:	e022      	b.n	8001c90 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	2210      	movs	r2, #16
 8001c50:	431a      	orrs	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e01b      	b.n	8001c9e <ADC_Disable+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c66:	f7fe fee7 	bl	8000a38 <HAL_GetTick>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d90d      	bls.n	8001c90 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c78:	2210      	movs	r2, #16
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c84:	2201      	movs	r2, #1
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e006      	b.n	8001c9e <ADC_Disable+0xca>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2201      	movs	r2, #1
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d1e4      	bne.n	8001c66 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	0018      	movs	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b004      	add	sp, #16
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689b      	ldr	r3, [r3, #8]
 8001cb8:	2204      	movs	r2, #4
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d033      	beq.n	8001d26 <ADC_ConversionStop+0x80>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d00d      	beq.n	8001ce6 <ADC_ConversionStop+0x40>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	2202      	movs	r2, #2
 8001cd2:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001cd4:	d107      	bne.n	8001ce6 <ADC_ConversionStop+0x40>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	687a      	ldr	r2, [r7, #4]
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	6892      	ldr	r2, [r2, #8]
 8001ce0:	2110      	movs	r1, #16
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001ce6:	f7fe fea7 	bl	8000a38 <HAL_GetTick>
 8001cea:	0003      	movs	r3, r0
 8001cec:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001cee:	e014      	b.n	8001d1a <ADC_ConversionStop+0x74>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001cf0:	f7fe fea2 	bl	8000a38 <HAL_GetTick>
 8001cf4:	0002      	movs	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d90d      	bls.n	8001d1a <ADC_ConversionStop+0x74>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d02:	2210      	movs	r2, #16
 8001d04:	431a      	orrs	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0e:	2201      	movs	r2, #1
 8001d10:	431a      	orrs	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e006      	b.n	8001d28 <ADC_ConversionStop+0x82>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2204      	movs	r2, #4
 8001d22:	4013      	ands	r3, r2
 8001d24:	d1e4      	bne.n	8001cf0 <ADC_ConversionStop+0x4a>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b004      	add	sp, #16
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	2250      	movs	r2, #80	; 0x50
 8001d44:	4013      	ands	r3, r2
 8001d46:	d140      	bne.n	8001dca <ADC_DMAConvCplt+0x9a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	2280      	movs	r2, #128	; 0x80
 8001d4e:	0092      	lsls	r2, r2, #2
 8001d50:	431a      	orrs	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	68da      	ldr	r2, [r3, #12]
 8001d5c:	23c0      	movs	r3, #192	; 0xc0
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	4013      	ands	r3, r2
 8001d62:	d12d      	bne.n	8001dc0 <ADC_DMAConvCplt+0x90>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a1b      	ldr	r3, [r3, #32]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d129      	bne.n	8001dc0 <ADC_DMAConvCplt+0x90>
    {
      /* If End of Sequence is reached, disable interrupts */
      if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2208      	movs	r2, #8
 8001d74:	4013      	ands	r3, r2
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d122      	bne.n	8001dc0 <ADC_DMAConvCplt+0x90>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	2204      	movs	r2, #4
 8001d82:	4013      	ands	r3, r2
 8001d84:	d110      	bne.n	8001da8 <ADC_DMAConvCplt+0x78>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	6812      	ldr	r2, [r2, #0]
 8001d8e:	6852      	ldr	r2, [r2, #4]
 8001d90:	210c      	movs	r1, #12
 8001d92:	438a      	bics	r2, r1
 8001d94:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d9a:	4a11      	ldr	r2, [pc, #68]	; (8001de0 <ADC_DMAConvCplt+0xb0>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	2201      	movs	r2, #1
 8001da0:	431a      	orrs	r2, r3
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	645a      	str	r2, [r3, #68]	; 0x44
 8001da6:	e00b      	b.n	8001dc0 <ADC_DMAConvCplt+0x90>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dac:	2220      	movs	r2, #32
 8001dae:	431a      	orrs	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001db8:	2201      	movs	r2, #1
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	649a      	str	r2, [r3, #72]	; 0x48
        }
      }
    }

    /* Conversion complete callback */
    HAL_ADC_ConvCpltCallback(hadc); 
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f7ff fcba 	bl	800173c <HAL_ADC_ConvCpltCallback>
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }

}
 8001dc8:	e005      	b.n	8001dd6 <ADC_DMAConvCplt+0xa6>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	0010      	movs	r0, r2
 8001dd4:	4798      	blx	r3
}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b004      	add	sp, #16
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	fffffefe 	.word	0xfffffefe

08001de4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
  HAL_ADC_ConvHalfCpltCallback(hadc); 
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	0018      	movs	r0, r3
 8001df6:	f7ff fca9 	bl	800174c <HAL_ADC_ConvHalfCpltCallback>
}
 8001dfa:	46c0      	nop			; (mov r8, r8)
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	b004      	add	sp, #16
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	431a      	orrs	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	2204      	movs	r2, #4
 8001e22:	431a      	orrs	r2, r3
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	649a      	str	r2, [r3, #72]	; 0x48
  
  /* Error callback */
  HAL_ADC_ErrorCallback(hadc); 
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f7ff fc9e 	bl	800176c <HAL_ADC_ErrorCallback>
}
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b004      	add	sp, #16
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e40:	2317      	movs	r3, #23
 8001e42:	18fb      	adds	r3, r7, r3
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	613b      	str	r3, [r7, #16]
  uint32_t backup_setting_adc_dma_transfer = 0; /* Note: Variable not declared as volatile because register read is already declared as volatile */
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2240      	movs	r2, #64	; 0x40
 8001e54:	5c9b      	ldrb	r3, [r3, r2]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d101      	bne.n	8001e5e <HAL_ADCEx_Calibration_Start+0x26>
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	e080      	b.n	8001f60 <HAL_ADCEx_Calibration_Start+0x128>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2240      	movs	r2, #64	; 0x40
 8001e62:	2101      	movs	r1, #1
 8001e64:	5499      	strb	r1, [r3, r2]
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2203      	movs	r2, #3
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d112      	bne.n	8001e9a <HAL_ADCEx_Calibration_Start+0x62>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d009      	beq.n	8001e96 <HAL_ADCEx_Calibration_Start+0x5e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	2380      	movs	r3, #128	; 0x80
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	401a      	ands	r2, r3
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d101      	bne.n	8001e9a <HAL_ADCEx_Calibration_Start+0x62>
 8001e96:	2301      	movs	r3, #1
 8001e98:	e000      	b.n	8001e9c <HAL_ADCEx_Calibration_Start+0x64>
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d14e      	bne.n	8001f3e <HAL_ADCEx_Calibration_Start+0x106>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State, 
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	4a30      	ldr	r2, [pc, #192]	; (8001f68 <HAL_ADCEx_Calibration_Start+0x130>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	645a      	str	r2, [r3, #68]	; 0x44
    /* Note: Specificity of this STM32 serie: Calibration factor is           */
    /*       available in data register and also transfered by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	4013      	ands	r3, r2
 8001eba:	60fb      	str	r3, [r7, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	687a      	ldr	r2, [r7, #4]
 8001ec2:	6812      	ldr	r2, [r2, #0]
 8001ec4:	68d2      	ldr	r2, [r2, #12]
 8001ec6:	2103      	movs	r1, #3
 8001ec8:	438a      	bics	r2, r1
 8001eca:	60da      	str	r2, [r3, #12]

    /* Start ADC calibration */
    hadc->Instance->CR |= ADC_CR_ADCAL;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	6892      	ldr	r2, [r2, #8]
 8001ed6:	2180      	movs	r1, #128	; 0x80
 8001ed8:	0609      	lsls	r1, r1, #24
 8001eda:	430a      	orrs	r2, r1
 8001edc:	609a      	str	r2, [r3, #8]

    tickstart = HAL_GetTick();  
 8001ede:	f7fe fdab 	bl	8000a38 <HAL_GetTick>
 8001ee2:	0003      	movs	r3, r0
 8001ee4:	613b      	str	r3, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001ee6:	e014      	b.n	8001f12 <HAL_ADCEx_Calibration_Start+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001ee8:	f7fe fda6 	bl	8000a38 <HAL_GetTick>
 8001eec:	0002      	movs	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d90d      	bls.n	8001f12 <HAL_ADCEx_Calibration_Start+0xda>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efa:	2212      	movs	r2, #18
 8001efc:	4393      	bics	r3, r2
 8001efe:	2210      	movs	r2, #16
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2240      	movs	r2, #64	; 0x40
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	5499      	strb	r1, [r3, r2]
        
        return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e026      	b.n	8001f60 <HAL_ADCEx_Calibration_Start+0x128>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	dbe5      	blt.n	8001ee8 <HAL_ADCEx_Calibration_Start+0xb0>
      }
    }
    
    /* Restore ADC DMA transfer request after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	68d1      	ldr	r1, [r2, #12]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f30:	2203      	movs	r2, #3
 8001f32:	4393      	bics	r3, r2
 8001f34:	2201      	movs	r2, #1
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	645a      	str	r2, [r3, #68]	; 0x44
 8001f3c:	e009      	b.n	8001f52 <HAL_ADCEx_Calibration_Start+0x11a>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f42:	2220      	movs	r2, #32
 8001f44:	431a      	orrs	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001f4a:	2317      	movs	r3, #23
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2240      	movs	r2, #64	; 0x40
 8001f56:	2100      	movs	r1, #0
 8001f58:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001f5a:	2317      	movs	r3, #23
 8001f5c:	18fb      	adds	r3, r7, r3
 8001f5e:	781b      	ldrb	r3, [r3, #0]
}
 8001f60:	0018      	movs	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	b006      	add	sp, #24
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	fffffefd 	.word	0xfffffefd

08001f6c <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	0002      	movs	r2, r0
 8001f74:	1dfb      	adds	r3, r7, #7
 8001f76:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <NVIC_EnableIRQ+0x28>)
 8001f7a:	1dfa      	adds	r2, r7, #7
 8001f7c:	7812      	ldrb	r2, [r2, #0]
 8001f7e:	0011      	movs	r1, r2
 8001f80:	221f      	movs	r2, #31
 8001f82:	400a      	ands	r2, r1
 8001f84:	2101      	movs	r1, #1
 8001f86:	4091      	lsls	r1, r2
 8001f88:	000a      	movs	r2, r1
 8001f8a:	601a      	str	r2, [r3, #0]
}
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b002      	add	sp, #8
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	e000e100 	.word	0xe000e100

08001f98 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	0002      	movs	r2, r0
 8001fa0:	1dfb      	adds	r3, r7, #7
 8001fa2:	701a      	strb	r2, [r3, #0]
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001fa4:	4907      	ldr	r1, [pc, #28]	; (8001fc4 <NVIC_DisableIRQ+0x2c>)
 8001fa6:	1dfb      	adds	r3, r7, #7
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	001a      	movs	r2, r3
 8001fac:	231f      	movs	r3, #31
 8001fae:	4013      	ands	r3, r2
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	409a      	lsls	r2, r3
 8001fb4:	0013      	movs	r3, r2
 8001fb6:	2280      	movs	r2, #128	; 0x80
 8001fb8:	508b      	str	r3, [r1, r2]
}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b002      	add	sp, #8
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	46c0      	nop			; (mov r8, r8)
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <NVIC_GetPendingIRQ>:
  \param [in]      IRQn  Interrupt number.
  \return             0  Interrupt status is not pending.
  \return             1  Interrupt status is pending.
 */
__STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	0002      	movs	r2, r0
 8001fd0:	1dfb      	adds	r3, r7, #7
 8001fd2:	701a      	strb	r2, [r3, #0]
  return((uint32_t)(((NVIC->ISPR[0U] & (1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 8001fd4:	4a08      	ldr	r2, [pc, #32]	; (8001ff8 <NVIC_GetPendingIRQ+0x30>)
 8001fd6:	2380      	movs	r3, #128	; 0x80
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	58d2      	ldr	r2, [r2, r3]
 8001fdc:	1dfb      	adds	r3, r7, #7
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	231f      	movs	r3, #31
 8001fe4:	400b      	ands	r3, r1
 8001fe6:	40da      	lsrs	r2, r3
 8001fe8:	0013      	movs	r3, r2
 8001fea:	2201      	movs	r2, #1
 8001fec:	4013      	ands	r3, r2
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b002      	add	sp, #8
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	e000e100 	.word	0xe000e100

08001ffc <NVIC_SetPendingIRQ>:
  \brief   Set Pending Interrupt
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b082      	sub	sp, #8
 8002000:	af00      	add	r7, sp, #0
 8002002:	0002      	movs	r2, r0
 8002004:	1dfb      	adds	r3, r7, #7
 8002006:	701a      	strb	r2, [r3, #0]
  NVIC->ISPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002008:	4907      	ldr	r1, [pc, #28]	; (8002028 <NVIC_SetPendingIRQ+0x2c>)
 800200a:	1dfb      	adds	r3, r7, #7
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	001a      	movs	r2, r3
 8002010:	231f      	movs	r3, #31
 8002012:	4013      	ands	r3, r2
 8002014:	2201      	movs	r2, #1
 8002016:	409a      	lsls	r2, r3
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	50ca      	str	r2, [r1, r3]
}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	46bd      	mov	sp, r7
 8002022:	b002      	add	sp, #8
 8002024:	bd80      	pop	{r7, pc}
 8002026:	46c0      	nop			; (mov r8, r8)
 8002028:	e000e100 	.word	0xe000e100

0800202c <NVIC_ClearPendingIRQ>:
  \brief   Clear Pending Interrupt
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	0002      	movs	r2, r0
 8002034:	1dfb      	adds	r3, r7, #7
 8002036:	701a      	strb	r2, [r3, #0]
  NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002038:	4907      	ldr	r1, [pc, #28]	; (8002058 <NVIC_ClearPendingIRQ+0x2c>)
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	001a      	movs	r2, r3
 8002040:	231f      	movs	r3, #31
 8002042:	4013      	ands	r3, r2
 8002044:	2201      	movs	r2, #1
 8002046:	409a      	lsls	r2, r3
 8002048:	23c0      	movs	r3, #192	; 0xc0
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	50ca      	str	r2, [r1, r3]
}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	46bd      	mov	sp, r7
 8002052:	b002      	add	sp, #8
 8002054:	bd80      	pop	{r7, pc}
 8002056:	46c0      	nop			; (mov r8, r8)
 8002058:	e000e100 	.word	0xe000e100

0800205c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800205c:	b5b0      	push	{r4, r5, r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	0002      	movs	r2, r0
 8002064:	6039      	str	r1, [r7, #0]
 8002066:	1dfb      	adds	r3, r7, #7
 8002068:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	2b7f      	cmp	r3, #127	; 0x7f
 8002070:	d932      	bls.n	80020d8 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002072:	4c2f      	ldr	r4, [pc, #188]	; (8002130 <NVIC_SetPriority+0xd4>)
 8002074:	1dfb      	adds	r3, r7, #7
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	001a      	movs	r2, r3
 800207a:	230f      	movs	r3, #15
 800207c:	4013      	ands	r3, r2
 800207e:	3b08      	subs	r3, #8
 8002080:	0899      	lsrs	r1, r3, #2
 8002082:	4a2b      	ldr	r2, [pc, #172]	; (8002130 <NVIC_SetPriority+0xd4>)
 8002084:	1dfb      	adds	r3, r7, #7
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	0018      	movs	r0, r3
 800208a:	230f      	movs	r3, #15
 800208c:	4003      	ands	r3, r0
 800208e:	3b08      	subs	r3, #8
 8002090:	089b      	lsrs	r3, r3, #2
 8002092:	3306      	adds	r3, #6
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	18d3      	adds	r3, r2, r3
 8002098:	3304      	adds	r3, #4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	1dfa      	adds	r2, r7, #7
 800209e:	7812      	ldrb	r2, [r2, #0]
 80020a0:	0010      	movs	r0, r2
 80020a2:	2203      	movs	r2, #3
 80020a4:	4002      	ands	r2, r0
 80020a6:	00d2      	lsls	r2, r2, #3
 80020a8:	20ff      	movs	r0, #255	; 0xff
 80020aa:	4090      	lsls	r0, r2
 80020ac:	0002      	movs	r2, r0
 80020ae:	43d2      	mvns	r2, r2
 80020b0:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	019b      	lsls	r3, r3, #6
 80020b6:	20ff      	movs	r0, #255	; 0xff
 80020b8:	4018      	ands	r0, r3
 80020ba:	1dfb      	adds	r3, r7, #7
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	001d      	movs	r5, r3
 80020c0:	2303      	movs	r3, #3
 80020c2:	402b      	ands	r3, r5
 80020c4:	00db      	lsls	r3, r3, #3
 80020c6:	4098      	lsls	r0, r3
 80020c8:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020ca:	431a      	orrs	r2, r3
 80020cc:	1d8b      	adds	r3, r1, #6
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	18e3      	adds	r3, r4, r3
 80020d2:	3304      	adds	r3, #4
 80020d4:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80020d6:	e027      	b.n	8002128 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80020d8:	4c16      	ldr	r4, [pc, #88]	; (8002134 <NVIC_SetPriority+0xd8>)
 80020da:	1dfb      	adds	r3, r7, #7
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	b25b      	sxtb	r3, r3
 80020e0:	089b      	lsrs	r3, r3, #2
 80020e2:	4914      	ldr	r1, [pc, #80]	; (8002134 <NVIC_SetPriority+0xd8>)
 80020e4:	1dfa      	adds	r2, r7, #7
 80020e6:	7812      	ldrb	r2, [r2, #0]
 80020e8:	b252      	sxtb	r2, r2
 80020ea:	0892      	lsrs	r2, r2, #2
 80020ec:	32c0      	adds	r2, #192	; 0xc0
 80020ee:	0092      	lsls	r2, r2, #2
 80020f0:	5852      	ldr	r2, [r2, r1]
 80020f2:	1df9      	adds	r1, r7, #7
 80020f4:	7809      	ldrb	r1, [r1, #0]
 80020f6:	0008      	movs	r0, r1
 80020f8:	2103      	movs	r1, #3
 80020fa:	4001      	ands	r1, r0
 80020fc:	00c9      	lsls	r1, r1, #3
 80020fe:	20ff      	movs	r0, #255	; 0xff
 8002100:	4088      	lsls	r0, r1
 8002102:	0001      	movs	r1, r0
 8002104:	43c9      	mvns	r1, r1
 8002106:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	0192      	lsls	r2, r2, #6
 800210c:	20ff      	movs	r0, #255	; 0xff
 800210e:	4010      	ands	r0, r2
 8002110:	1dfa      	adds	r2, r7, #7
 8002112:	7812      	ldrb	r2, [r2, #0]
 8002114:	0015      	movs	r5, r2
 8002116:	2203      	movs	r2, #3
 8002118:	402a      	ands	r2, r5
 800211a:	00d2      	lsls	r2, r2, #3
 800211c:	4090      	lsls	r0, r2
 800211e:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002120:	430a      	orrs	r2, r1
 8002122:	33c0      	adds	r3, #192	; 0xc0
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	511a      	str	r2, [r3, r4]
}
 8002128:	46c0      	nop			; (mov r8, r8)
 800212a:	46bd      	mov	sp, r7
 800212c:	b002      	add	sp, #8
 800212e:	bdb0      	pop	{r4, r5, r7, pc}
 8002130:	e000ed00 	.word	0xe000ed00
 8002134:	e000e100 	.word	0xe000e100

08002138 <NVIC_GetPriority>:
  \param [in]   IRQn  Interrupt number.
  \return             Interrupt Priority.
                      Value is aligned automatically to the implemented priority bits of the microcontroller.
 */
__STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b082      	sub	sp, #8
 800213c:	af00      	add	r7, sp, #0
 800213e:	0002      	movs	r2, r0
 8002140:	1dfb      	adds	r3, r7, #7
 8002142:	701a      	strb	r2, [r3, #0]

  if ((int32_t)(IRQn) < 0)
 8002144:	1dfb      	adds	r3, r7, #7
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	2b7f      	cmp	r3, #127	; 0x7f
 800214a:	d918      	bls.n	800217e <NVIC_GetPriority+0x46>
  {
    return((uint32_t)(((SCB->SHP[_SHP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
 800214c:	4a17      	ldr	r2, [pc, #92]	; (80021ac <NVIC_GetPriority+0x74>)
 800214e:	1dfb      	adds	r3, r7, #7
 8002150:	781b      	ldrb	r3, [r3, #0]
 8002152:	0019      	movs	r1, r3
 8002154:	230f      	movs	r3, #15
 8002156:	400b      	ands	r3, r1
 8002158:	3b08      	subs	r3, #8
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3306      	adds	r3, #6
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	18d3      	adds	r3, r2, r3
 8002162:	3304      	adds	r3, #4
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	1dfb      	adds	r3, r7, #7
 8002168:	781b      	ldrb	r3, [r3, #0]
 800216a:	0019      	movs	r1, r3
 800216c:	2303      	movs	r3, #3
 800216e:	400b      	ands	r3, r1
 8002170:	00db      	lsls	r3, r3, #3
 8002172:	40da      	lsrs	r2, r3
 8002174:	0013      	movs	r3, r2
 8002176:	099b      	lsrs	r3, r3, #6
 8002178:	2203      	movs	r2, #3
 800217a:	4013      	ands	r3, r2
 800217c:	e012      	b.n	80021a4 <NVIC_GetPriority+0x6c>
  }
  else
  {
    return((uint32_t)(((NVIC->IP[ _IP_IDX(IRQn)] >> _BIT_SHIFT(IRQn) ) & (uint32_t)0xFFUL) >> (8U - __NVIC_PRIO_BITS)));
 800217e:	4a0c      	ldr	r2, [pc, #48]	; (80021b0 <NVIC_GetPriority+0x78>)
 8002180:	1dfb      	adds	r3, r7, #7
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	b25b      	sxtb	r3, r3
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	33c0      	adds	r3, #192	; 0xc0
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	589a      	ldr	r2, [r3, r2]
 800218e:	1dfb      	adds	r3, r7, #7
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	0019      	movs	r1, r3
 8002194:	2303      	movs	r3, #3
 8002196:	400b      	ands	r3, r1
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	40da      	lsrs	r2, r3
 800219c:	0013      	movs	r3, r2
 800219e:	099b      	lsrs	r3, r3, #6
 80021a0:	2203      	movs	r2, #3
 80021a2:	4013      	ands	r3, r2
  }
}
 80021a4:	0018      	movs	r0, r3
 80021a6:	46bd      	mov	sp, r7
 80021a8:	b002      	add	sp, #8
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	e000ed00 	.word	0xe000ed00
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__STATIC_INLINE void NVIC_SystemReset(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80021b8:	f3bf 8f4f 	dsb	sy
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021bc:	4b03      	ldr	r3, [pc, #12]	; (80021cc <NVIC_SystemReset+0x18>)
 80021be:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <NVIC_SystemReset+0x1c>)
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 80021c6:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80021c8:	e7fd      	b.n	80021c6 <NVIC_SystemReset+0x12>
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	e000ed00 	.word	0xe000ed00
 80021d0:	05fa0004 	.word	0x05fa0004

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	4a0c      	ldr	r2, [pc, #48]	; (8002214 <SysTick_Config+0x40>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d901      	bls.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e010      	b.n	800220c <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <SysTick_Config+0x44>)
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	3a01      	subs	r2, #1
 80021f0:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	2301      	movs	r3, #1
 80021f4:	425b      	negs	r3, r3
 80021f6:	2103      	movs	r1, #3
 80021f8:	0018      	movs	r0, r3
 80021fa:	f7ff ff2f 	bl	800205c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <SysTick_Config+0x44>)
 8002200:	2200      	movs	r2, #0
 8002202:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <SysTick_Config+0x44>)
 8002206:	2207      	movs	r2, #7
 8002208:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800220a:	2300      	movs	r3, #0
}
 800220c:	0018      	movs	r0, r3
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}
 8002214:	00ffffff 	.word	0x00ffffff
 8002218:	e000e010 	.word	0xe000e010

0800221c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800221c:	b580      	push	{r7, lr}
 800221e:	b084      	sub	sp, #16
 8002220:	af00      	add	r7, sp, #0
 8002222:	60b9      	str	r1, [r7, #8]
 8002224:	607a      	str	r2, [r7, #4]
 8002226:	230f      	movs	r3, #15
 8002228:	18fb      	adds	r3, r7, r3
 800222a:	1c02      	adds	r2, r0, #0
 800222c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800222e:	68ba      	ldr	r2, [r7, #8]
 8002230:	230f      	movs	r3, #15
 8002232:	18fb      	adds	r3, r7, r3
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b25b      	sxtb	r3, r3
 8002238:	0011      	movs	r1, r2
 800223a:	0018      	movs	r0, r3
 800223c:	f7ff ff0e 	bl	800205c <NVIC_SetPriority>
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b004      	add	sp, #16
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	0002      	movs	r2, r0
 8002250:	1dfb      	adds	r3, r7, #7
 8002252:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002254:	1dfb      	adds	r3, r7, #7
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b25b      	sxtb	r3, r3
 800225a:	0018      	movs	r0, r3
 800225c:	f7ff fe86 	bl	8001f6c <NVIC_EnableIRQ>
}
 8002260:	46c0      	nop			; (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	0002      	movs	r2, r0
 8002270:	1dfb      	adds	r3, r7, #7
 8002272:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002274:	1dfb      	adds	r3, r7, #7
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	b25b      	sxtb	r3, r3
 800227a:	0018      	movs	r0, r3
 800227c:	f7ff fe8c 	bl	8001f98 <NVIC_DisableIRQ>
}
 8002280:	46c0      	nop			; (mov r8, r8)
 8002282:	46bd      	mov	sp, r7
 8002284:	b002      	add	sp, #8
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800228c:	f7ff ff92 	bl	80021b4 <NVIC_SystemReset>
}
 8002290:	46c0      	nop			; (mov r8, r8)
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}

08002296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002296:	b580      	push	{r7, lr}
 8002298:	b082      	sub	sp, #8
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	0018      	movs	r0, r3
 80022a2:	f7ff ff97 	bl	80021d4 <SysTick_Config>
 80022a6:	0003      	movs	r3, r0
}
 80022a8:	0018      	movs	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	b002      	add	sp, #8
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <HAL_NVIC_GetPriority>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
uint32_t HAL_NVIC_GetPriority(IRQn_Type IRQn)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	0002      	movs	r2, r0
 80022b8:	1dfb      	adds	r3, r7, #7
 80022ba:	701a      	strb	r2, [r3, #0]
  /* Get priority for Cortex-M system or device specific interrupts */
  return NVIC_GetPriority(IRQn);
 80022bc:	1dfb      	adds	r3, r7, #7
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	0018      	movs	r0, r3
 80022c4:	f7ff ff38 	bl	8002138 <NVIC_GetPriority>
 80022c8:	0003      	movs	r3, r0
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b002      	add	sp, #8
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <HAL_NVIC_SetPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b082      	sub	sp, #8
 80022d6:	af00      	add	r7, sp, #0
 80022d8:	0002      	movs	r2, r0
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Set interrupt pending */
  NVIC_SetPendingIRQ(IRQn);
 80022de:	1dfb      	adds	r3, r7, #7
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	b25b      	sxtb	r3, r3
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7ff fe89 	bl	8001ffc <NVIC_SetPendingIRQ>
}
 80022ea:	46c0      	nop			; (mov r8, r8)
 80022ec:	46bd      	mov	sp, r7
 80022ee:	b002      	add	sp, #8
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_NVIC_GetPendingIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval status: - 0  Interrupt status is not pending.
  *                 - 1  Interrupt status is pending.
  */
uint32_t HAL_NVIC_GetPendingIRQ(IRQn_Type IRQn)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	0002      	movs	r2, r0
 80022fa:	1dfb      	adds	r3, r7, #7
 80022fc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Return 1 if pending else 0 */
  return NVIC_GetPendingIRQ(IRQn);
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	b25b      	sxtb	r3, r3
 8002304:	0018      	movs	r0, r3
 8002306:	f7ff fe5f 	bl	8001fc8 <NVIC_GetPendingIRQ>
 800230a:	0003      	movs	r3, r0
}
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	0002      	movs	r2, r0
 800231c:	1dfb      	adds	r3, r7, #7
 800231e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8002320:	1dfb      	adds	r3, r7, #7
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	b25b      	sxtb	r3, r3
 8002326:	0018      	movs	r0, r3
 8002328:	f7ff fe80 	bl	800202c <NVIC_ClearPendingIRQ>
}
 800232c:	46c0      	nop			; (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b04      	cmp	r3, #4
 8002340:	d106      	bne.n	8002350 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8002344:	4a07      	ldr	r2, [pc, #28]	; (8002364 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8002346:	6812      	ldr	r2, [r2, #0]
 8002348:	2104      	movs	r1, #4
 800234a:	430a      	orrs	r2, r1
 800234c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 800234e:	e005      	b.n	800235c <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8002350:	4b04      	ldr	r3, [pc, #16]	; (8002364 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8002352:	4a04      	ldr	r2, [pc, #16]	; (8002364 <HAL_SYSTICK_CLKSourceConfig+0x30>)
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	2104      	movs	r1, #4
 8002358:	438a      	bics	r2, r1
 800235a:	601a      	str	r2, [r3, #0]
}
 800235c:	46c0      	nop			; (mov r8, r8)
 800235e:	46bd      	mov	sp, r7
 8002360:	b002      	add	sp, #8
 8002362:	bd80      	pop	{r7, pc}
 8002364:	e000e010 	.word	0xe000e010

08002368 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 800236c:	f000 f803 	bl	8002376 <HAL_SYSTICK_Callback>
}
 8002370:	46c0      	nop			; (mov r8, r8)
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e042      	b.n	800241c <HAL_DMA_Init+0x9c>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2221      	movs	r2, #33	; 0x21
 800239a:	2102      	movs	r1, #2
 800239c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <HAL_DMA_Init+0xa4>)
 80023aa:	4013      	ands	r3, r2
 80023ac:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80023b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69db      	ldr	r3, [r3, #28]
 80023d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4313      	orrs	r3, r2
 80023da:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	68fa      	ldr	r2, [r7, #12]
 80023e2:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	0018      	movs	r0, r3
 80023e8:	f000 fba2 	bl	8002b30 <DMA_CalcBaseAndBitshift>
  
  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	629a      	str	r2, [r3, #40]	; 0x28
  hdma->XferHalfCpltCallback = NULL;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma->XferErrorCallback = NULL;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
  hdma->XferAbortCallback = NULL;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	635a      	str	r2, [r3, #52]	; 0x34
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2221      	movs	r2, #33	; 0x21
 800240e:	2101      	movs	r1, #1
 8002410:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2220      	movs	r2, #32
 8002416:	2100      	movs	r1, #0
 8002418:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}  
 800241c:	0018      	movs	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	b004      	add	sp, #16
 8002422:	bd80      	pop	{r7, pc}
 8002424:	ffffc00f 	.word	0xffffc00f

08002428 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e02f      	b.n	800249a <HAL_DMA_DeInit+0x72>
  
  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  hdma->Instance->CCR &= ~DMA_CCR_EN;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	6812      	ldr	r2, [r2, #0]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	2101      	movs	r1, #1
 8002446:	438a      	bics	r2, r1
 8002448:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2200      	movs	r2, #0
 8002450:	601a      	str	r2, [r3, #0]

  /* Reset DMA Channel Number of Data to Transfer register */
  hdma->Instance->CNDTR = 0U;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2200      	movs	r2, #0
 8002458:	605a      	str	r2, [r3, #4]

  /* Reset DMA Channel peripheral address register */
  hdma->Instance->CPAR  = 0U;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  
  /* Reset DMA Channel memory address register */
  hdma->Instance->CMAR = 0U;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2200      	movs	r2, #0
 8002468:	60da      	str	r2, [r3, #12]

/* Get DMA Base Address */  
  DMA_CalcBaseAndBitshift(hdma);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	0018      	movs	r0, r3
 800246e:	f000 fb5f 	bl	8002b30 <DMA_CalcBaseAndBitshift>

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800247a:	2101      	movs	r1, #1
 800247c:	4091      	lsls	r1, r2
 800247e:	000a      	movs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2221      	movs	r2, #33	; 0x21
 800248c:	2100      	movs	r1, #0
 800248e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2220      	movs	r2, #32
 8002494:	2100      	movs	r1, #0
 8002496:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b002      	add	sp, #8
 80024a0:	bd80      	pop	{r7, pc}

080024a2 <HAL_DMA_Start>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024a2:	b580      	push	{r7, lr}
 80024a4:	b086      	sub	sp, #24
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	60f8      	str	r0, [r7, #12]
 80024aa:	60b9      	str	r1, [r7, #8]
 80024ac:	607a      	str	r2, [r7, #4]
 80024ae:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80024b0:	2317      	movs	r3, #23
 80024b2:	18fb      	adds	r3, r7, r3
 80024b4:	2200      	movs	r2, #0
 80024b6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2220      	movs	r2, #32
 80024bc:	5c9b      	ldrb	r3, [r3, r2]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d101      	bne.n	80024c6 <HAL_DMA_Start+0x24>
 80024c2:	2302      	movs	r3, #2
 80024c4:	e032      	b.n	800252c <HAL_DMA_Start+0x8a>
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	2220      	movs	r2, #32
 80024ca:	2101      	movs	r1, #1
 80024cc:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2221      	movs	r2, #33	; 0x21
 80024d2:	5c9b      	ldrb	r3, [r3, r2]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d11d      	bne.n	8002516 <HAL_DMA_Start+0x74>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2221      	movs	r2, #33	; 0x21
 80024de:	2102      	movs	r1, #2
 80024e0:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;  
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	68fa      	ldr	r2, [r7, #12]
 80024ee:	6812      	ldr	r2, [r2, #0]
 80024f0:	6812      	ldr	r2, [r2, #0]
 80024f2:	2101      	movs	r1, #1
 80024f4:	438a      	bics	r2, r1
 80024f6:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f000 faea 	bl	8002ad8 <DMA_SetConfig>
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;  
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	68fa      	ldr	r2, [r7, #12]
 800250a:	6812      	ldr	r2, [r2, #0]
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	2101      	movs	r1, #1
 8002510:	430a      	orrs	r2, r1
 8002512:	601a      	str	r2, [r3, #0]
 8002514:	e007      	b.n	8002526 <HAL_DMA_Start+0x84>
  }
  else
  {
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2220      	movs	r2, #32
 800251a:	2100      	movs	r1, #0
 800251c:	5499      	strb	r1, [r3, r2]
  	
  	/* Remain BUSY */
  	status = HAL_BUSY;
 800251e:	2317      	movs	r3, #23
 8002520:	18fb      	adds	r3, r7, r3
 8002522:	2202      	movs	r2, #2
 8002524:	701a      	strb	r2, [r3, #0]
  }  

  return status; 
 8002526:	2317      	movs	r3, #23
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	781b      	ldrb	r3, [r3, #0]
} 
 800252c:	0018      	movs	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	b006      	add	sp, #24
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	60b9      	str	r1, [r7, #8]
 800253e:	607a      	str	r2, [r7, #4]
 8002540:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8002542:	2317      	movs	r3, #23
 8002544:	18fb      	adds	r3, r7, r3
 8002546:	2200      	movs	r2, #0
 8002548:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	5c9b      	ldrb	r3, [r3, r2]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <HAL_DMA_Start_IT+0x24>
 8002554:	2302      	movs	r3, #2
 8002556:	e04f      	b.n	80025f8 <HAL_DMA_Start_IT+0xc4>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2220      	movs	r2, #32
 800255c:	2101      	movs	r1, #1
 800255e:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2221      	movs	r2, #33	; 0x21
 8002564:	5c9b      	ldrb	r3, [r3, r2]
 8002566:	b2db      	uxtb	r3, r3
 8002568:	2b01      	cmp	r3, #1
 800256a:	d13a      	bne.n	80025e2 <HAL_DMA_Start_IT+0xae>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2221      	movs	r2, #33	; 0x21
 8002570:	2102      	movs	r1, #2
 8002572:	5499      	strb	r1, [r3, r2]
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	6812      	ldr	r2, [r2, #0]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	2101      	movs	r1, #1
 8002586:	438a      	bics	r2, r1
 8002588:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	68b9      	ldr	r1, [r7, #8]
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f000 faa1 	bl	8002ad8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	2b00      	cmp	r3, #0
 800259c:	d008      	beq.n	80025b0 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	68fa      	ldr	r2, [r7, #12]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	6812      	ldr	r2, [r2, #0]
 80025a8:	210e      	movs	r1, #14
 80025aa:	430a      	orrs	r2, r1
 80025ac:	601a      	str	r2, [r3, #0]
 80025ae:	e00f      	b.n	80025d0 <HAL_DMA_Start_IT+0x9c>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	6812      	ldr	r2, [r2, #0]
 80025b8:	6812      	ldr	r2, [r2, #0]
 80025ba:	210a      	movs	r1, #10
 80025bc:	430a      	orrs	r2, r1
 80025be:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	6812      	ldr	r2, [r2, #0]
 80025c8:	6812      	ldr	r2, [r2, #0]
 80025ca:	2104      	movs	r1, #4
 80025cc:	438a      	bics	r2, r1
 80025ce:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68fa      	ldr	r2, [r7, #12]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	2101      	movs	r1, #1
 80025dc:	430a      	orrs	r2, r1
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	e007      	b.n	80025f2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2220      	movs	r2, #32
 80025e6:	2100      	movs	r1, #0
 80025e8:	5499      	strb	r1, [r3, r2]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 80025ea:	2317      	movs	r3, #23
 80025ec:	18fb      	adds	r3, r7, r3
 80025ee:	2202      	movs	r2, #2
 80025f0:	701a      	strb	r2, [r3, #0]
  }     
  
  return status;    
 80025f2:	2317      	movs	r3, #23
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	781b      	ldrb	r3, [r3, #0]
} 
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	b006      	add	sp, #24
 80025fe:	bd80      	pop	{r7, pc}

08002600 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
	/* Disable DMA IT */
	 hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	6812      	ldr	r2, [r2, #0]
 8002612:	210e      	movs	r1, #14
 8002614:	438a      	bics	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
	
	/* Disable the channel */
	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	687a      	ldr	r2, [r7, #4]
 800261e:	6812      	ldr	r2, [r2, #0]
 8002620:	6812      	ldr	r2, [r2, #0]
 8002622:	2101      	movs	r1, #1
 8002624:	438a      	bics	r2, r1
 8002626:	601a      	str	r2, [r3, #0]
	
	/* Clear all flags */
	hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800262c:	687a      	ldr	r2, [r7, #4]
 800262e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002630:	2101      	movs	r1, #1
 8002632:	4091      	lsls	r1, r2
 8002634:	000a      	movs	r2, r1
 8002636:	605a      	str	r2, [r3, #4]
	
	/* Change the DMA state*/
	hdma->State = HAL_DMA_STATE_READY; 
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2221      	movs	r2, #33	; 0x21
 800263c:	2101      	movs	r1, #1
 800263e:	5499      	strb	r1, [r3, r2]
	
	/* Process Unlocked */
	__HAL_UNLOCK(hdma);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2220      	movs	r2, #32
 8002644:	2100      	movs	r1, #0
 8002646:	5499      	strb	r1, [r3, r2]
	
	return HAL_OK; 
 8002648:	2300      	movs	r3, #0
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b002      	add	sp, #8
 8002650:	bd80      	pop	{r7, pc}

08002652 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800265a:	230f      	movs	r3, #15
 800265c:	18fb      	adds	r3, r7, r3
 800265e:	2200      	movs	r2, #0
 8002660:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2221      	movs	r2, #33	; 0x21
 8002666:	5c9b      	ldrb	r3, [r3, r2]
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b02      	cmp	r3, #2
 800266c:	d007      	beq.n	800267e <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2204      	movs	r2, #4
 8002672:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002674:	230f      	movs	r3, #15
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	e028      	b.n	80026d0 <HAL_DMA_Abort_IT+0x7e>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	6812      	ldr	r2, [r2, #0]
 8002688:	210e      	movs	r1, #14
 800268a:	438a      	bics	r2, r1
 800268c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6812      	ldr	r2, [r2, #0]
 8002696:	6812      	ldr	r2, [r2, #0]
 8002698:	2101      	movs	r1, #1
 800269a:	438a      	bics	r2, r1
 800269c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026a6:	2101      	movs	r1, #1
 80026a8:	4091      	lsls	r1, r2
 80026aa:	000a      	movs	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2221      	movs	r2, #33	; 0x21
 80026b2:	2101      	movs	r1, #1
 80026b4:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2220      	movs	r2, #32
 80026ba:	2100      	movs	r1, #0
 80026bc:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d004      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x7e>
    {
      hdma->XferAbortCallback(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	0010      	movs	r0, r2
 80026ce:	4798      	blx	r3
    } 
  }
  return status;
 80026d0:	230f      	movs	r3, #15
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	781b      	ldrb	r3, [r3, #0]
}
 80026d6:	0018      	movs	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	b004      	add	sp, #16
 80026dc:	bd80      	pop	{r7, pc}

080026de <HAL_DMA_PollForTransfer>:
  * @param  CompleteLevel Specifies the DMA level complete.  
  * @param  Timeout       Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_PollForTransfer(DMA_HandleTypeDef *hdma, uint32_t CompleteLevel, uint32_t Timeout)
{
 80026de:	b580      	push	{r7, lr}
 80026e0:	b086      	sub	sp, #24
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	60f8      	str	r0, [r7, #12]
 80026e6:	60b9      	str	r1, [r7, #8]
 80026e8:	607a      	str	r2, [r7, #4]
  uint32_t temp;
  uint32_t tickstart = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2221      	movs	r2, #33	; 0x21
 80026f2:	5c9b      	ldrb	r3, [r3, r2]
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d008      	beq.n	800270c <HAL_DMA_PollForTransfer+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2204      	movs	r2, #4
 80026fe:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2220      	movs	r2, #32
 8002704:	2100      	movs	r1, #0
 8002706:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e07d      	b.n	8002808 <HAL_DMA_PollForTransfer+0x12a>
  }
  
  /* Polling mode not supported in circular mode */
  if (RESET != (hdma->Instance->CCR & DMA_CCR_CIRC))
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2220      	movs	r2, #32
 8002714:	4013      	ands	r3, r2
 8002716:	d005      	beq.n	8002724 <HAL_DMA_PollForTransfer+0x46>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2280      	movs	r2, #128	; 0x80
 800271c:	0052      	lsls	r2, r2, #1
 800271e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e071      	b.n	8002808 <HAL_DMA_PollForTransfer+0x12a>
  }
  
  /* Get the level transfer complete flag */
  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_DMA_PollForTransfer+0x5a>
  {
    /* Transfer Complete flag */
    temp = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2202      	movs	r2, #2
 8002730:	409a      	lsls	r2, r3
 8002732:	0013      	movs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	e005      	b.n	8002744 <HAL_DMA_PollForTransfer+0x66>
  }
  else
  {
    /* Half Transfer Complete flag */
    temp = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	2204      	movs	r2, #4
 800273e:	409a      	lsls	r2, r3
 8002740:	0013      	movs	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002744:	f7fe f978 	bl	8000a38 <HAL_GetTick>
 8002748:	0003      	movs	r3, r0
 800274a:	613b      	str	r3, [r7, #16]

  while(RESET == (hdma->DmaBaseAddress->ISR & temp))
 800274c:	e039      	b.n	80027c2 <HAL_DMA_PollForTransfer+0xe4>
  {
    if(RESET != (hdma->DmaBaseAddress->ISR & (DMA_FLAG_TE1 << hdma->ChannelIndex)))
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	2108      	movs	r1, #8
 800275a:	4099      	lsls	r1, r3
 800275c:	000b      	movs	r3, r1
 800275e:	4013      	ands	r3, r2
 8002760:	d014      	beq.n	800278c <HAL_DMA_PollForTransfer+0xae>
    {      
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Clear all flags */
      hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800276a:	2101      	movs	r1, #1
 800276c:	4091      	lsls	r1, r2
 800276e:	000a      	movs	r2, r1
 8002770:	605a      	str	r2, [r3, #4]
      
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	2201      	movs	r2, #1
 8002776:	639a      	str	r2, [r3, #56]	; 0x38

      /* Change the DMA state */
      hdma->State= HAL_DMA_STATE_READY;       
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	2221      	movs	r2, #33	; 0x21
 800277c:	2101      	movs	r1, #1
 800277e:	5499      	strb	r1, [r3, r2]
      
      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2220      	movs	r2, #32
 8002784:	2100      	movs	r1, #0
 8002786:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;      
 8002788:	2301      	movs	r3, #1
 800278a:	e03d      	b.n	8002808 <HAL_DMA_PollForTransfer+0x12a>
    }      
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3301      	adds	r3, #1
 8002790:	d017      	beq.n	80027c2 <HAL_DMA_PollForTransfer+0xe4>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_DMA_PollForTransfer+0xca>
 8002798:	f7fe f94e 	bl	8000a38 <HAL_GetTick>
 800279c:	0002      	movs	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad2      	subs	r2, r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d90c      	bls.n	80027c2 <HAL_DMA_PollForTransfer+0xe4>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2221      	movs	r2, #33	; 0x21
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	2100      	movs	r1, #0
 80027bc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e022      	b.n	8002808 <HAL_DMA_PollForTransfer+0x12a>
  while(RESET == (hdma->DmaBaseAddress->ISR & temp))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	4013      	ands	r3, r2
 80027cc:	d0bf      	beq.n	800274e <HAL_DMA_PollForTransfer+0x70>
      }
    }
  }

  if(HAL_DMA_FULL_TRANSFER == CompleteLevel)
 80027ce:	68bb      	ldr	r3, [r7, #8]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10c      	bne.n	80027ee <HAL_DMA_PollForTransfer+0x110>
  {
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027dc:	2102      	movs	r1, #2
 80027de:	4091      	lsls	r1, r2
 80027e0:	000a      	movs	r2, r1
 80027e2:	605a      	str	r2, [r3, #4]

    /* The selected Channelx EN bit is cleared (DMA is disabled and 
    all transfers are complete) */
    hdma->State = HAL_DMA_STATE_READY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2221      	movs	r2, #33	; 0x21
 80027e8:	2101      	movs	r1, #1
 80027ea:	5499      	strb	r1, [r3, r2]
 80027ec:	e007      	b.n	80027fe <HAL_DMA_PollForTransfer+0x120>
  }
  else
  { 
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027f2:	68fa      	ldr	r2, [r7, #12]
 80027f4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027f6:	2104      	movs	r1, #4
 80027f8:	4091      	lsls	r1, r2
 80027fa:	000a      	movs	r2, r1
 80027fc:	605a      	str	r2, [r3, #4]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hdma);  
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	2100      	movs	r1, #0
 8002804:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002806:	2300      	movs	r3, #0
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b006      	add	sp, #24
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	2204      	movs	r2, #4
 800282e:	409a      	lsls	r2, r3
 8002830:	0013      	movs	r3, r2
 8002832:	68fa      	ldr	r2, [r7, #12]
 8002834:	4013      	ands	r3, r2
 8002836:	d024      	beq.n	8002882 <HAL_DMA_IRQHandler+0x72>
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	2204      	movs	r2, #4
 800283c:	4013      	ands	r3, r2
 800283e:	d020      	beq.n	8002882 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2220      	movs	r2, #32
 8002848:	4013      	ands	r3, r2
 800284a:	d107      	bne.n	800285c <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6812      	ldr	r2, [r2, #0]
 8002854:	6812      	ldr	r2, [r2, #0]
 8002856:	2104      	movs	r1, #4
 8002858:	438a      	bics	r2, r1
 800285a:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002864:	2104      	movs	r1, #4
 8002866:	4091      	lsls	r1, r2
 8002868:	000a      	movs	r2, r1
 800286a:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	2b00      	cmp	r3, #0
 8002872:	d100      	bne.n	8002876 <HAL_DMA_IRQHandler+0x66>
 8002874:	e06a      	b.n	800294c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	0010      	movs	r0, r2
 800287e:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8002880:	e064      	b.n	800294c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	2202      	movs	r2, #2
 8002888:	409a      	lsls	r2, r3
 800288a:	0013      	movs	r3, r2
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4013      	ands	r3, r2
 8002890:	d02b      	beq.n	80028ea <HAL_DMA_IRQHandler+0xda>
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	2202      	movs	r2, #2
 8002896:	4013      	ands	r3, r2
 8002898:	d027      	beq.n	80028ea <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2220      	movs	r2, #32
 80028a2:	4013      	ands	r3, r2
 80028a4:	d10b      	bne.n	80028be <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6812      	ldr	r2, [r2, #0]
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	210a      	movs	r1, #10
 80028b2:	438a      	bics	r2, r1
 80028b4:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2221      	movs	r2, #33	; 0x21
 80028ba:	2101      	movs	r1, #1
 80028bc:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028c6:	2102      	movs	r1, #2
 80028c8:	4091      	lsls	r1, r2
 80028ca:	000a      	movs	r2, r1
 80028cc:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2220      	movs	r2, #32
 80028d2:	2100      	movs	r1, #0
 80028d4:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d036      	beq.n	800294c <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	0010      	movs	r0, r2
 80028e6:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80028e8:	e030      	b.n	800294c <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	2208      	movs	r2, #8
 80028f0:	409a      	lsls	r2, r3
 80028f2:	0013      	movs	r3, r2
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	4013      	ands	r3, r2
 80028f8:	d028      	beq.n	800294c <HAL_DMA_IRQHandler+0x13c>
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	2208      	movs	r2, #8
 80028fe:	4013      	ands	r3, r2
 8002900:	d024      	beq.n	800294c <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	6812      	ldr	r2, [r2, #0]
 800290c:	210e      	movs	r1, #14
 800290e:	438a      	bics	r2, r1
 8002910:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002916:	687a      	ldr	r2, [r7, #4]
 8002918:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800291a:	2101      	movs	r1, #1
 800291c:	4091      	lsls	r1, r2
 800291e:	000a      	movs	r2, r1
 8002920:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2221      	movs	r2, #33	; 0x21
 800292c:	2101      	movs	r1, #1
 800292e:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2220      	movs	r2, #32
 8002934:	2100      	movs	r1, #0
 8002936:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	687a      	ldr	r2, [r7, #4]
 8002946:	0010      	movs	r0, r2
 8002948:	4798      	blx	r3
    }
   }
}  
 800294a:	e7ff      	b.n	800294c <HAL_DMA_IRQHandler+0x13c>
 800294c:	46c0      	nop			; (mov r8, r8)
 800294e:	46bd      	mov	sp, r7
 8002950:	b004      	add	sp, #16
 8002952:	bd80      	pop	{r7, pc}

08002954 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callback function which has pointer to 
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */                          
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	230b      	movs	r3, #11
 8002960:	18fb      	adds	r3, r7, r3
 8002962:	1c0a      	adds	r2, r1, #0
 8002964:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002966:	2317      	movs	r3, #23
 8002968:	18fb      	adds	r3, r7, r3
 800296a:	2200      	movs	r2, #0
 800296c:	701a      	strb	r2, [r3, #0]
  
  /* Process locked */
  __HAL_LOCK(hdma);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2220      	movs	r2, #32
 8002972:	5c9b      	ldrb	r3, [r3, r2]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_DMA_RegisterCallback+0x28>
 8002978:	2302      	movs	r3, #2
 800297a:	e038      	b.n	80029ee <HAL_DMA_RegisterCallback+0x9a>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2220      	movs	r2, #32
 8002980:	2101      	movs	r1, #1
 8002982:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2221      	movs	r2, #33	; 0x21
 8002988:	5c9b      	ldrb	r3, [r3, r2]
 800298a:	b2db      	uxtb	r3, r3
 800298c:	2b01      	cmp	r3, #1
 800298e:	d123      	bne.n	80029d8 <HAL_DMA_RegisterCallback+0x84>
  {
    switch (CallbackID)
 8002990:	230b      	movs	r3, #11
 8002992:	18fb      	adds	r3, r7, r3
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d00c      	beq.n	80029b4 <HAL_DMA_RegisterCallback+0x60>
 800299a:	dc02      	bgt.n	80029a2 <HAL_DMA_RegisterCallback+0x4e>
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_DMA_RegisterCallback+0x58>
 80029a0:	e014      	b.n	80029cc <HAL_DMA_RegisterCallback+0x78>
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d00a      	beq.n	80029bc <HAL_DMA_RegisterCallback+0x68>
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d00c      	beq.n	80029c4 <HAL_DMA_RegisterCallback+0x70>
 80029aa:	e00f      	b.n	80029cc <HAL_DMA_RegisterCallback+0x78>
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	629a      	str	r2, [r3, #40]	; 0x28
           break;
 80029b2:	e015      	b.n	80029e0 <HAL_DMA_RegisterCallback+0x8c>
       
     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	62da      	str	r2, [r3, #44]	; 0x2c
           break;         
 80029ba:	e011      	b.n	80029e0 <HAL_DMA_RegisterCallback+0x8c>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	631a      	str	r2, [r3, #48]	; 0x30
           break;         
 80029c2:	e00d      	b.n	80029e0 <HAL_DMA_RegisterCallback+0x8c>
           
     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	635a      	str	r2, [r3, #52]	; 0x34
           break; 
 80029ca:	e009      	b.n	80029e0 <HAL_DMA_RegisterCallback+0x8c>
           
     default:
           status = HAL_ERROR;
 80029cc:	2317      	movs	r3, #23
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	2201      	movs	r2, #1
 80029d2:	701a      	strb	r2, [r3, #0]
           break;                                                            
 80029d4:	46c0      	nop			; (mov r8, r8)
 80029d6:	e003      	b.n	80029e0 <HAL_DMA_RegisterCallback+0x8c>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029d8:	2317      	movs	r3, #23
 80029da:	18fb      	adds	r3, r7, r3
 80029dc:	2201      	movs	r2, #1
 80029de:	701a      	strb	r2, [r3, #0]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	2220      	movs	r2, #32
 80029e4:	2100      	movs	r1, #0
 80029e6:	5499      	strb	r1, [r3, r2]
  
  return status;
 80029e8:	2317      	movs	r3, #23
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	781b      	ldrb	r3, [r3, #0]
}
 80029ee:	0018      	movs	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b006      	add	sp, #24
 80029f4:	bd80      	pop	{r7, pc}
	...

080029f8 <HAL_DMA_UnRegisterCallback>:
  * @param  CallbackID           User Callback identifer
  *                               a HAL_DMA_CallbackIDTypeDef ENUM as parameter.
  * @retval HAL status
  */              
HAL_StatusTypeDef HAL_DMA_UnRegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	000a      	movs	r2, r1
 8002a02:	1cfb      	adds	r3, r7, #3
 8002a04:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	230f      	movs	r3, #15
 8002a08:	18fb      	adds	r3, r7, r3
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]

    /* Process locked */
  __HAL_LOCK(hdma);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2220      	movs	r2, #32
 8002a12:	5c9b      	ldrb	r3, [r3, r2]
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d101      	bne.n	8002a1c <HAL_DMA_UnRegisterCallback+0x24>
 8002a18:	2302      	movs	r3, #2
 8002a1a:	e040      	b.n	8002a9e <HAL_DMA_UnRegisterCallback+0xa6>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2220      	movs	r2, #32
 8002a20:	2101      	movs	r1, #1
 8002a22:	5499      	strb	r1, [r3, r2]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2221      	movs	r2, #33	; 0x21
 8002a28:	5c9b      	ldrb	r3, [r3, r2]
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d12b      	bne.n	8002a88 <HAL_DMA_UnRegisterCallback+0x90>
  {
    switch (CallbackID)
 8002a30:	1cfb      	adds	r3, r7, #3
 8002a32:	781b      	ldrb	r3, [r3, #0]
 8002a34:	2b04      	cmp	r3, #4
 8002a36:	d821      	bhi.n	8002a7c <HAL_DMA_UnRegisterCallback+0x84>
 8002a38:	009a      	lsls	r2, r3, #2
 8002a3a:	4b1b      	ldr	r3, [pc, #108]	; (8002aa8 <HAL_DMA_UnRegisterCallback+0xb0>)
 8002a3c:	18d3      	adds	r3, r2, r3
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	469f      	mov	pc, r3
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = NULL;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	629a      	str	r2, [r3, #40]	; 0x28
           break;
 8002a48:	e022      	b.n	8002a90 <HAL_DMA_UnRegisterCallback+0x98>
       
     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = NULL;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	62da      	str	r2, [r3, #44]	; 0x2c
           break;         
 8002a50:	e01e      	b.n	8002a90 <HAL_DMA_UnRegisterCallback+0x98>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = NULL;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	631a      	str	r2, [r3, #48]	; 0x30
           break;         
 8002a58:	e01a      	b.n	8002a90 <HAL_DMA_UnRegisterCallback+0x98>
           
     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = NULL;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	635a      	str	r2, [r3, #52]	; 0x34
           break; 
 8002a60:	e016      	b.n	8002a90 <HAL_DMA_UnRegisterCallback+0x98>
     
    case   HAL_DMA_XFER_ALL_CB_ID:
           hdma->XferCpltCallback = NULL;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	629a      	str	r2, [r3, #40]	; 0x28
           hdma->XferHalfCpltCallback = NULL;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	62da      	str	r2, [r3, #44]	; 0x2c
           hdma->XferErrorCallback = NULL;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	631a      	str	r2, [r3, #48]	; 0x30
           hdma->XferAbortCallback = NULL;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	635a      	str	r2, [r3, #52]	; 0x34
           break; 
 8002a7a:	e009      	b.n	8002a90 <HAL_DMA_UnRegisterCallback+0x98>
     
    default:
           status = HAL_ERROR;
 8002a7c:	230f      	movs	r3, #15
 8002a7e:	18fb      	adds	r3, r7, r3
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
           break;                                                            
 8002a84:	46c0      	nop			; (mov r8, r8)
 8002a86:	e003      	b.n	8002a90 <HAL_DMA_UnRegisterCallback+0x98>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a88:	230f      	movs	r3, #15
 8002a8a:	18fb      	adds	r3, r7, r3
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	701a      	strb	r2, [r3, #0]
  } 
  
  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2220      	movs	r2, #32
 8002a94:	2100      	movs	r1, #0
 8002a96:	5499      	strb	r1, [r3, r2]
  
  return status;
 8002a98:	230f      	movs	r3, #15
 8002a9a:	18fb      	adds	r3, r7, r3
 8002a9c:	781b      	ldrb	r3, [r3, #0]
}
 8002a9e:	0018      	movs	r0, r3
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	b004      	add	sp, #16
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	46c0      	nop			; (mov r8, r8)
 8002aa8:	08006a5c 	.word	0x08006a5c

08002aac <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2221      	movs	r2, #33	; 0x21
 8002ab8:	5c9b      	ldrb	r3, [r3, r2]
 8002aba:	b2db      	uxtb	r3, r3
}
 8002abc:	0018      	movs	r0, r3
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	b002      	add	sp, #8
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aea:	68fa      	ldr	r2, [r7, #12]
 8002aec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002aee:	2101      	movs	r1, #1
 8002af0:	4091      	lsls	r1, r2
 8002af2:	000a      	movs	r2, r1
 8002af4:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	605a      	str	r2, [r3, #4]
  
  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b10      	cmp	r3, #16
 8002b04:	d108      	bne.n	8002b18 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68ba      	ldr	r2, [r7, #8]
 8002b14:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002b16:	e007      	b.n	8002b28 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68ba      	ldr	r2, [r7, #8]
 8002b1e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	60da      	str	r2, [r3, #12]
}
 8002b28:	46c0      	nop			; (mov r8, r8)
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	b004      	add	sp, #16
 8002b2e:	bd80      	pop	{r7, pc}

08002b30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	001a      	movs	r2, r3
 8002b3e:	4b14      	ldr	r3, [pc, #80]	; (8002b90 <DMA_CalcBaseAndBitshift+0x60>)
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d810      	bhi.n	8002b66 <DMA_CalcBaseAndBitshift+0x36>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <DMA_CalcBaseAndBitshift+0x64>)
 8002b4a:	4694      	mov	ip, r2
 8002b4c:	4463      	add	r3, ip
 8002b4e:	2114      	movs	r1, #20
 8002b50:	0018      	movs	r0, r3
 8002b52:	f7fd fae9 	bl	8000128 <__udivsi3>
 8002b56:	0003      	movs	r3, r0
 8002b58:	009a      	lsls	r2, r3, #2
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a0d      	ldr	r2, [pc, #52]	; (8002b98 <DMA_CalcBaseAndBitshift+0x68>)
 8002b62:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8002b64:	e00f      	b.n	8002b86 <DMA_CalcBaseAndBitshift+0x56>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a0c      	ldr	r2, [pc, #48]	; (8002b9c <DMA_CalcBaseAndBitshift+0x6c>)
 8002b6c:	4694      	mov	ip, r2
 8002b6e:	4463      	add	r3, ip
 8002b70:	2114      	movs	r1, #20
 8002b72:	0018      	movs	r0, r3
 8002b74:	f7fd fad8 	bl	8000128 <__udivsi3>
 8002b78:	0003      	movs	r3, r0
 8002b7a:	009a      	lsls	r2, r3, #2
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a07      	ldr	r2, [pc, #28]	; (8002ba0 <DMA_CalcBaseAndBitshift+0x70>)
 8002b84:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b002      	add	sp, #8
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	46c0      	nop			; (mov r8, r8)
 8002b90:	40020407 	.word	0x40020407
 8002b94:	bffdfff8 	.word	0xbffdfff8
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	bffdfbf8 	.word	0xbffdfbf8
 8002ba0:	40020400 	.word	0x40020400

08002ba4 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	60f8      	str	r0, [r7, #12]
 8002bac:	60b9      	str	r1, [r7, #8]
 8002bae:	603a      	str	r2, [r7, #0]
 8002bb0:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002bb2:	2317      	movs	r3, #23
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 8002bba:	2316      	movs	r3, #22
 8002bbc:	18fb      	adds	r3, r7, r3
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8002bc2:	2315      	movs	r3, #21
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002bca:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <HAL_FLASH_Program+0x124>)
 8002bcc:	7e1b      	ldrb	r3, [r3, #24]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d101      	bne.n	8002bd6 <HAL_FLASH_Program+0x32>
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	e074      	b.n	8002cc0 <HAL_FLASH_Program+0x11c>
 8002bd6:	4b3c      	ldr	r3, [pc, #240]	; (8002cc8 <HAL_FLASH_Program+0x124>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002bdc:	2317      	movs	r3, #23
 8002bde:	18fe      	adds	r6, r7, r3
 8002be0:	4b3a      	ldr	r3, [pc, #232]	; (8002ccc <HAL_FLASH_Program+0x128>)
 8002be2:	0018      	movs	r0, r3
 8002be4:	f000 fa4c 	bl	8003080 <FLASH_WaitForLastOperation>
 8002be8:	0003      	movs	r3, r0
 8002bea:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8002bec:	2317      	movs	r3, #23
 8002bee:	18fb      	adds	r3, r7, r3
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d15e      	bne.n	8002cb4 <HAL_FLASH_Program+0x110>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d104      	bne.n	8002c06 <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8002bfc:	2315      	movs	r3, #21
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	2201      	movs	r2, #1
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	e00b      	b.n	8002c1e <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d104      	bne.n	8002c16 <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8002c0c:	2315      	movs	r3, #21
 8002c0e:	18fb      	adds	r3, r7, r3
 8002c10:	2202      	movs	r2, #2
 8002c12:	701a      	strb	r2, [r3, #0]
 8002c14:	e003      	b.n	8002c1e <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8002c16:	2315      	movs	r3, #21
 8002c18:	18fb      	adds	r3, r7, r3
 8002c1a:	2204      	movs	r2, #4
 8002c1c:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 8002c1e:	2316      	movs	r3, #22
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
 8002c26:	e03b      	b.n	8002ca0 <HAL_FLASH_Program+0xfc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8002c28:	2316      	movs	r3, #22
 8002c2a:	18fb      	adds	r3, r7, r3
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	005a      	lsls	r2, r3, #1
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	18d0      	adds	r0, r2, r3
 8002c34:	2316      	movs	r3, #22
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	001a      	movs	r2, r3
 8002c3e:	3a20      	subs	r2, #32
 8002c40:	2a00      	cmp	r2, #0
 8002c42:	db03      	blt.n	8002c4c <HAL_FLASH_Program+0xa8>
 8002c44:	6879      	ldr	r1, [r7, #4]
 8002c46:	40d1      	lsrs	r1, r2
 8002c48:	000c      	movs	r4, r1
 8002c4a:	e008      	b.n	8002c5e <HAL_FLASH_Program+0xba>
 8002c4c:	2220      	movs	r2, #32
 8002c4e:	1ad2      	subs	r2, r2, r3
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4091      	lsls	r1, r2
 8002c54:	000a      	movs	r2, r1
 8002c56:	6839      	ldr	r1, [r7, #0]
 8002c58:	40d9      	lsrs	r1, r3
 8002c5a:	000c      	movs	r4, r1
 8002c5c:	4314      	orrs	r4, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	40da      	lsrs	r2, r3
 8002c62:	0015      	movs	r5, r2
 8002c64:	b2a3      	uxth	r3, r4
 8002c66:	0019      	movs	r1, r3
 8002c68:	f000 f9ee 	bl	8003048 <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002c6c:	2317      	movs	r3, #23
 8002c6e:	18fe      	adds	r6, r7, r3
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <HAL_FLASH_Program+0x128>)
 8002c72:	0018      	movs	r0, r3
 8002c74:	f000 fa04 	bl	8003080 <FLASH_WaitForLastOperation>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002c7c:	4b14      	ldr	r3, [pc, #80]	; (8002cd0 <HAL_FLASH_Program+0x12c>)
 8002c7e:	4a14      	ldr	r2, [pc, #80]	; (8002cd0 <HAL_FLASH_Program+0x12c>)
 8002c80:	6912      	ldr	r2, [r2, #16]
 8002c82:	2101      	movs	r1, #1
 8002c84:	438a      	bics	r2, r1
 8002c86:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8002c88:	2317      	movs	r3, #23
 8002c8a:	18fb      	adds	r3, r7, r3
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d10f      	bne.n	8002cb2 <HAL_FLASH_Program+0x10e>
    for (index = 0U; index < nbiterations; index++)
 8002c92:	2316      	movs	r3, #22
 8002c94:	18fb      	adds	r3, r7, r3
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	2316      	movs	r3, #22
 8002c9a:	18fb      	adds	r3, r7, r3
 8002c9c:	3201      	adds	r2, #1
 8002c9e:	701a      	strb	r2, [r3, #0]
 8002ca0:	2316      	movs	r3, #22
 8002ca2:	18fa      	adds	r2, r7, r3
 8002ca4:	2315      	movs	r3, #21
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	7812      	ldrb	r2, [r2, #0]
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d3bb      	bcc.n	8002c28 <HAL_FLASH_Program+0x84>
 8002cb0:	e000      	b.n	8002cb4 <HAL_FLASH_Program+0x110>
      {
        break;
 8002cb2:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002cb4:	4b04      	ldr	r3, [pc, #16]	; (8002cc8 <HAL_FLASH_Program+0x124>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	761a      	strb	r2, [r3, #24]

  return status;
 8002cba:	2317      	movs	r3, #23
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	781b      	ldrb	r3, [r3, #0]
}
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	b007      	add	sp, #28
 8002cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc8:	200000d0 	.word	0x200000d0
 8002ccc:	0000c350 	.word	0x0000c350
 8002cd0:	40022000 	.word	0x40022000

08002cd4 <HAL_FLASH_Program_IT>:
  * @param  Data         Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002cd4:	b590      	push	{r4, r7, lr}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	603a      	str	r2, [r7, #0]
 8002ce0:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2317      	movs	r3, #23
 8002ce4:	18fb      	adds	r3, r7, r3
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8002cea:	4b20      	ldr	r3, [pc, #128]	; (8002d6c <HAL_FLASH_Program_IT+0x98>)
 8002cec:	7e1b      	ldrb	r3, [r3, #24]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_FLASH_Program_IT+0x22>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e036      	b.n	8002d64 <HAL_FLASH_Program_IT+0x90>
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <HAL_FLASH_Program_IT+0x98>)
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <HAL_FLASH_Program_IT+0x9c>)
 8002cfe:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <HAL_FLASH_Program_IT+0x9c>)
 8002d00:	6912      	ldr	r2, [r2, #16]
 8002d02:	21a0      	movs	r1, #160	; 0xa0
 8002d04:	0149      	lsls	r1, r1, #5
 8002d06:	430a      	orrs	r2, r1
 8002d08:	611a      	str	r2, [r3, #16]
  
  pFlash.Address = Address;
 8002d0a:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_FLASH_Program_IT+0x98>)
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	609a      	str	r2, [r3, #8]
  pFlash.Data = Data;
 8002d10:	4a16      	ldr	r2, [pc, #88]	; (8002d6c <HAL_FLASH_Program_IT+0x98>)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	687c      	ldr	r4, [r7, #4]
 8002d16:	6113      	str	r3, [r2, #16]
 8002d18:	6154      	str	r4, [r2, #20]

  if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d106      	bne.n	8002d2e <HAL_FLASH_Program_IT+0x5a>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMHALFWORD;
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_FLASH_Program_IT+0x98>)
 8002d22:	2203      	movs	r2, #3
 8002d24:	701a      	strb	r2, [r3, #0]
    /* Program halfword (16-bit) at a specified address. */
    pFlash.DataRemaining = 1U;
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_FLASH_Program_IT+0x98>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	605a      	str	r2, [r3, #4]
 8002d2c:	e00f      	b.n	8002d4e <HAL_FLASH_Program_IT+0x7a>
  }
  else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d106      	bne.n	8002d42 <HAL_FLASH_Program_IT+0x6e>
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMWORD;
 8002d34:	4b0d      	ldr	r3, [pc, #52]	; (8002d6c <HAL_FLASH_Program_IT+0x98>)
 8002d36:	2204      	movs	r2, #4
 8002d38:	701a      	strb	r2, [r3, #0]
    /* Program word (32-bit : 2*16-bit) at a specified address. */
    pFlash.DataRemaining = 2U;
 8002d3a:	4b0c      	ldr	r3, [pc, #48]	; (8002d6c <HAL_FLASH_Program_IT+0x98>)
 8002d3c:	2202      	movs	r2, #2
 8002d3e:	605a      	str	r2, [r3, #4]
 8002d40:	e005      	b.n	8002d4e <HAL_FLASH_Program_IT+0x7a>
  }
  else
  {
    pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAMDOUBLEWORD;
 8002d42:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <HAL_FLASH_Program_IT+0x98>)
 8002d44:	2205      	movs	r2, #5
 8002d46:	701a      	strb	r2, [r3, #0]
    /* Program double word (64-bit : 4*16-bit) at a specified address. */
    pFlash.DataRemaining = 4U;
 8002d48:	4b08      	ldr	r3, [pc, #32]	; (8002d6c <HAL_FLASH_Program_IT+0x98>)
 8002d4a:	2204      	movs	r2, #4
 8002d4c:	605a      	str	r2, [r3, #4]
  }

  /* Program halfword (16-bit) at a specified address. */
  FLASH_Program_HalfWord(Address, (uint16_t)Data);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	687c      	ldr	r4, [r7, #4]
 8002d52:	b29a      	uxth	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	0011      	movs	r1, r2
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f000 f975 	bl	8003048 <FLASH_Program_HalfWord>

  return status;
 8002d5e:	2317      	movs	r3, #23
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	781b      	ldrb	r3, [r3, #0]
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b007      	add	sp, #28
 8002d6a:	bd90      	pop	{r4, r7, pc}
 8002d6c:	200000d0 	.word	0x200000d0
 8002d70:	40022000 	.word	0x40022000

08002d74 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8002d74:	b5b0      	push	{r4, r5, r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) ||__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002d7e:	4b6e      	ldr	r3, [pc, #440]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2210      	movs	r2, #16
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b10      	cmp	r3, #16
 8002d88:	d005      	beq.n	8002d96 <HAL_FLASH_IRQHandler+0x22>
 8002d8a:	4b6b      	ldr	r3, [pc, #428]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	2204      	movs	r2, #4
 8002d90:	4013      	ands	r3, r2
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d10f      	bne.n	8002db6 <HAL_FLASH_IRQHandler+0x42>
  {
    /* Return the faulty address */
    addresstmp = pFlash.Address;
 8002d96:	4b69      	ldr	r3, [pc, #420]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	607b      	str	r3, [r7, #4]
    /* Reset address */
    pFlash.Address = 0xFFFFFFFFU;
 8002d9c:	4b67      	ldr	r3, [pc, #412]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002d9e:	2201      	movs	r2, #1
 8002da0:	4252      	negs	r2, r2
 8002da2:	609a      	str	r2, [r3, #8]
  
    /* Save the Error code */
    FLASH_SetErrorCode();
 8002da4:	f000 f9ac 	bl	8003100 <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	0018      	movs	r0, r3
 8002dac:	f000 f8d2 	bl	8002f54 <HAL_FLASH_OperationErrorCallback>

    /* Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002db0:	4b62      	ldr	r3, [pc, #392]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	701a      	strb	r2, [r3, #0]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002db6:	4b60      	ldr	r3, [pc, #384]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002db8:	68db      	ldr	r3, [r3, #12]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b20      	cmp	r3, #32
 8002dc0:	d000      	beq.n	8002dc4 <HAL_FLASH_IRQHandler+0x50>
 8002dc2:	e0a1      	b.n	8002f08 <HAL_FLASH_IRQHandler+0x194>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002dc4:	4b5c      	ldr	r3, [pc, #368]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002dc6:	2220      	movs	r2, #32
 8002dc8:	60da      	str	r2, [r3, #12]
    
    /* Process can continue only if no error detected */
    if(pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8002dca:	4b5c      	ldr	r3, [pc, #368]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d100      	bne.n	8002dd6 <HAL_FLASH_IRQHandler+0x62>
 8002dd4:	e098      	b.n	8002f08 <HAL_FLASH_IRQHandler+0x194>
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGEERASE)
 8002dd6:	4b59      	ldr	r3, [pc, #356]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d132      	bne.n	8002e46 <HAL_FLASH_IRQHandler+0xd2>
      {
        /* Nb of pages to erased can be decreased */
        pFlash.DataRemaining--;
 8002de0:	4b56      	ldr	r3, [pc, #344]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	1e5a      	subs	r2, r3, #1
 8002de6:	4b55      	ldr	r3, [pc, #340]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002de8:	605a      	str	r2, [r3, #4]

        /* Check if there are still pages to erase */
        if(pFlash.DataRemaining != 0U)
 8002dea:	4b54      	ldr	r3, [pc, #336]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d01b      	beq.n	8002e2a <HAL_FLASH_IRQHandler+0xb6>
        {
          addresstmp = pFlash.Address;
 8002df2:	4b52      	ldr	r3, [pc, #328]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	607b      	str	r3, [r7, #4]
          /*Indicate user which sector has been erased */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	f000 f8a2 	bl	8002f44 <HAL_FLASH_EndOfOperationCallback>

          /*Increment sector number*/
          addresstmp = pFlash.Address + FLASH_PAGE_SIZE;
 8002e00:	4b4e      	ldr	r3, [pc, #312]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2280      	movs	r2, #128	; 0x80
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	4694      	mov	ip, r2
 8002e0a:	4463      	add	r3, ip
 8002e0c:	607b      	str	r3, [r7, #4]
          pFlash.Address = addresstmp;
 8002e0e:	4b4b      	ldr	r3, [pc, #300]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	609a      	str	r2, [r3, #8]

          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002e14:	4b48      	ldr	r3, [pc, #288]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e16:	4a48      	ldr	r2, [pc, #288]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e18:	6912      	ldr	r2, [r2, #16]
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	438a      	bics	r2, r1
 8002e1e:	611a      	str	r2, [r3, #16]

          FLASH_PageErase(addresstmp);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	0018      	movs	r0, r3
 8002e24:	f000 fe6e 	bl	8003b04 <FLASH_PageErase>
 8002e28:	e06e      	b.n	8002f08 <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* No more pages to Erase, user callback can be called. */
          /* Reset Sector and stop Erase pages procedure */
          pFlash.Address = addresstmp = 0xFFFFFFFFU;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	425b      	negs	r3, r3
 8002e2e:	607b      	str	r3, [r7, #4]
 8002e30:	4b42      	ldr	r3, [pc, #264]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e32:	687a      	ldr	r2, [r7, #4]
 8002e34:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e36:	4b41      	ldr	r3, [pc, #260]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(addresstmp);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 f880 	bl	8002f44 <HAL_FLASH_EndOfOperationCallback>
 8002e44:	e060      	b.n	8002f08 <HAL_FLASH_IRQHandler+0x194>
        }
      }
      else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8002e46:	4b3d      	ldr	r3, [pc, #244]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d10c      	bne.n	8002e6a <HAL_FLASH_IRQHandler+0xf6>
      {
        /* Operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002e50:	4b39      	ldr	r3, [pc, #228]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e52:	4a39      	ldr	r2, [pc, #228]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002e54:	6912      	ldr	r2, [r2, #16]
 8002e56:	2104      	movs	r1, #4
 8002e58:	438a      	bics	r2, r1
 8002e5a:	611a      	str	r2, [r3, #16]

          /* MassErase ended. Return the selected bank */
          /* FLASH EOP interrupt user callback */
          HAL_FLASH_EndOfOperationCallback(0);
 8002e5c:	2000      	movs	r0, #0
 8002e5e:	f000 f871 	bl	8002f44 <HAL_FLASH_EndOfOperationCallback>

          /* Stop Mass Erase procedure*/
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002e62:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
 8002e68:	e04e      	b.n	8002f08 <HAL_FLASH_IRQHandler+0x194>
        }
      else
      {
        /* Nb of 16-bit data to program can be decreased */
        pFlash.DataRemaining--;
 8002e6a:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	1e5a      	subs	r2, r3, #1
 8002e70:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e72:	605a      	str	r2, [r3, #4]
        
        /* Check if there are still 16-bit data to program */
        if(pFlash.DataRemaining != 0U)
 8002e74:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d021      	beq.n	8002ec0 <HAL_FLASH_IRQHandler+0x14c>
        {
          /* Increment address to 16-bit */
          pFlash.Address += 2;
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	1c9a      	adds	r2, r3, #2
 8002e82:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e84:	609a      	str	r2, [r3, #8]
          addresstmp = pFlash.Address;
 8002e86:	4b2d      	ldr	r3, [pc, #180]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	607b      	str	r3, [r7, #4]
          
          /* Shift to have next 16-bit data */
          pFlash.Data = (pFlash.Data >> 16U);
 8002e8c:	4b2b      	ldr	r3, [pc, #172]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	0419      	lsls	r1, r3, #16
 8002e94:	0c14      	lsrs	r4, r2, #16
 8002e96:	430c      	orrs	r4, r1
 8002e98:	0c1d      	lsrs	r5, r3, #16
 8002e9a:	4b28      	ldr	r3, [pc, #160]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002e9c:	611c      	str	r4, [r3, #16]
 8002e9e:	615d      	str	r5, [r3, #20]
          
          /* Operation is completed, disable the PG Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002ea0:	4b25      	ldr	r3, [pc, #148]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002ea2:	4a25      	ldr	r2, [pc, #148]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002ea4:	6912      	ldr	r2, [r2, #16]
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	438a      	bics	r2, r1
 8002eaa:	611a      	str	r2, [r3, #16]

          /*Program halfword (16-bit) at a specified address.*/
          FLASH_Program_HalfWord(addresstmp, (uint16_t)pFlash.Data);
 8002eac:	4b23      	ldr	r3, [pc, #140]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002eae:	695c      	ldr	r4, [r3, #20]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0011      	movs	r1, r2
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f000 f8c5 	bl	8003048 <FLASH_Program_HalfWord>
 8002ebe:	e023      	b.n	8002f08 <HAL_FLASH_IRQHandler+0x194>
        }
        else
        {
          /* Program ended. Return the selected address */
          /* FLASH EOP interrupt user callback */
          if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMHALFWORD)
 8002ec0:	4b1e      	ldr	r3, [pc, #120]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b03      	cmp	r3, #3
 8002ec8:	d105      	bne.n	8002ed6 <HAL_FLASH_IRQHandler+0x162>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8002eca:	4b1c      	ldr	r3, [pc, #112]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 f838 	bl	8002f44 <HAL_FLASH_EndOfOperationCallback>
 8002ed4:	e011      	b.n	8002efa <HAL_FLASH_IRQHandler+0x186>
          }
          else if (pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAMWORD)
 8002ed6:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d106      	bne.n	8002eee <HAL_FLASH_IRQHandler+0x17a>
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 2U);
 8002ee0:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	3b02      	subs	r3, #2
 8002ee6:	0018      	movs	r0, r3
 8002ee8:	f000 f82c 	bl	8002f44 <HAL_FLASH_EndOfOperationCallback>
 8002eec:	e005      	b.n	8002efa <HAL_FLASH_IRQHandler+0x186>
          }
          else 
          {
            HAL_FLASH_EndOfOperationCallback(pFlash.Address - 6U);
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002ef0:	689b      	ldr	r3, [r3, #8]
 8002ef2:	3b06      	subs	r3, #6
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	f000 f825 	bl	8002f44 <HAL_FLASH_EndOfOperationCallback>
          }
        
          /* Reset Address and stop Program procedure */
          pFlash.Address = 0xFFFFFFFFU;
 8002efa:	4b10      	ldr	r3, [pc, #64]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002efc:	2201      	movs	r2, #1
 8002efe:	4252      	negs	r2, r2
 8002f00:	609a      	str	r2, [r3, #8]
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8002f02:	4b0e      	ldr	r3, [pc, #56]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002f0a:	781b      	ldrb	r3, [r3, #0]
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10e      	bne.n	8002f30 <HAL_FLASH_IRQHandler+0x1bc>
  {
    /* Operation is completed, disable the PG, PER and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_PER | FLASH_CR_MER));
 8002f12:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f14:	4a08      	ldr	r2, [pc, #32]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f16:	6912      	ldr	r2, [r2, #16]
 8002f18:	2107      	movs	r1, #7
 8002f1a:	438a      	bics	r2, r1
 8002f1c:	611a      	str	r2, [r3, #16]

    /* Disable End of FLASH Operation and Error source interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8002f1e:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f20:	4a05      	ldr	r2, [pc, #20]	; (8002f38 <HAL_FLASH_IRQHandler+0x1c4>)
 8002f22:	6912      	ldr	r2, [r2, #16]
 8002f24:	4906      	ldr	r1, [pc, #24]	; (8002f40 <HAL_FLASH_IRQHandler+0x1cc>)
 8002f26:	400a      	ands	r2, r1
 8002f28:	611a      	str	r2, [r3, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <HAL_FLASH_IRQHandler+0x1c8>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	761a      	strb	r2, [r3, #24]
  }
}
 8002f30:	46c0      	nop			; (mov r8, r8)
 8002f32:	46bd      	mov	sp, r7
 8002f34:	b002      	add	sp, #8
 8002f36:	bdb0      	pop	{r4, r5, r7, pc}
 8002f38:	40022000 	.word	0x40022000
 8002f3c:	200000d0 	.word	0x200000d0
 8002f40:	ffffebff 	.word	0xffffebff

08002f44 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8002f4c:	46c0      	nop			; (mov r8, r8)
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b002      	add	sp, #8
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <HAL_FLASH_OperationErrorCallback>:
  *                 - Pages Erase: Address of the page which returned an error
  *                 - Program: Address which was selected for data program
  * @retval none
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8002f5c:	46c0      	nop			; (mov r8, r8)
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_SET(FLASH->CR, FLASH_CR_LOCK))
 8002f68:	4b08      	ldr	r3, [pc, #32]	; (8002f8c <HAL_FLASH_Unlock+0x28>)
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2280      	movs	r2, #128	; 0x80
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d007      	beq.n	8002f82 <HAL_FLASH_Unlock+0x1e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002f72:	4b06      	ldr	r3, [pc, #24]	; (8002f8c <HAL_FLASH_Unlock+0x28>)
 8002f74:	4a06      	ldr	r2, [pc, #24]	; (8002f90 <HAL_FLASH_Unlock+0x2c>)
 8002f76:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <HAL_FLASH_Unlock+0x28>)
 8002f7a:	4a06      	ldr	r2, [pc, #24]	; (8002f94 <HAL_FLASH_Unlock+0x30>)
 8002f7c:	605a      	str	r2, [r3, #4]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK; 
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_FLASH_Unlock+0x20>
    return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
}
 8002f84:	0018      	movs	r0, r3
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	46c0      	nop			; (mov r8, r8)
 8002f8c:	40022000 	.word	0x40022000
 8002f90:	45670123 	.word	0x45670123
 8002f94:	cdef89ab 	.word	0xcdef89ab

08002f98 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <HAL_FLASH_Lock+0x18>)
 8002f9e:	4a04      	ldr	r2, [pc, #16]	; (8002fb0 <HAL_FLASH_Lock+0x18>)
 8002fa0:	6912      	ldr	r2, [r2, #16]
 8002fa2:	2180      	movs	r1, #128	; 0x80
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	0018      	movs	r0, r3
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40022000 	.word	0x40022000

08002fb4 <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Control Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  if (HAL_IS_BIT_CLR(FLASH->CR, FLASH_CR_OPTWRE))
 8002fb8:	4b08      	ldr	r3, [pc, #32]	; (8002fdc <HAL_FLASH_OB_Unlock+0x28>)
 8002fba:	691a      	ldr	r2, [r3, #16]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d107      	bne.n	8002fd4 <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <HAL_FLASH_OB_Unlock+0x28>)
 8002fc6:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <HAL_FLASH_OB_Unlock+0x2c>)
 8002fc8:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8002fca:	4b04      	ldr	r3, [pc, #16]	; (8002fdc <HAL_FLASH_OB_Unlock+0x28>)
 8002fcc:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <HAL_FLASH_OB_Unlock+0x30>)
 8002fce:	609a      	str	r2, [r3, #8]
  else
  {
    return HAL_ERROR;
  }  
  
  return HAL_OK;  
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e000      	b.n	8002fd6 <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
}
 8002fd6:	0018      	movs	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	40022000 	.word	0x40022000
 8002fe0:	45670123 	.word	0x45670123
 8002fe4:	cdef89ab 	.word	0xcdef89ab

08002fe8 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Control Registers access.
  * @retval HAL Status 
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* Clear the OPTWRE Bit to lock the FLASH Option Byte Registers access */
  CLEAR_BIT(FLASH->CR, FLASH_CR_OPTWRE);
 8002fec:	4b04      	ldr	r3, [pc, #16]	; (8003000 <HAL_FLASH_OB_Lock+0x18>)
 8002fee:	4a04      	ldr	r2, [pc, #16]	; (8003000 <HAL_FLASH_OB_Lock+0x18>)
 8002ff0:	6912      	ldr	r2, [r2, #16]
 8002ff2:	4904      	ldr	r1, [pc, #16]	; (8003004 <HAL_FLASH_OB_Lock+0x1c>)
 8002ff4:	400a      	ands	r2, r1
 8002ff6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}
 8003000:	40022000 	.word	0x40022000
 8003004:	fffffdff 	.word	0xfffffdff

08003008 <HAL_FLASH_OB_Launch>:
  * @brief  Launch the option byte loading.
  * @note   This function will reset automatically the MCU.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Launch(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* Set the OBL_Launch bit to launch the option byte loading */
  SET_BIT(FLASH->CR, FLASH_CR_OBL_LAUNCH);
 800300c:	4b07      	ldr	r3, [pc, #28]	; (800302c <HAL_FLASH_OB_Launch+0x24>)
 800300e:	4a07      	ldr	r2, [pc, #28]	; (800302c <HAL_FLASH_OB_Launch+0x24>)
 8003010:	6912      	ldr	r2, [r2, #16]
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	0189      	lsls	r1, r1, #6
 8003016:	430a      	orrs	r2, r1
 8003018:	611a      	str	r2, [r3, #16]
  
  /* Wait for last operation to be completed */
  return(FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE));
 800301a:	4b05      	ldr	r3, [pc, #20]	; (8003030 <HAL_FLASH_OB_Launch+0x28>)
 800301c:	0018      	movs	r0, r3
 800301e:	f000 f82f 	bl	8003080 <FLASH_WaitForLastOperation>
 8003022:	0003      	movs	r3, r0
}
 8003024:	0018      	movs	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	46c0      	nop			; (mov r8, r8)
 800302c:	40022000 	.word	0x40022000
 8003030:	0000c350 	.word	0x0000c350

08003034 <HAL_FLASH_GetError>:
  * @brief  Get the specific FLASH error flag.
  * @retval FLASH_ErrorCode The returned value can be:
  *            @ref FLASH_Error_Codes
  */
uint32_t HAL_FLASH_GetError(void)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8003038:	4b02      	ldr	r3, [pc, #8]	; (8003044 <HAL_FLASH_GetError+0x10>)
 800303a:	69db      	ldr	r3, [r3, #28]
}
 800303c:	0018      	movs	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	200000d0 	.word	0x200000d0

08003048 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	000a      	movs	r2, r1
 8003052:	1cbb      	adds	r3, r7, #2
 8003054:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003056:	4b08      	ldr	r3, [pc, #32]	; (8003078 <FLASH_Program_HalfWord+0x30>)
 8003058:	2200      	movs	r2, #0
 800305a:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800305c:	4b07      	ldr	r3, [pc, #28]	; (800307c <FLASH_Program_HalfWord+0x34>)
 800305e:	4a07      	ldr	r2, [pc, #28]	; (800307c <FLASH_Program_HalfWord+0x34>)
 8003060:	6912      	ldr	r2, [r2, #16]
 8003062:	2101      	movs	r1, #1
 8003064:	430a      	orrs	r2, r1
 8003066:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	1cba      	adds	r2, r7, #2
 800306c:	8812      	ldrh	r2, [r2, #0]
 800306e:	801a      	strh	r2, [r3, #0]
}
 8003070:	46c0      	nop			; (mov r8, r8)
 8003072:	46bd      	mov	sp, r7
 8003074:	b002      	add	sp, #8
 8003076:	bd80      	pop	{r7, pc}
 8003078:	200000d0 	.word	0x200000d0
 800307c:	40022000 	.word	0x40022000

08003080 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8003088:	f7fd fcd6 	bl	8000a38 <HAL_GetTick>
 800308c:	0003      	movs	r3, r0
 800308e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003090:	e00f      	b.n	80030b2 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	3301      	adds	r3, #1
 8003096:	d00c      	beq.n	80030b2 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d007      	beq.n	80030ae <FLASH_WaitForLastOperation+0x2e>
 800309e:	f7fd fccb 	bl	8000a38 <HAL_GetTick>
 80030a2:	0002      	movs	r2, r0
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	1ad2      	subs	r2, r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d901      	bls.n	80030b2 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e01f      	b.n	80030f2 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80030b2:	4b12      	ldr	r3, [pc, #72]	; (80030fc <FLASH_WaitForLastOperation+0x7c>)
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d0e9      	beq.n	8003092 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80030be:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <FLASH_WaitForLastOperation+0x7c>)
 80030c0:	68db      	ldr	r3, [r3, #12]
 80030c2:	2220      	movs	r2, #32
 80030c4:	4013      	ands	r3, r2
 80030c6:	2b20      	cmp	r3, #32
 80030c8:	d102      	bne.n	80030d0 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80030ca:	4b0c      	ldr	r3, [pc, #48]	; (80030fc <FLASH_WaitForLastOperation+0x7c>)
 80030cc:	2220      	movs	r2, #32
 80030ce:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80030d0:	4b0a      	ldr	r3, [pc, #40]	; (80030fc <FLASH_WaitForLastOperation+0x7c>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2210      	movs	r2, #16
 80030d6:	4013      	ands	r3, r2
 80030d8:	2b10      	cmp	r3, #16
 80030da:	d005      	beq.n	80030e8 <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80030dc:	4b07      	ldr	r3, [pc, #28]	; (80030fc <FLASH_WaitForLastOperation+0x7c>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2204      	movs	r2, #4
 80030e2:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	d103      	bne.n	80030f0 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80030e8:	f000 f80a 	bl	8003100 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e000      	b.n	80030f2 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	0018      	movs	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	b004      	add	sp, #16
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	46c0      	nop			; (mov r8, r8)
 80030fc:	40022000 	.word	0x40022000

08003100 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b082      	sub	sp, #8
 8003104:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800310a:	4b13      	ldr	r3, [pc, #76]	; (8003158 <FLASH_SetErrorCode+0x58>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	2210      	movs	r2, #16
 8003110:	4013      	ands	r3, r2
 8003112:	2b10      	cmp	r3, #16
 8003114:	d109      	bne.n	800312a <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003116:	4b11      	ldr	r3, [pc, #68]	; (800315c <FLASH_SetErrorCode+0x5c>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	2202      	movs	r2, #2
 800311c:	431a      	orrs	r2, r3
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <FLASH_SetErrorCode+0x5c>)
 8003120:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2210      	movs	r2, #16
 8003126:	4313      	orrs	r3, r2
 8003128:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <FLASH_SetErrorCode+0x58>)
 800312c:	68db      	ldr	r3, [r3, #12]
 800312e:	2204      	movs	r2, #4
 8003130:	4013      	ands	r3, r2
 8003132:	2b04      	cmp	r3, #4
 8003134:	d109      	bne.n	800314a <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8003136:	4b09      	ldr	r3, [pc, #36]	; (800315c <FLASH_SetErrorCode+0x5c>)
 8003138:	69db      	ldr	r3, [r3, #28]
 800313a:	2201      	movs	r2, #1
 800313c:	431a      	orrs	r2, r3
 800313e:	4b07      	ldr	r3, [pc, #28]	; (800315c <FLASH_SetErrorCode+0x5c>)
 8003140:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2204      	movs	r2, #4
 8003146:	4313      	orrs	r3, r2
 8003148:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800314a:	4b03      	ldr	r3, [pc, #12]	; (8003158 <FLASH_SetErrorCode+0x58>)
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	60da      	str	r2, [r3, #12]
}  
 8003150:	46c0      	nop			; (mov r8, r8)
 8003152:	46bd      	mov	sp, r7
 8003154:	b002      	add	sp, #8
 8003156:	bd80      	pop	{r7, pc}
 8003158:	40022000 	.word	0x40022000
 800315c:	200000d0 	.word	0x200000d0

08003160 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b085      	sub	sp, #20
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800316a:	230f      	movs	r3, #15
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	2201      	movs	r2, #1
 8003170:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003176:	4b33      	ldr	r3, [pc, #204]	; (8003244 <HAL_FLASHEx_Erase+0xe4>)
 8003178:	7e1b      	ldrb	r3, [r3, #24]
 800317a:	2b01      	cmp	r3, #1
 800317c:	d101      	bne.n	8003182 <HAL_FLASHEx_Erase+0x22>
 800317e:	2302      	movs	r3, #2
 8003180:	e05b      	b.n	800323a <HAL_FLASHEx_Erase+0xda>
 8003182:	4b30      	ldr	r3, [pc, #192]	; (8003244 <HAL_FLASHEx_Erase+0xe4>)
 8003184:	2201      	movs	r2, #1
 8003186:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d116      	bne.n	80031be <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003190:	4b2d      	ldr	r3, [pc, #180]	; (8003248 <HAL_FLASHEx_Erase+0xe8>)
 8003192:	0018      	movs	r0, r3
 8003194:	f7ff ff74 	bl	8003080 <FLASH_WaitForLastOperation>
 8003198:	1e03      	subs	r3, r0, #0
 800319a:	d148      	bne.n	800322e <HAL_FLASHEx_Erase+0xce>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 800319c:	f000 f9bc 	bl	8003518 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031a0:	230f      	movs	r3, #15
 80031a2:	18fc      	adds	r4, r7, r3
 80031a4:	4b28      	ldr	r3, [pc, #160]	; (8003248 <HAL_FLASHEx_Erase+0xe8>)
 80031a6:	0018      	movs	r0, r3
 80031a8:	f7ff ff6a 	bl	8003080 <FLASH_WaitForLastOperation>
 80031ac:	0003      	movs	r3, r0
 80031ae:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80031b0:	4b26      	ldr	r3, [pc, #152]	; (800324c <HAL_FLASHEx_Erase+0xec>)
 80031b2:	4a26      	ldr	r2, [pc, #152]	; (800324c <HAL_FLASHEx_Erase+0xec>)
 80031b4:	6912      	ldr	r2, [r2, #16]
 80031b6:	2104      	movs	r1, #4
 80031b8:	438a      	bics	r2, r1
 80031ba:	611a      	str	r2, [r3, #16]
 80031bc:	e037      	b.n	800322e <HAL_FLASHEx_Erase+0xce>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80031be:	4b22      	ldr	r3, [pc, #136]	; (8003248 <HAL_FLASHEx_Erase+0xe8>)
 80031c0:	0018      	movs	r0, r3
 80031c2:	f7ff ff5d 	bl	8003080 <FLASH_WaitForLastOperation>
 80031c6:	1e03      	subs	r3, r0, #0
 80031c8:	d131      	bne.n	800322e <HAL_FLASHEx_Erase+0xce>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2201      	movs	r2, #1
 80031ce:	4252      	negs	r2, r2
 80031d0:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	e020      	b.n	800321c <HAL_FLASHEx_Erase+0xbc>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 80031da:	68bb      	ldr	r3, [r7, #8]
 80031dc:	0018      	movs	r0, r3
 80031de:	f000 fc91 	bl	8003b04 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80031e2:	230f      	movs	r3, #15
 80031e4:	18fc      	adds	r4, r7, r3
 80031e6:	4b18      	ldr	r3, [pc, #96]	; (8003248 <HAL_FLASHEx_Erase+0xe8>)
 80031e8:	0018      	movs	r0, r3
 80031ea:	f7ff ff49 	bl	8003080 <FLASH_WaitForLastOperation>
 80031ee:	0003      	movs	r3, r0
 80031f0:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80031f2:	4b16      	ldr	r3, [pc, #88]	; (800324c <HAL_FLASHEx_Erase+0xec>)
 80031f4:	4a15      	ldr	r2, [pc, #84]	; (800324c <HAL_FLASHEx_Erase+0xec>)
 80031f6:	6912      	ldr	r2, [r2, #16]
 80031f8:	2102      	movs	r1, #2
 80031fa:	438a      	bics	r2, r1
 80031fc:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80031fe:	230f      	movs	r3, #15
 8003200:	18fb      	adds	r3, r7, r3
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_FLASHEx_Erase+0xb0>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	601a      	str	r2, [r3, #0]
            break;
 800320e:	e00e      	b.n	800322e <HAL_FLASHEx_Erase+0xce>
            address += FLASH_PAGE_SIZE)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	2280      	movs	r2, #128	; 0x80
 8003214:	0112      	lsls	r2, r2, #4
 8003216:	4694      	mov	ip, r2
 8003218:	4463      	add	r3, ip
 800321a:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	02da      	lsls	r2, r3, #11
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	18d2      	adds	r2, r2, r3
        for(address = pEraseInit->PageAddress;
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	429a      	cmp	r2, r3
 800322c:	d8d5      	bhi.n	80031da <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_FLASHEx_Erase+0xe4>)
 8003230:	2200      	movs	r2, #0
 8003232:	761a      	strb	r2, [r3, #24]

  return status;
 8003234:	230f      	movs	r3, #15
 8003236:	18fb      	adds	r3, r7, r3
 8003238:	781b      	ldrb	r3, [r3, #0]
}
 800323a:	0018      	movs	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	b005      	add	sp, #20
 8003240:	bd90      	pop	{r4, r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	200000d0 	.word	0x200000d0
 8003248:	0000c350 	.word	0x0000c350
 800324c:	40022000 	.word	0x40022000

08003250 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003258:	230f      	movs	r3, #15
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <HAL_FLASHEx_Erase_IT+0x80>)
 8003262:	7e1b      	ldrb	r3, [r3, #24]
 8003264:	2b01      	cmp	r3, #1
 8003266:	d101      	bne.n	800326c <HAL_FLASHEx_Erase_IT+0x1c>
 8003268:	2302      	movs	r3, #2
 800326a:	e02d      	b.n	80032c8 <HAL_FLASHEx_Erase_IT+0x78>
 800326c:	4b18      	ldr	r3, [pc, #96]	; (80032d0 <HAL_FLASHEx_Erase_IT+0x80>)
 800326e:	2201      	movs	r2, #1
 8003270:	761a      	strb	r2, [r3, #24]

  /* If procedure already ongoing, reject the next one */
  if (pFlash.ProcedureOnGoing != FLASH_PROC_NONE)
 8003272:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <HAL_FLASHEx_Erase_IT+0x80>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	b2db      	uxtb	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d001      	beq.n	8003280 <HAL_FLASHEx_Erase_IT+0x30>
  {
    return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e023      	b.n	80032c8 <HAL_FLASHEx_Erase_IT+0x78>
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation and Error source interrupts */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_ERR);
 8003280:	4b14      	ldr	r3, [pc, #80]	; (80032d4 <HAL_FLASHEx_Erase_IT+0x84>)
 8003282:	4a14      	ldr	r2, [pc, #80]	; (80032d4 <HAL_FLASHEx_Erase_IT+0x84>)
 8003284:	6912      	ldr	r2, [r2, #16]
 8003286:	21a0      	movs	r1, #160	; 0xa0
 8003288:	0149      	lsls	r1, r1, #5
 800328a:	430a      	orrs	r2, r1
 800328c:	611a      	str	r2, [r3, #16]

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d105      	bne.n	80032a2 <HAL_FLASHEx_Erase_IT+0x52>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 8003296:	4b0e      	ldr	r3, [pc, #56]	; (80032d0 <HAL_FLASHEx_Erase_IT+0x80>)
 8003298:	2202      	movs	r2, #2
 800329a:	701a      	strb	r2, [r3, #0]
        FLASH_MassErase();
 800329c:	f000 f93c 	bl	8003518 <FLASH_MassErase>
 80032a0:	e00f      	b.n	80032c2 <HAL_FLASHEx_Erase_IT+0x72>

    /* Check the parameters */
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));

    pFlash.ProcedureOnGoing = FLASH_PROC_PAGEERASE;
 80032a2:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <HAL_FLASHEx_Erase_IT+0x80>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	701a      	strb	r2, [r3, #0]
    pFlash.DataRemaining = pEraseInit->NbPages;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <HAL_FLASHEx_Erase_IT+0x80>)
 80032ae:	605a      	str	r2, [r3, #4]
    pFlash.Address = pEraseInit->PageAddress;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_FLASHEx_Erase_IT+0x80>)
 80032b6:	609a      	str	r2, [r3, #8]

    /*Erase 1st page and wait for IT*/
    FLASH_PageErase(pEraseInit->PageAddress);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	0018      	movs	r0, r3
 80032be:	f000 fc21 	bl	8003b04 <FLASH_PageErase>
  }

  return status;
 80032c2:	230f      	movs	r3, #15
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	781b      	ldrb	r3, [r3, #0]
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b004      	add	sp, #16
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	200000d0 	.word	0x200000d0
 80032d4:	40022000 	.word	0x40022000

080032d8 <HAL_FLASHEx_OBErase>:
  *         (system reset will occur)
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_FLASHEx_OBErase(void)
{
 80032d8:	b590      	push	{r4, r7, lr}
 80032da:	b083      	sub	sp, #12
 80032dc:	af00      	add	r7, sp, #0
  uint8_t rdptmp = OB_RDP_LEVEL_0;
 80032de:	1dbb      	adds	r3, r7, #6
 80032e0:	22aa      	movs	r2, #170	; 0xaa
 80032e2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80032e4:	1dfb      	adds	r3, r7, #7
 80032e6:	2201      	movs	r2, #1
 80032e8:	701a      	strb	r2, [r3, #0]

  /* Get the actual read protection Option Byte value */
  rdptmp = FLASH_OB_GetRDP();
 80032ea:	f000 fbe3 	bl	8003ab4 <FLASH_OB_GetRDP>
 80032ee:	0002      	movs	r2, r0
 80032f0:	1dbb      	adds	r3, r7, #6
 80032f2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80032f4:	1dfc      	adds	r4, r7, #7
 80032f6:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <HAL_FLASHEx_OBErase+0x90>)
 80032f8:	0018      	movs	r0, r3
 80032fa:	f7ff fec1 	bl	8003080 <FLASH_WaitForLastOperation>
 80032fe:	0003      	movs	r3, r0
 8003300:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 8003302:	1dfb      	adds	r3, r7, #7
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d127      	bne.n	800335a <HAL_FLASHEx_OBErase+0x82>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800330a:	4b18      	ldr	r3, [pc, #96]	; (800336c <HAL_FLASHEx_OBErase+0x94>)
 800330c:	2200      	movs	r2, #0
 800330e:	61da      	str	r2, [r3, #28]

    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8003310:	4b17      	ldr	r3, [pc, #92]	; (8003370 <HAL_FLASHEx_OBErase+0x98>)
 8003312:	4a17      	ldr	r2, [pc, #92]	; (8003370 <HAL_FLASHEx_OBErase+0x98>)
 8003314:	6912      	ldr	r2, [r2, #16]
 8003316:	2120      	movs	r1, #32
 8003318:	430a      	orrs	r2, r1
 800331a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800331c:	4b14      	ldr	r3, [pc, #80]	; (8003370 <HAL_FLASHEx_OBErase+0x98>)
 800331e:	4a14      	ldr	r2, [pc, #80]	; (8003370 <HAL_FLASHEx_OBErase+0x98>)
 8003320:	6912      	ldr	r2, [r2, #16]
 8003322:	2140      	movs	r1, #64	; 0x40
 8003324:	430a      	orrs	r2, r1
 8003326:	611a      	str	r2, [r3, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003328:	1dfc      	adds	r4, r7, #7
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_FLASHEx_OBErase+0x90>)
 800332c:	0018      	movs	r0, r3
 800332e:	f7ff fea7 	bl	8003080 <FLASH_WaitForLastOperation>
 8003332:	0003      	movs	r3, r0
 8003334:	7023      	strb	r3, [r4, #0]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8003336:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <HAL_FLASHEx_OBErase+0x98>)
 8003338:	4a0d      	ldr	r2, [pc, #52]	; (8003370 <HAL_FLASHEx_OBErase+0x98>)
 800333a:	6912      	ldr	r2, [r2, #16]
 800333c:	2120      	movs	r1, #32
 800333e:	438a      	bics	r2, r1
 8003340:	611a      	str	r2, [r3, #16]

    if(status == HAL_OK)
 8003342:	1dfb      	adds	r3, r7, #7
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d107      	bne.n	800335a <HAL_FLASHEx_OBErase+0x82>
    {
      /* Restore the last read protection Option Byte value */
      status = FLASH_OB_RDP_LevelConfig(rdptmp);
 800334a:	1dfc      	adds	r4, r7, #7
 800334c:	1dbb      	adds	r3, r7, #6
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	0018      	movs	r0, r3
 8003352:	f000 fabf 	bl	80038d4 <FLASH_OB_RDP_LevelConfig>
 8003356:	0003      	movs	r3, r0
 8003358:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Return the erase status */
  return status;
 800335a:	1dfb      	adds	r3, r7, #7
 800335c:	781b      	ldrb	r3, [r3, #0]
}
 800335e:	0018      	movs	r0, r3
 8003360:	46bd      	mov	sp, r7
 8003362:	b003      	add	sp, #12
 8003364:	bd90      	pop	{r4, r7, pc}
 8003366:	46c0      	nop			; (mov r8, r8)
 8003368:	0000c350 	.word	0x0000c350
 800336c:	200000d0 	.word	0x200000d0
 8003370:	40022000 	.word	0x40022000

08003374 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8003374:	b590      	push	{r4, r7, lr}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800337c:	230f      	movs	r3, #15
 800337e:	18fb      	adds	r3, r7, r3
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003384:	4b45      	ldr	r3, [pc, #276]	; (800349c <HAL_FLASHEx_OBProgram+0x128>)
 8003386:	7e1b      	ldrb	r3, [r3, #24]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d101      	bne.n	8003390 <HAL_FLASHEx_OBProgram+0x1c>
 800338c:	2302      	movs	r3, #2
 800338e:	e081      	b.n	8003494 <HAL_FLASHEx_OBProgram+0x120>
 8003390:	4b42      	ldr	r3, [pc, #264]	; (800349c <HAL_FLASHEx_OBProgram+0x128>)
 8003392:	2201      	movs	r2, #1
 8003394:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) == OPTIONBYTE_WRP)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2201      	movs	r2, #1
 800339c:	4013      	ands	r3, r2
 800339e:	d022      	beq.n	80033e6 <HAL_FLASHEx_OBProgram+0x72>
  {
    assert_param(IS_WRPSTATE(pOBInit->WRPState));
    if (pOBInit->WRPState == OB_WRPSTATE_ENABLE)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d109      	bne.n	80033bc <HAL_FLASHEx_OBProgram+0x48>
    {
      /* Enable of Write protection on the selected page */
      status = FLASH_OB_EnableWRP(pOBInit->WRPPage);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	220f      	movs	r2, #15
 80033ae:	18bc      	adds	r4, r7, r2
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 f8c9 	bl	8003548 <FLASH_OB_EnableWRP>
 80033b6:	0003      	movs	r3, r0
 80033b8:	7023      	strb	r3, [r4, #0]
 80033ba:	e008      	b.n	80033ce <HAL_FLASHEx_OBProgram+0x5a>
    }
    else
    {
      /* Disable of Write protection on the selected page */
      status = FLASH_OB_DisableWRP(pOBInit->WRPPage);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	220f      	movs	r2, #15
 80033c2:	18bc      	adds	r4, r7, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 f9a3 	bl	8003710 <FLASH_OB_DisableWRP>
 80033ca:	0003      	movs	r3, r0
 80033cc:	7023      	strb	r3, [r4, #0]
    }
    if (status != HAL_OK)
 80033ce:	230f      	movs	r3, #15
 80033d0:	18fb      	adds	r3, r7, r3
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d006      	beq.n	80033e6 <HAL_FLASHEx_OBProgram+0x72>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 80033d8:	4b30      	ldr	r3, [pc, #192]	; (800349c <HAL_FLASHEx_OBProgram+0x128>)
 80033da:	2200      	movs	r2, #0
 80033dc:	761a      	strb	r2, [r3, #24]
      return status;
 80033de:	230f      	movs	r3, #15
 80033e0:	18fb      	adds	r3, r7, r3
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	e056      	b.n	8003494 <HAL_FLASHEx_OBProgram+0x120>
    }
  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) == OPTIONBYTE_RDP)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2202      	movs	r2, #2
 80033ec:	4013      	ands	r3, r2
 80033ee:	d014      	beq.n	800341a <HAL_FLASHEx_OBProgram+0xa6>
  {
    status = FLASH_OB_RDP_LevelConfig(pOBInit->RDPLevel);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	7b1b      	ldrb	r3, [r3, #12]
 80033f4:	220f      	movs	r2, #15
 80033f6:	18bc      	adds	r4, r7, r2
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 fa6b 	bl	80038d4 <FLASH_OB_RDP_LevelConfig>
 80033fe:	0003      	movs	r3, r0
 8003400:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 8003402:	230f      	movs	r3, #15
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d006      	beq.n	800341a <HAL_FLASHEx_OBProgram+0xa6>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800340c:	4b23      	ldr	r3, [pc, #140]	; (800349c <HAL_FLASHEx_OBProgram+0x128>)
 800340e:	2200      	movs	r2, #0
 8003410:	761a      	strb	r2, [r3, #24]
      return status;
 8003412:	230f      	movs	r3, #15
 8003414:	18fb      	adds	r3, r7, r3
 8003416:	781b      	ldrb	r3, [r3, #0]
 8003418:	e03c      	b.n	8003494 <HAL_FLASHEx_OBProgram+0x120>
    }
  }

  /* USER configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) == OPTIONBYTE_USER)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2204      	movs	r2, #4
 8003420:	4013      	ands	r3, r2
 8003422:	d014      	beq.n	800344e <HAL_FLASHEx_OBProgram+0xda>
  {
    status = FLASH_OB_UserConfig(pOBInit->USERConfig);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7b5b      	ldrb	r3, [r3, #13]
 8003428:	220f      	movs	r2, #15
 800342a:	18bc      	adds	r4, r7, r2
 800342c:	0018      	movs	r0, r3
 800342e:	f000 fab3 	bl	8003998 <FLASH_OB_UserConfig>
 8003432:	0003      	movs	r3, r0
 8003434:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 8003436:	230f      	movs	r3, #15
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d006      	beq.n	800344e <HAL_FLASHEx_OBProgram+0xda>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 8003440:	4b16      	ldr	r3, [pc, #88]	; (800349c <HAL_FLASHEx_OBProgram+0x128>)
 8003442:	2200      	movs	r2, #0
 8003444:	761a      	strb	r2, [r3, #24]
      return status;
 8003446:	230f      	movs	r3, #15
 8003448:	18fb      	adds	r3, r7, r3
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	e022      	b.n	8003494 <HAL_FLASHEx_OBProgram+0x120>
    }
  }

  /* DATA configuration*/
  if((pOBInit->OptionType & OPTIONBYTE_DATA) == OPTIONBYTE_DATA)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2208      	movs	r2, #8
 8003454:	4013      	ands	r3, r2
 8003456:	d017      	beq.n	8003488 <HAL_FLASHEx_OBProgram+0x114>
  {
    status = FLASH_OB_ProgramData(pOBInit->DATAAddress, pOBInit->DATAData);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691a      	ldr	r2, [r3, #16]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	7d1b      	ldrb	r3, [r3, #20]
 8003460:	210f      	movs	r1, #15
 8003462:	187c      	adds	r4, r7, r1
 8003464:	0019      	movs	r1, r3
 8003466:	0010      	movs	r0, r2
 8003468:	f000 fad8 	bl	8003a1c <FLASH_OB_ProgramData>
 800346c:	0003      	movs	r3, r0
 800346e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK)
 8003470:	230f      	movs	r3, #15
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d006      	beq.n	8003488 <HAL_FLASHEx_OBProgram+0x114>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(&pFlash);
 800347a:	4b08      	ldr	r3, [pc, #32]	; (800349c <HAL_FLASHEx_OBProgram+0x128>)
 800347c:	2200      	movs	r2, #0
 800347e:	761a      	strb	r2, [r3, #24]
      return status;
 8003480:	230f      	movs	r3, #15
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	e005      	b.n	8003494 <HAL_FLASHEx_OBProgram+0x120>
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003488:	4b04      	ldr	r3, [pc, #16]	; (800349c <HAL_FLASHEx_OBProgram+0x128>)
 800348a:	2200      	movs	r2, #0
 800348c:	761a      	strb	r2, [r3, #24]

  return status;
 800348e:	230f      	movs	r3, #15
 8003490:	18fb      	adds	r3, r7, r3
 8003492:	781b      	ldrb	r3, [r3, #0]
}
 8003494:	0018      	movs	r0, r3
 8003496:	46bd      	mov	sp, r7
 8003498:	b005      	add	sp, #20
 800349a:	bd90      	pop	{r4, r7, pc}
 800349c:	200000d0 	.word	0x200000d0

080034a0 <HAL_FLASHEx_OBGetConfig>:
  *         contains the configuration information for the programming.
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = OPTIONBYTE_WRP | OPTIONBYTE_RDP | OPTIONBYTE_USER;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2207      	movs	r2, #7
 80034ac:	601a      	str	r2, [r3, #0]

  /*Get WRP*/
  pOBInit->WRPPage = FLASH_OB_GetWRP();
 80034ae:	f000 faf7 	bl	8003aa0 <FLASH_OB_GetWRP>
 80034b2:	0002      	movs	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	609a      	str	r2, [r3, #8]

  /*Get RDP Level*/
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 80034b8:	f000 fafc 	bl	8003ab4 <FLASH_OB_GetRDP>
 80034bc:	0003      	movs	r3, r0
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	731a      	strb	r2, [r3, #12]

  /*Get USER*/
  pOBInit->USERConfig = FLASH_OB_GetUser();
 80034c4:	f000 fb12 	bl	8003aec <FLASH_OB_GetUser>
 80034c8:	0003      	movs	r3, r0
 80034ca:	001a      	movs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	735a      	strb	r2, [r3, #13]
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_FLASHEx_OBGetUserData>:
  *            @arg @ref OB_DATA_ADDRESS_DATA0
  *            @arg @ref OB_DATA_ADDRESS_DATA1
  * @retval Value programmed in USER data
  */
uint32_t HAL_FLASHEx_OBGetUserData(uint32_t DATAAdress)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t value = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	60fb      	str	r3, [r7, #12]
  
  if (DATAAdress == OB_DATA_ADDRESS_DATA0)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	4a0a      	ldr	r2, [pc, #40]	; (8003510 <HAL_FLASHEx_OBGetUserData+0x38>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d106      	bne.n	80034fa <HAL_FLASHEx_OBGetUserData+0x22>
  {
    /* Get value programmed in OB USER Data0 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA0) >> FLASH_POSITION_OB_USERDATA0_BIT;
 80034ec:	4b09      	ldr	r3, [pc, #36]	; (8003514 <HAL_FLASHEx_OBGetUserData+0x3c>)
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	0c1b      	lsrs	r3, r3, #16
 80034f2:	22ff      	movs	r2, #255	; 0xff
 80034f4:	4013      	ands	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	e005      	b.n	8003506 <HAL_FLASHEx_OBGetUserData+0x2e>
  }
  else
  {
    /* Get value programmed in OB USER Data1 */
    value = READ_BIT(FLASH->OBR, FLASH_OBR_DATA1) >> FLASH_POSITION_OB_USERDATA1_BIT;
 80034fa:	4b06      	ldr	r3, [pc, #24]	; (8003514 <HAL_FLASHEx_OBGetUserData+0x3c>)
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	0e1b      	lsrs	r3, r3, #24
 8003500:	22ff      	movs	r2, #255	; 0xff
 8003502:	4013      	ands	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }
  
  return value;
 8003506:	68fb      	ldr	r3, [r7, #12]
}
 8003508:	0018      	movs	r0, r3
 800350a:	46bd      	mov	sp, r7
 800350c:	b004      	add	sp, #16
 800350e:	bd80      	pop	{r7, pc}
 8003510:	1ffff804 	.word	0x1ffff804
 8003514:	40022000 	.word	0x40022000

08003518 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800351c:	4b08      	ldr	r3, [pc, #32]	; (8003540 <FLASH_MassErase+0x28>)
 800351e:	2200      	movs	r2, #0
 8003520:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8003522:	4b08      	ldr	r3, [pc, #32]	; (8003544 <FLASH_MassErase+0x2c>)
 8003524:	4a07      	ldr	r2, [pc, #28]	; (8003544 <FLASH_MassErase+0x2c>)
 8003526:	6912      	ldr	r2, [r2, #16]
 8003528:	2104      	movs	r1, #4
 800352a:	430a      	orrs	r2, r1
 800352c:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800352e:	4b05      	ldr	r3, [pc, #20]	; (8003544 <FLASH_MassErase+0x2c>)
 8003530:	4a04      	ldr	r2, [pc, #16]	; (8003544 <FLASH_MassErase+0x2c>)
 8003532:	6912      	ldr	r2, [r2, #16]
 8003534:	2140      	movs	r1, #64	; 0x40
 8003536:	430a      	orrs	r2, r1
 8003538:	611a      	str	r2, [r3, #16]
}
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	200000d0 	.word	0x200000d0
 8003544:	40022000 	.word	0x40022000

08003548 <FLASH_OB_EnableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write protected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_EnableWRP(uint32_t WriteProtectPage)
{
 8003548:	b590      	push	{r4, r7, lr}
 800354a:	b087      	sub	sp, #28
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003550:	2317      	movs	r3, #23
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
  uint16_t WRP0_Data = 0xFFFFU;
 8003558:	2314      	movs	r3, #20
 800355a:	18fb      	adds	r3, r7, r3
 800355c:	2201      	movs	r2, #1
 800355e:	4252      	negs	r2, r2
 8003560:	801a      	strh	r2, [r3, #0]
#if defined(OB_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFFU;
 8003562:	2312      	movs	r3, #18
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	2201      	movs	r2, #1
 8003568:	4252      	negs	r2, r2
 800356a:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP1_WRP1 */
#if defined(OB_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFFU;
 800356c:	2310      	movs	r3, #16
 800356e:	18fb      	adds	r3, r7, r3
 8003570:	2201      	movs	r2, #1
 8003572:	4252      	negs	r2, r2
 8003574:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP2_WRP2 */
#if defined(OB_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFFU;
 8003576:	230e      	movs	r3, #14
 8003578:	18fb      	adds	r3, r7, r3
 800357a:	2201      	movs	r2, #1
 800357c:	4252      	negs	r2, r2
 800357e:	801a      	strh	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));
    
  /* Get current write protected pages and the new pages to be protected ******/
  WriteProtectPage = (uint32_t)(~((~FLASH_OB_GetWRP()) | WriteProtectPage));
 8003580:	f000 fa8e 	bl	8003aa0 <FLASH_OB_GetWRP>
 8003584:	0003      	movs	r3, r0
 8003586:	43da      	mvns	r2, r3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4313      	orrs	r3, r2
 800358c:	43db      	mvns	r3, r3
 800358e:	607b      	str	r3, [r7, #4]
  
#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	b29a      	uxth	r2, r3
 8003594:	2314      	movs	r3, #20
 8003596:	18fb      	adds	r3, r7, r3
 8003598:	21ff      	movs	r1, #255	; 0xff
 800359a:	400a      	ands	r2, r1
 800359c:	801a      	strh	r2, [r3, #0]
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0a1b      	lsrs	r3, r3, #8
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	2312      	movs	r3, #18
 80035a6:	18fb      	adds	r3, r7, r3
 80035a8:	21ff      	movs	r1, #255	; 0xff
 80035aa:	400a      	ands	r2, r1
 80035ac:	801a      	strh	r2, [r3, #0]
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	0c1b      	lsrs	r3, r3, #16
 80035b2:	b29a      	uxth	r2, r3
 80035b4:	2310      	movs	r3, #16
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	21ff      	movs	r1, #255	; 0xff
 80035ba:	400a      	ands	r2, r1
 80035bc:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES48TO63MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO63MASK) >> 24U); 
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	0e1a      	lsrs	r2, r3, #24
 80035c2:	230e      	movs	r3, #14
 80035c4:	18fb      	adds	r3, r7, r3
 80035c6:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP_PAGES48TO63MASK */
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80035c8:	2317      	movs	r3, #23
 80035ca:	18fc      	adds	r4, r7, r3
 80035cc:	4b4c      	ldr	r3, [pc, #304]	; (8003700 <FLASH_OB_EnableWRP+0x1b8>)
 80035ce:	0018      	movs	r0, r3
 80035d0:	f7ff fd56 	bl	8003080 <FLASH_WaitForLastOperation>
 80035d4:	0003      	movs	r3, r0
 80035d6:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 80035d8:	2317      	movs	r3, #23
 80035da:	18fb      	adds	r3, r7, r3
 80035dc:	781b      	ldrb	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d000      	beq.n	80035e4 <FLASH_OB_EnableWRP+0x9c>
 80035e2:	e085      	b.n	80036f0 <FLASH_OB_EnableWRP+0x1a8>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80035e4:	4b47      	ldr	r3, [pc, #284]	; (8003704 <FLASH_OB_EnableWRP+0x1bc>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 80035ea:	2317      	movs	r3, #23
 80035ec:	18fc      	adds	r4, r7, r3
 80035ee:	f7ff fe73 	bl	80032d8 <HAL_FLASHEx_OBErase>
 80035f2:	0003      	movs	r3, r0
 80035f4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)  
 80035f6:	2317      	movs	r3, #23
 80035f8:	18fb      	adds	r3, r7, r3
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d000      	beq.n	8003602 <FLASH_OB_EnableWRP+0xba>
 8003600:	e076      	b.n	80036f0 <FLASH_OB_EnableWRP+0x1a8>
    {
      /* Enable write protection */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8003602:	4b41      	ldr	r3, [pc, #260]	; (8003708 <FLASH_OB_EnableWRP+0x1c0>)
 8003604:	4a40      	ldr	r2, [pc, #256]	; (8003708 <FLASH_OB_EnableWRP+0x1c0>)
 8003606:	6912      	ldr	r2, [r2, #16]
 8003608:	2110      	movs	r1, #16
 800360a:	430a      	orrs	r2, r1
 800360c:	611a      	str	r2, [r3, #16]

#if defined(OB_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 800360e:	2314      	movs	r3, #20
 8003610:	18fb      	adds	r3, r7, r3
 8003612:	881b      	ldrh	r3, [r3, #0]
 8003614:	2bff      	cmp	r3, #255	; 0xff
 8003616:	d011      	beq.n	800363c <FLASH_OB_EnableWRP+0xf4>
      {
        OB->WRP0 &= WRP0_Data;
 8003618:	493c      	ldr	r1, [pc, #240]	; (800370c <FLASH_OB_EnableWRP+0x1c4>)
 800361a:	4b3c      	ldr	r3, [pc, #240]	; (800370c <FLASH_OB_EnableWRP+0x1c4>)
 800361c:	891b      	ldrh	r3, [r3, #8]
 800361e:	b29b      	uxth	r3, r3
 8003620:	2214      	movs	r2, #20
 8003622:	18ba      	adds	r2, r7, r2
 8003624:	8812      	ldrh	r2, [r2, #0]
 8003626:	4013      	ands	r3, r2
 8003628:	b29b      	uxth	r3, r3
 800362a:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800362c:	2317      	movs	r3, #23
 800362e:	18fc      	adds	r4, r7, r3
 8003630:	4b33      	ldr	r3, [pc, #204]	; (8003700 <FLASH_OB_EnableWRP+0x1b8>)
 8003632:	0018      	movs	r0, r3
 8003634:	f7ff fd24 	bl	8003080 <FLASH_WaitForLastOperation>
 8003638:	0003      	movs	r3, r0
 800363a:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP0_WRP0 */

#if defined(OB_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 800363c:	2317      	movs	r3, #23
 800363e:	18fb      	adds	r3, r7, r3
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d116      	bne.n	8003674 <FLASH_OB_EnableWRP+0x12c>
 8003646:	2312      	movs	r3, #18
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	881b      	ldrh	r3, [r3, #0]
 800364c:	2bff      	cmp	r3, #255	; 0xff
 800364e:	d011      	beq.n	8003674 <FLASH_OB_EnableWRP+0x12c>
      {
        OB->WRP1 &= WRP1_Data;
 8003650:	492e      	ldr	r1, [pc, #184]	; (800370c <FLASH_OB_EnableWRP+0x1c4>)
 8003652:	4b2e      	ldr	r3, [pc, #184]	; (800370c <FLASH_OB_EnableWRP+0x1c4>)
 8003654:	895b      	ldrh	r3, [r3, #10]
 8003656:	b29b      	uxth	r3, r3
 8003658:	2212      	movs	r2, #18
 800365a:	18ba      	adds	r2, r7, r2
 800365c:	8812      	ldrh	r2, [r2, #0]
 800365e:	4013      	ands	r3, r2
 8003660:	b29b      	uxth	r3, r3
 8003662:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003664:	2317      	movs	r3, #23
 8003666:	18fc      	adds	r4, r7, r3
 8003668:	4b25      	ldr	r3, [pc, #148]	; (8003700 <FLASH_OB_EnableWRP+0x1b8>)
 800366a:	0018      	movs	r0, r3
 800366c:	f7ff fd08 	bl	8003080 <FLASH_WaitForLastOperation>
 8003670:	0003      	movs	r3, r0
 8003672:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP1_WRP1 */

#if defined(OB_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8003674:	2317      	movs	r3, #23
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d116      	bne.n	80036ac <FLASH_OB_EnableWRP+0x164>
 800367e:	2310      	movs	r3, #16
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	881b      	ldrh	r3, [r3, #0]
 8003684:	2bff      	cmp	r3, #255	; 0xff
 8003686:	d011      	beq.n	80036ac <FLASH_OB_EnableWRP+0x164>
      {
        OB->WRP2 &= WRP2_Data;
 8003688:	4920      	ldr	r1, [pc, #128]	; (800370c <FLASH_OB_EnableWRP+0x1c4>)
 800368a:	4b20      	ldr	r3, [pc, #128]	; (800370c <FLASH_OB_EnableWRP+0x1c4>)
 800368c:	899b      	ldrh	r3, [r3, #12]
 800368e:	b29b      	uxth	r3, r3
 8003690:	2210      	movs	r2, #16
 8003692:	18ba      	adds	r2, r7, r2
 8003694:	8812      	ldrh	r2, [r2, #0]
 8003696:	4013      	ands	r3, r2
 8003698:	b29b      	uxth	r3, r3
 800369a:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800369c:	2317      	movs	r3, #23
 800369e:	18fc      	adds	r4, r7, r3
 80036a0:	4b17      	ldr	r3, [pc, #92]	; (8003700 <FLASH_OB_EnableWRP+0x1b8>)
 80036a2:	0018      	movs	r0, r3
 80036a4:	f7ff fcec 	bl	8003080 <FLASH_WaitForLastOperation>
 80036a8:	0003      	movs	r3, r0
 80036aa:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP2_WRP2 */

#if defined(OB_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 80036ac:	2317      	movs	r3, #23
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	781b      	ldrb	r3, [r3, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d116      	bne.n	80036e4 <FLASH_OB_EnableWRP+0x19c>
 80036b6:	230e      	movs	r3, #14
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	881b      	ldrh	r3, [r3, #0]
 80036bc:	2bff      	cmp	r3, #255	; 0xff
 80036be:	d011      	beq.n	80036e4 <FLASH_OB_EnableWRP+0x19c>
      {
        OB->WRP3 &= WRP3_Data;
 80036c0:	4912      	ldr	r1, [pc, #72]	; (800370c <FLASH_OB_EnableWRP+0x1c4>)
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <FLASH_OB_EnableWRP+0x1c4>)
 80036c4:	89db      	ldrh	r3, [r3, #14]
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	220e      	movs	r2, #14
 80036ca:	18ba      	adds	r2, r7, r2
 80036cc:	8812      	ldrh	r2, [r2, #0]
 80036ce:	4013      	ands	r3, r2
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80036d4:	2317      	movs	r3, #23
 80036d6:	18fc      	adds	r4, r7, r3
 80036d8:	4b09      	ldr	r3, [pc, #36]	; (8003700 <FLASH_OB_EnableWRP+0x1b8>)
 80036da:	0018      	movs	r0, r3
 80036dc:	f7ff fcd0 	bl	8003080 <FLASH_WaitForLastOperation>
 80036e0:	0003      	movs	r3, r0
 80036e2:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80036e4:	4b08      	ldr	r3, [pc, #32]	; (8003708 <FLASH_OB_EnableWRP+0x1c0>)
 80036e6:	4a08      	ldr	r2, [pc, #32]	; (8003708 <FLASH_OB_EnableWRP+0x1c0>)
 80036e8:	6912      	ldr	r2, [r2, #16]
 80036ea:	2110      	movs	r1, #16
 80036ec:	438a      	bics	r2, r1
 80036ee:	611a      	str	r2, [r3, #16]
    }
  }
  
  return status;
 80036f0:	2317      	movs	r3, #23
 80036f2:	18fb      	adds	r3, r7, r3
 80036f4:	781b      	ldrb	r3, [r3, #0]
}
 80036f6:	0018      	movs	r0, r3
 80036f8:	46bd      	mov	sp, r7
 80036fa:	b007      	add	sp, #28
 80036fc:	bd90      	pop	{r4, r7, pc}
 80036fe:	46c0      	nop			; (mov r8, r8)
 8003700:	0000c350 	.word	0x0000c350
 8003704:	200000d0 	.word	0x200000d0
 8003708:	40022000 	.word	0x40022000
 800370c:	1ffff800 	.word	0x1ffff800

08003710 <FLASH_OB_DisableWRP>:
  * @param  WriteProtectPage specifies the page(s) to be write unprotected.
  *         The value of this parameter depend on device used within the same series 
  * @retval HAL status 
  */
static HAL_StatusTypeDef FLASH_OB_DisableWRP(uint32_t WriteProtectPage)
{
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003718:	2317      	movs	r3, #23
 800371a:	18fb      	adds	r3, r7, r3
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
  uint16_t WRP0_Data = 0xFFFFU;
 8003720:	2314      	movs	r3, #20
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	2201      	movs	r2, #1
 8003726:	4252      	negs	r2, r2
 8003728:	801a      	strh	r2, [r3, #0]
#if defined(OB_WRP1_WRP1)
  uint16_t WRP1_Data = 0xFFFFU;
 800372a:	2312      	movs	r3, #18
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	2201      	movs	r2, #1
 8003730:	4252      	negs	r2, r2
 8003732:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP1_WRP1 */
#if defined(OB_WRP2_WRP2)
  uint16_t WRP2_Data = 0xFFFFU;
 8003734:	2310      	movs	r3, #16
 8003736:	18fb      	adds	r3, r7, r3
 8003738:	2201      	movs	r2, #1
 800373a:	4252      	negs	r2, r2
 800373c:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP2_WRP2 */
#if defined(OB_WRP3_WRP3)
  uint16_t WRP3_Data = 0xFFFFU;
 800373e:	230e      	movs	r3, #14
 8003740:	18fb      	adds	r3, r7, r3
 8003742:	2201      	movs	r2, #1
 8003744:	4252      	negs	r2, r2
 8003746:	801a      	strh	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_WRP(WriteProtectPage));

  /* Get current write protected pages and the new pages to be unprotected ******/
  WriteProtectPage = (FLASH_OB_GetWRP() | WriteProtectPage);
 8003748:	f000 f9aa 	bl	8003aa0 <FLASH_OB_GetWRP>
 800374c:	0002      	movs	r2, r0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	4313      	orrs	r3, r2
 8003752:	607b      	str	r3, [r7, #4]

#if defined(OB_WRP_PAGES0TO15MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO15MASK);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	b29a      	uxth	r2, r3
 8003758:	2314      	movs	r3, #20
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	21ff      	movs	r1, #255	; 0xff
 800375e:	400a      	ands	r2, r1
 8003760:	801a      	strh	r2, [r3, #0]
#elif defined(OB_WRP_PAGES0TO31MASK)
  WRP0_Data = (uint16_t)(WriteProtectPage & OB_WRP_PAGES0TO31MASK);
#endif /* OB_WRP_PAGES0TO31MASK */
  
#if defined(OB_WRP_PAGES16TO31MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES16TO31MASK) >> 8U);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	0a1b      	lsrs	r3, r3, #8
 8003766:	b29a      	uxth	r2, r3
 8003768:	2312      	movs	r3, #18
 800376a:	18fb      	adds	r3, r7, r3
 800376c:	21ff      	movs	r1, #255	; 0xff
 800376e:	400a      	ands	r2, r1
 8003770:	801a      	strh	r2, [r3, #0]
#elif defined(OB_WRP_PAGES32TO63MASK)
  WRP1_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO63MASK) >> 8U);
#endif /* OB_WRP_PAGES32TO63MASK */
 
#if defined(OB_WRP_PAGES32TO47MASK)
  WRP2_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES32TO47MASK) >> 16U);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	b29a      	uxth	r2, r3
 8003778:	2310      	movs	r3, #16
 800377a:	18fb      	adds	r3, r7, r3
 800377c:	21ff      	movs	r1, #255	; 0xff
 800377e:	400a      	ands	r2, r1
 8003780:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP_PAGES32TO47MASK */

#if defined(OB_WRP_PAGES48TO63MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO63MASK) >> 24U); 
#elif defined(OB_WRP_PAGES48TO127MASK)
  WRP3_Data = (uint16_t)((WriteProtectPage & OB_WRP_PAGES48TO127MASK) >> 24U); 
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	0e1a      	lsrs	r2, r3, #24
 8003786:	230e      	movs	r3, #14
 8003788:	18fb      	adds	r3, r7, r3
 800378a:	801a      	strh	r2, [r3, #0]
#endif /* OB_WRP_PAGES48TO63MASK */

    
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800378c:	2317      	movs	r3, #23
 800378e:	18fc      	adds	r4, r7, r3
 8003790:	4b4c      	ldr	r3, [pc, #304]	; (80038c4 <FLASH_OB_DisableWRP+0x1b4>)
 8003792:	0018      	movs	r0, r3
 8003794:	f7ff fc74 	bl	8003080 <FLASH_WaitForLastOperation>
 8003798:	0003      	movs	r3, r0
 800379a:	7023      	strb	r3, [r4, #0]

  if(status == HAL_OK)
 800379c:	2317      	movs	r3, #23
 800379e:	18fb      	adds	r3, r7, r3
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d000      	beq.n	80037a8 <FLASH_OB_DisableWRP+0x98>
 80037a6:	e085      	b.n	80038b4 <FLASH_OB_DisableWRP+0x1a4>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80037a8:	4b47      	ldr	r3, [pc, #284]	; (80038c8 <FLASH_OB_DisableWRP+0x1b8>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	61da      	str	r2, [r3, #28]

    /* To be able to write again option byte, need to perform a option byte erase */
    status = HAL_FLASHEx_OBErase();
 80037ae:	2317      	movs	r3, #23
 80037b0:	18fc      	adds	r4, r7, r3
 80037b2:	f7ff fd91 	bl	80032d8 <HAL_FLASHEx_OBErase>
 80037b6:	0003      	movs	r3, r0
 80037b8:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)  
 80037ba:	2317      	movs	r3, #23
 80037bc:	18fb      	adds	r3, r7, r3
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d000      	beq.n	80037c6 <FLASH_OB_DisableWRP+0xb6>
 80037c4:	e076      	b.n	80038b4 <FLASH_OB_DisableWRP+0x1a4>
    {
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80037c6:	4b41      	ldr	r3, [pc, #260]	; (80038cc <FLASH_OB_DisableWRP+0x1bc>)
 80037c8:	4a40      	ldr	r2, [pc, #256]	; (80038cc <FLASH_OB_DisableWRP+0x1bc>)
 80037ca:	6912      	ldr	r2, [r2, #16]
 80037cc:	2110      	movs	r1, #16
 80037ce:	430a      	orrs	r2, r1
 80037d0:	611a      	str	r2, [r3, #16]

#if defined(OB_WRP0_WRP0)
      if(WRP0_Data != 0xFFU)
 80037d2:	2314      	movs	r3, #20
 80037d4:	18fb      	adds	r3, r7, r3
 80037d6:	881b      	ldrh	r3, [r3, #0]
 80037d8:	2bff      	cmp	r3, #255	; 0xff
 80037da:	d011      	beq.n	8003800 <FLASH_OB_DisableWRP+0xf0>
      {
        OB->WRP0 |= WRP0_Data;
 80037dc:	493c      	ldr	r1, [pc, #240]	; (80038d0 <FLASH_OB_DisableWRP+0x1c0>)
 80037de:	4b3c      	ldr	r3, [pc, #240]	; (80038d0 <FLASH_OB_DisableWRP+0x1c0>)
 80037e0:	891b      	ldrh	r3, [r3, #8]
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	2314      	movs	r3, #20
 80037e6:	18fb      	adds	r3, r7, r3
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	810b      	strh	r3, [r1, #8]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037f0:	2317      	movs	r3, #23
 80037f2:	18fc      	adds	r4, r7, r3
 80037f4:	4b33      	ldr	r3, [pc, #204]	; (80038c4 <FLASH_OB_DisableWRP+0x1b4>)
 80037f6:	0018      	movs	r0, r3
 80037f8:	f7ff fc42 	bl	8003080 <FLASH_WaitForLastOperation>
 80037fc:	0003      	movs	r3, r0
 80037fe:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP0_WRP0 */

#if defined(OB_WRP1_WRP1)
      if((status == HAL_OK) && (WRP1_Data != 0xFFU))
 8003800:	2317      	movs	r3, #23
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d116      	bne.n	8003838 <FLASH_OB_DisableWRP+0x128>
 800380a:	2312      	movs	r3, #18
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	881b      	ldrh	r3, [r3, #0]
 8003810:	2bff      	cmp	r3, #255	; 0xff
 8003812:	d011      	beq.n	8003838 <FLASH_OB_DisableWRP+0x128>
      {
        OB->WRP1 |= WRP1_Data;
 8003814:	492e      	ldr	r1, [pc, #184]	; (80038d0 <FLASH_OB_DisableWRP+0x1c0>)
 8003816:	4b2e      	ldr	r3, [pc, #184]	; (80038d0 <FLASH_OB_DisableWRP+0x1c0>)
 8003818:	895b      	ldrh	r3, [r3, #10]
 800381a:	b29a      	uxth	r2, r3
 800381c:	2312      	movs	r3, #18
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	881b      	ldrh	r3, [r3, #0]
 8003822:	4313      	orrs	r3, r2
 8003824:	b29b      	uxth	r3, r3
 8003826:	814b      	strh	r3, [r1, #10]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003828:	2317      	movs	r3, #23
 800382a:	18fc      	adds	r4, r7, r3
 800382c:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <FLASH_OB_DisableWRP+0x1b4>)
 800382e:	0018      	movs	r0, r3
 8003830:	f7ff fc26 	bl	8003080 <FLASH_WaitForLastOperation>
 8003834:	0003      	movs	r3, r0
 8003836:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP1_WRP1 */

#if defined(OB_WRP2_WRP2)
      if((status == HAL_OK) && (WRP2_Data != 0xFFU))
 8003838:	2317      	movs	r3, #23
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d116      	bne.n	8003870 <FLASH_OB_DisableWRP+0x160>
 8003842:	2310      	movs	r3, #16
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	881b      	ldrh	r3, [r3, #0]
 8003848:	2bff      	cmp	r3, #255	; 0xff
 800384a:	d011      	beq.n	8003870 <FLASH_OB_DisableWRP+0x160>
      {
        OB->WRP2 |= WRP2_Data;
 800384c:	4920      	ldr	r1, [pc, #128]	; (80038d0 <FLASH_OB_DisableWRP+0x1c0>)
 800384e:	4b20      	ldr	r3, [pc, #128]	; (80038d0 <FLASH_OB_DisableWRP+0x1c0>)
 8003850:	899b      	ldrh	r3, [r3, #12]
 8003852:	b29a      	uxth	r2, r3
 8003854:	2310      	movs	r3, #16
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	881b      	ldrh	r3, [r3, #0]
 800385a:	4313      	orrs	r3, r2
 800385c:	b29b      	uxth	r3, r3
 800385e:	818b      	strh	r3, [r1, #12]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003860:	2317      	movs	r3, #23
 8003862:	18fc      	adds	r4, r7, r3
 8003864:	4b17      	ldr	r3, [pc, #92]	; (80038c4 <FLASH_OB_DisableWRP+0x1b4>)
 8003866:	0018      	movs	r0, r3
 8003868:	f7ff fc0a 	bl	8003080 <FLASH_WaitForLastOperation>
 800386c:	0003      	movs	r3, r0
 800386e:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP2_WRP2 */

#if defined(OB_WRP3_WRP3)
      if((status == HAL_OK) && (WRP3_Data != 0xFFU))
 8003870:	2317      	movs	r3, #23
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	781b      	ldrb	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d116      	bne.n	80038a8 <FLASH_OB_DisableWRP+0x198>
 800387a:	230e      	movs	r3, #14
 800387c:	18fb      	adds	r3, r7, r3
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	2bff      	cmp	r3, #255	; 0xff
 8003882:	d011      	beq.n	80038a8 <FLASH_OB_DisableWRP+0x198>
      {
        OB->WRP3 |= WRP3_Data;
 8003884:	4912      	ldr	r1, [pc, #72]	; (80038d0 <FLASH_OB_DisableWRP+0x1c0>)
 8003886:	4b12      	ldr	r3, [pc, #72]	; (80038d0 <FLASH_OB_DisableWRP+0x1c0>)
 8003888:	89db      	ldrh	r3, [r3, #14]
 800388a:	b29a      	uxth	r2, r3
 800388c:	230e      	movs	r3, #14
 800388e:	18fb      	adds	r3, r7, r3
 8003890:	881b      	ldrh	r3, [r3, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	b29b      	uxth	r3, r3
 8003896:	81cb      	strh	r3, [r1, #14]
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003898:	2317      	movs	r3, #23
 800389a:	18fc      	adds	r4, r7, r3
 800389c:	4b09      	ldr	r3, [pc, #36]	; (80038c4 <FLASH_OB_DisableWRP+0x1b4>)
 800389e:	0018      	movs	r0, r3
 80038a0:	f7ff fbee 	bl	8003080 <FLASH_WaitForLastOperation>
 80038a4:	0003      	movs	r3, r0
 80038a6:	7023      	strb	r3, [r4, #0]
      }
#endif /* OB_WRP3_WRP3 */

      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80038a8:	4b08      	ldr	r3, [pc, #32]	; (80038cc <FLASH_OB_DisableWRP+0x1bc>)
 80038aa:	4a08      	ldr	r2, [pc, #32]	; (80038cc <FLASH_OB_DisableWRP+0x1bc>)
 80038ac:	6912      	ldr	r2, [r2, #16]
 80038ae:	2110      	movs	r1, #16
 80038b0:	438a      	bics	r2, r1
 80038b2:	611a      	str	r2, [r3, #16]
    }
  }
  return status;
 80038b4:	2317      	movs	r3, #23
 80038b6:	18fb      	adds	r3, r7, r3
 80038b8:	781b      	ldrb	r3, [r3, #0]
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b007      	add	sp, #28
 80038c0:	bd90      	pop	{r4, r7, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	0000c350 	.word	0x0000c350
 80038c8:	200000d0 	.word	0x200000d0
 80038cc:	40022000 	.word	0x40022000
 80038d0:	1ffff800 	.word	0x1ffff800

080038d4 <FLASH_OB_RDP_LevelConfig>:
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  * @note   Warning: When enabling OB_RDP level 2 it's no more possible to go back to level 1 or 0
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDP_LevelConfig(uint8_t ReadProtectLevel)
{
 80038d4:	b590      	push	{r4, r7, lr}
 80038d6:	b085      	sub	sp, #20
 80038d8:	af00      	add	r7, sp, #0
 80038da:	0002      	movs	r2, r0
 80038dc:	1dfb      	adds	r3, r7, #7
 80038de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038e0:	230f      	movs	r3, #15
 80038e2:	18fb      	adds	r3, r7, r3
 80038e4:	2200      	movs	r2, #0
 80038e6:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(ReadProtectLevel));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80038e8:	230f      	movs	r3, #15
 80038ea:	18fc      	adds	r4, r7, r3
 80038ec:	4b26      	ldr	r3, [pc, #152]	; (8003988 <FLASH_OB_RDP_LevelConfig+0xb4>)
 80038ee:	0018      	movs	r0, r3
 80038f0:	f7ff fbc6 	bl	8003080 <FLASH_WaitForLastOperation>
 80038f4:	0003      	movs	r3, r0
 80038f6:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80038f8:	230f      	movs	r3, #15
 80038fa:	18fb      	adds	r3, r7, r3
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d13a      	bne.n	8003978 <FLASH_OB_RDP_LevelConfig+0xa4>
  { 
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003902:	4b22      	ldr	r3, [pc, #136]	; (800398c <FLASH_OB_RDP_LevelConfig+0xb8>)
 8003904:	2200      	movs	r2, #0
 8003906:	61da      	str	r2, [r3, #28]
    
    /* If the previous operation is completed, proceed to erase the option bytes */
    SET_BIT(FLASH->CR, FLASH_CR_OPTER);
 8003908:	4b21      	ldr	r3, [pc, #132]	; (8003990 <FLASH_OB_RDP_LevelConfig+0xbc>)
 800390a:	4a21      	ldr	r2, [pc, #132]	; (8003990 <FLASH_OB_RDP_LevelConfig+0xbc>)
 800390c:	6912      	ldr	r2, [r2, #16]
 800390e:	2120      	movs	r1, #32
 8003910:	430a      	orrs	r2, r1
 8003912:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003914:	4b1e      	ldr	r3, [pc, #120]	; (8003990 <FLASH_OB_RDP_LevelConfig+0xbc>)
 8003916:	4a1e      	ldr	r2, [pc, #120]	; (8003990 <FLASH_OB_RDP_LevelConfig+0xbc>)
 8003918:	6912      	ldr	r2, [r2, #16]
 800391a:	2140      	movs	r1, #64	; 0x40
 800391c:	430a      	orrs	r2, r1
 800391e:	611a      	str	r2, [r3, #16]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003920:	230f      	movs	r3, #15
 8003922:	18fc      	adds	r4, r7, r3
 8003924:	4b18      	ldr	r3, [pc, #96]	; (8003988 <FLASH_OB_RDP_LevelConfig+0xb4>)
 8003926:	0018      	movs	r0, r3
 8003928:	f7ff fbaa 	bl	8003080 <FLASH_WaitForLastOperation>
 800392c:	0003      	movs	r3, r0
 800392e:	7023      	strb	r3, [r4, #0]

    /* If the erase operation is completed, disable the OPTER Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTER);
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <FLASH_OB_RDP_LevelConfig+0xbc>)
 8003932:	4a17      	ldr	r2, [pc, #92]	; (8003990 <FLASH_OB_RDP_LevelConfig+0xbc>)
 8003934:	6912      	ldr	r2, [r2, #16]
 8003936:	2120      	movs	r1, #32
 8003938:	438a      	bics	r2, r1
 800393a:	611a      	str	r2, [r3, #16]

    if(status == HAL_OK)
 800393c:	230f      	movs	r3, #15
 800393e:	18fb      	adds	r3, r7, r3
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d118      	bne.n	8003978 <FLASH_OB_RDP_LevelConfig+0xa4>
    {
      /* Enable the Option Bytes Programming operation */
      SET_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8003946:	4b12      	ldr	r3, [pc, #72]	; (8003990 <FLASH_OB_RDP_LevelConfig+0xbc>)
 8003948:	4a11      	ldr	r2, [pc, #68]	; (8003990 <FLASH_OB_RDP_LevelConfig+0xbc>)
 800394a:	6912      	ldr	r2, [r2, #16]
 800394c:	2110      	movs	r1, #16
 800394e:	430a      	orrs	r2, r1
 8003950:	611a      	str	r2, [r3, #16]
      
      WRITE_REG(OB->RDP, ReadProtectLevel);
 8003952:	4a10      	ldr	r2, [pc, #64]	; (8003994 <FLASH_OB_RDP_LevelConfig+0xc0>)
 8003954:	1dfb      	adds	r3, r7, #7
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	b29b      	uxth	r3, r3
 800395a:	8013      	strh	r3, [r2, #0]
      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE); 
 800395c:	230f      	movs	r3, #15
 800395e:	18fc      	adds	r4, r7, r3
 8003960:	4b09      	ldr	r3, [pc, #36]	; (8003988 <FLASH_OB_RDP_LevelConfig+0xb4>)
 8003962:	0018      	movs	r0, r3
 8003964:	f7ff fb8c 	bl	8003080 <FLASH_WaitForLastOperation>
 8003968:	0003      	movs	r3, r0
 800396a:	7023      	strb	r3, [r4, #0]
      
      /* if the program operation is completed, disable the OPTPG Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <FLASH_OB_RDP_LevelConfig+0xbc>)
 800396e:	4a08      	ldr	r2, [pc, #32]	; (8003990 <FLASH_OB_RDP_LevelConfig+0xbc>)
 8003970:	6912      	ldr	r2, [r2, #16]
 8003972:	2110      	movs	r1, #16
 8003974:	438a      	bics	r2, r1
 8003976:	611a      	str	r2, [r3, #16]
    }
  }
  
  return status;
 8003978:	230f      	movs	r3, #15
 800397a:	18fb      	adds	r3, r7, r3
 800397c:	781b      	ldrb	r3, [r3, #0]
}
 800397e:	0018      	movs	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	b005      	add	sp, #20
 8003984:	bd90      	pop	{r4, r7, pc}
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	0000c350 	.word	0x0000c350
 800398c:	200000d0 	.word	0x200000d0
 8003990:	40022000 	.word	0x40022000
 8003994:	1ffff800 	.word	0x1ffff800

08003998 <FLASH_OB_UserConfig>:
  *         VDDA_Analog_Monitoring(Bit5) and SRAM_Parity_Enable(Bit6). 
  *         For few devices, following option bytes are available: nBOOT0(Bit3) & BOOT_SEL(Bit7).
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint8_t UserConfig)
{
 8003998:	b590      	push	{r4, r7, lr}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	0002      	movs	r2, r0
 80039a0:	1dfb      	adds	r3, r7, #7
 80039a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039a4:	230f      	movs	r3, #15
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2200      	movs	r2, #0
 80039aa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_OB_BOOT_SEL((UserConfig&OB_BOOT_SEL_SET)));
  assert_param(IS_OB_BOOT0((UserConfig&OB_BOOT0_SET)));
#endif /* FLASH_OBR_BOOT_SEL */

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039ac:	230f      	movs	r3, #15
 80039ae:	18fc      	adds	r4, r7, r3
 80039b0:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <FLASH_OB_UserConfig+0x74>)
 80039b2:	0018      	movs	r0, r3
 80039b4:	f7ff fb64 	bl	8003080 <FLASH_WaitForLastOperation>
 80039b8:	0003      	movs	r3, r0
 80039ba:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 80039bc:	230f      	movs	r3, #15
 80039be:	18fb      	adds	r3, r7, r3
 80039c0:	781b      	ldrb	r3, [r3, #0]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d11b      	bne.n	80039fe <FLASH_OB_UserConfig+0x66>
  {     
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <FLASH_OB_UserConfig+0x78>)
 80039c8:	2200      	movs	r2, #0
 80039ca:	61da      	str	r2, [r3, #28]

    /* Enable the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 80039cc:	4b11      	ldr	r3, [pc, #68]	; (8003a14 <FLASH_OB_UserConfig+0x7c>)
 80039ce:	4a11      	ldr	r2, [pc, #68]	; (8003a14 <FLASH_OB_UserConfig+0x7c>)
 80039d0:	6912      	ldr	r2, [r2, #16]
 80039d2:	2110      	movs	r1, #16
 80039d4:	430a      	orrs	r2, r1
 80039d6:	611a      	str	r2, [r3, #16]
 
#if defined(FLASH_OBR_BOOT_SEL)
    OB->USER = UserConfig;
 80039d8:	4a0f      	ldr	r2, [pc, #60]	; (8003a18 <FLASH_OB_UserConfig+0x80>)
 80039da:	1dfb      	adds	r3, r7, #7
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	8053      	strh	r3, [r2, #2]
#else
    OB->USER = (UserConfig | 0x88U);
#endif

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80039e2:	230f      	movs	r3, #15
 80039e4:	18fc      	adds	r4, r7, r3
 80039e6:	4b09      	ldr	r3, [pc, #36]	; (8003a0c <FLASH_OB_UserConfig+0x74>)
 80039e8:	0018      	movs	r0, r3
 80039ea:	f7ff fb49 	bl	8003080 <FLASH_WaitForLastOperation>
 80039ee:	0003      	movs	r3, r0
 80039f0:	7023      	strb	r3, [r4, #0]

    /* if the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 80039f2:	4b08      	ldr	r3, [pc, #32]	; (8003a14 <FLASH_OB_UserConfig+0x7c>)
 80039f4:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <FLASH_OB_UserConfig+0x7c>)
 80039f6:	6912      	ldr	r2, [r2, #16]
 80039f8:	2110      	movs	r1, #16
 80039fa:	438a      	bics	r2, r1
 80039fc:	611a      	str	r2, [r3, #16]
  }
  
  return status; 
 80039fe:	230f      	movs	r3, #15
 8003a00:	18fb      	adds	r3, r7, r3
 8003a02:	781b      	ldrb	r3, [r3, #0]
}
 8003a04:	0018      	movs	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	b005      	add	sp, #20
 8003a0a:	bd90      	pop	{r4, r7, pc}
 8003a0c:	0000c350 	.word	0x0000c350
 8003a10:	200000d0 	.word	0x200000d0
 8003a14:	40022000 	.word	0x40022000
 8003a18:	1ffff800 	.word	0x1ffff800

08003a1c <FLASH_OB_ProgramData>:
  *         This parameter can be 0x1FFFF804 or 0x1FFFF806. 
  * @param  Data specifies the data to be programmed.
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_ProgramData(uint32_t Address, uint8_t Data)
{
 8003a1c:	b590      	push	{r4, r7, lr}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	000a      	movs	r2, r1
 8003a26:	1cfb      	adds	r3, r7, #3
 8003a28:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a2a:	230f      	movs	r3, #15
 8003a2c:	18fb      	adds	r3, r7, r3
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_OB_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a32:	230f      	movs	r3, #15
 8003a34:	18fc      	adds	r4, r7, r3
 8003a36:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <FLASH_OB_ProgramData+0x78>)
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f7ff fb21 	bl	8003080 <FLASH_WaitForLastOperation>
 8003a3e:	0003      	movs	r3, r0
 8003a40:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8003a42:	230f      	movs	r3, #15
 8003a44:	18fb      	adds	r3, r7, r3
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d11b      	bne.n	8003a84 <FLASH_OB_ProgramData+0x68>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a4c:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <FLASH_OB_ProgramData+0x7c>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	61da      	str	r2, [r3, #28]

    /* Enables the Option Bytes Programming operation */
    SET_BIT(FLASH->CR, FLASH_CR_OPTPG); 
 8003a52:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <FLASH_OB_ProgramData+0x80>)
 8003a54:	4a11      	ldr	r2, [pc, #68]	; (8003a9c <FLASH_OB_ProgramData+0x80>)
 8003a56:	6912      	ldr	r2, [r2, #16]
 8003a58:	2110      	movs	r1, #16
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	611a      	str	r2, [r3, #16]
    *(__IO uint16_t*)Address = Data;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	1cfa      	adds	r2, r7, #3
 8003a62:	7812      	ldrb	r2, [r2, #0]
 8003a64:	b292      	uxth	r2, r2
 8003a66:	801a      	strh	r2, [r3, #0]
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003a68:	230f      	movs	r3, #15
 8003a6a:	18fc      	adds	r4, r7, r3
 8003a6c:	4b09      	ldr	r3, [pc, #36]	; (8003a94 <FLASH_OB_ProgramData+0x78>)
 8003a6e:	0018      	movs	r0, r3
 8003a70:	f7ff fb06 	bl	8003080 <FLASH_WaitForLastOperation>
 8003a74:	0003      	movs	r3, r0
 8003a76:	7023      	strb	r3, [r4, #0]
    
    /* If the program operation is completed, disable the OPTPG Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTPG);
 8003a78:	4b08      	ldr	r3, [pc, #32]	; (8003a9c <FLASH_OB_ProgramData+0x80>)
 8003a7a:	4a08      	ldr	r2, [pc, #32]	; (8003a9c <FLASH_OB_ProgramData+0x80>)
 8003a7c:	6912      	ldr	r2, [r2, #16]
 8003a7e:	2110      	movs	r1, #16
 8003a80:	438a      	bics	r2, r1
 8003a82:	611a      	str	r2, [r3, #16]
  }
  /* Return the Option Byte Data Program Status */
  return status;
 8003a84:	230f      	movs	r3, #15
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	781b      	ldrb	r3, [r3, #0]
}
 8003a8a:	0018      	movs	r0, r3
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	b005      	add	sp, #20
 8003a90:	bd90      	pop	{r4, r7, pc}
 8003a92:	46c0      	nop			; (mov r8, r8)
 8003a94:	0000c350 	.word	0x0000c350
 8003a98:	200000d0 	.word	0x200000d0
 8003a9c:	40022000 	.word	0x40022000

08003aa0 <FLASH_OB_GetWRP>:
/**
  * @brief  Return the FLASH Write Protection Option Bytes value.
  * @retval The FLASH Write Protection Option Bytes value
  */
static uint32_t FLASH_OB_GetWRP(void)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	af00      	add	r7, sp, #0
  /* Return the FLASH write protection Register value */
  return (uint32_t)(READ_REG(FLASH->WRPR));
 8003aa4:	4b02      	ldr	r3, [pc, #8]	; (8003ab0 <FLASH_OB_GetWRP+0x10>)
 8003aa6:	6a1b      	ldr	r3, [r3, #32]
}
 8003aa8:	0018      	movs	r0, r3
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	40022000 	.word	0x40022000

08003ab4 <FLASH_OB_GetRDP>:
  *            @arg @ref OB_RDP_LEVEL_0 No protection
  *            @arg @ref OB_RDP_LEVEL_1 Read protection of the memory
  *            @arg @ref OB_RDP_LEVEL_2 Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
  uint32_t tmp_reg = 0U;
 8003aba:	2300      	movs	r3, #0
 8003abc:	607b      	str	r3, [r7, #4]
  
  /* Read RDP level bits */
  tmp_reg = READ_BIT(FLASH->OBR, (FLASH_OBR_RDPRT1 | FLASH_OBR_RDPRT2));
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <FLASH_OB_GetRDP+0x34>)
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	2206      	movs	r2, #6
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	607b      	str	r3, [r7, #4]

  if (tmp_reg == FLASH_OBR_RDPRT1)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d101      	bne.n	8003ad2 <FLASH_OB_GetRDP+0x1e>
  {
    return OB_RDP_LEVEL_1;
 8003ace:	23bb      	movs	r3, #187	; 0xbb
 8003ad0:	e005      	b.n	8003ade <FLASH_OB_GetRDP+0x2a>
  }
  else if (tmp_reg == FLASH_OBR_RDPRT2)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d101      	bne.n	8003adc <FLASH_OB_GetRDP+0x28>
  {
    return OB_RDP_LEVEL_2;
 8003ad8:	23cc      	movs	r3, #204	; 0xcc
 8003ada:	e000      	b.n	8003ade <FLASH_OB_GetRDP+0x2a>
  }
  else 
  {
    return OB_RDP_LEVEL_0;
 8003adc:	23aa      	movs	r3, #170	; 0xaa
  }
}
 8003ade:	0018      	movs	r0, r3
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b002      	add	sp, #8
 8003ae4:	bd80      	pop	{r7, pc}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	40022000 	.word	0x40022000

08003aec <FLASH_OB_GetUser>:
  * @retval  The FLASH User Option Bytes values: IWDG_SW(Bit0), RST_STOP(Bit1), RST_STDBY(Bit2), nBOOT1(Bit4),
  *         VDDA_Analog_Monitoring(Bit5) and SRAM_Parity_Enable(Bit6). 
  *         For few devices, following option bytes are available: nBOOT0(Bit3) & BOOT_SEL(Bit7).
  */
static uint8_t FLASH_OB_GetUser(void)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	af00      	add	r7, sp, #0
  /* Return the User Option Byte */
  return (uint8_t)((READ_REG(FLASH->OBR) & FLASH_OBR_USER) >> FLASH_POSITION_IWDGSW_BIT);
 8003af0:	4b03      	ldr	r3, [pc, #12]	; (8003b00 <FLASH_OB_GetUser+0x14>)
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	0a1b      	lsrs	r3, r3, #8
 8003af6:	b2db      	uxtb	r3, r3
}
 8003af8:	0018      	movs	r0, r3
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	46c0      	nop			; (mov r8, r8)
 8003b00:	40022000 	.word	0x40022000

08003b04 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <FLASH_PageErase+0x34>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8003b12:	4b0a      	ldr	r3, [pc, #40]	; (8003b3c <FLASH_PageErase+0x38>)
 8003b14:	4a09      	ldr	r2, [pc, #36]	; (8003b3c <FLASH_PageErase+0x38>)
 8003b16:	6912      	ldr	r2, [r2, #16]
 8003b18:	2102      	movs	r1, #2
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8003b1e:	4b07      	ldr	r3, [pc, #28]	; (8003b3c <FLASH_PageErase+0x38>)
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003b24:	4b05      	ldr	r3, [pc, #20]	; (8003b3c <FLASH_PageErase+0x38>)
 8003b26:	4a05      	ldr	r2, [pc, #20]	; (8003b3c <FLASH_PageErase+0x38>)
 8003b28:	6912      	ldr	r2, [r2, #16]
 8003b2a:	2140      	movs	r1, #64	; 0x40
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	611a      	str	r2, [r3, #16]
}
 8003b30:	46c0      	nop			; (mov r8, r8)
 8003b32:	46bd      	mov	sp, r7
 8003b34:	b002      	add	sp, #8
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	200000d0 	.word	0x200000d0
 8003b3c:	40022000 	.word	0x40022000

08003b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003b56:	e155      	b.n	8003e04 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4091      	lsls	r1, r2
 8003b62:	000a      	movs	r2, r1
 8003b64:	4013      	ands	r3, r2
 8003b66:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d100      	bne.n	8003b70 <HAL_GPIO_Init+0x30>
 8003b6e:	e146      	b.n	8003dfe <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d003      	beq.n	8003b80 <HAL_GPIO_Init+0x40>
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	2b12      	cmp	r3, #18
 8003b7e:	d123      	bne.n	8003bc8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	08da      	lsrs	r2, r3, #3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	3208      	adds	r2, #8
 8003b88:	0092      	lsls	r2, r2, #2
 8003b8a:	58d3      	ldr	r3, [r2, r3]
 8003b8c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	2207      	movs	r2, #7
 8003b92:	4013      	ands	r3, r2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	220f      	movs	r2, #15
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	0013      	movs	r3, r2
 8003b9c:	43da      	mvns	r2, r3
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	691a      	ldr	r2, [r3, #16]
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	2107      	movs	r1, #7
 8003bac:	400b      	ands	r3, r1
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	409a      	lsls	r2, r3
 8003bb2:	0013      	movs	r3, r2
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	08da      	lsrs	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	3208      	adds	r2, #8
 8003bc2:	0092      	lsls	r2, r2, #2
 8003bc4:	6939      	ldr	r1, [r7, #16]
 8003bc6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	409a      	lsls	r2, r3
 8003bd6:	0013      	movs	r3, r2
 8003bd8:	43da      	mvns	r2, r3
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2203      	movs	r2, #3
 8003be6:	401a      	ands	r2, r3
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	005b      	lsls	r3, r3, #1
 8003bec:	409a      	lsls	r2, r3
 8003bee:	0013      	movs	r3, r2
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d00b      	beq.n	8003c1c <HAL_GPIO_Init+0xdc>
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d007      	beq.n	8003c1c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c10:	2b11      	cmp	r3, #17
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b12      	cmp	r3, #18
 8003c1a:	d130      	bne.n	8003c7e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	005b      	lsls	r3, r3, #1
 8003c26:	2203      	movs	r2, #3
 8003c28:	409a      	lsls	r2, r3
 8003c2a:	0013      	movs	r3, r2
 8003c2c:	43da      	mvns	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68da      	ldr	r2, [r3, #12]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	0013      	movs	r3, r2
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003c52:	2201      	movs	r2, #1
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	409a      	lsls	r2, r3
 8003c58:	0013      	movs	r3, r2
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	091b      	lsrs	r3, r3, #4
 8003c68:	2201      	movs	r2, #1
 8003c6a:	401a      	ands	r2, r3
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	409a      	lsls	r2, r3
 8003c70:	0013      	movs	r3, r2
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	693a      	ldr	r2, [r7, #16]
 8003c7c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	005b      	lsls	r3, r3, #1
 8003c88:	2203      	movs	r2, #3
 8003c8a:	409a      	lsls	r2, r3
 8003c8c:	0013      	movs	r3, r2
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4013      	ands	r3, r2
 8003c94:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	409a      	lsls	r2, r3
 8003ca0:	0013      	movs	r3, r2
 8003ca2:	693a      	ldr	r2, [r7, #16]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	2380      	movs	r3, #128	; 0x80
 8003cb4:	055b      	lsls	r3, r3, #21
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d100      	bne.n	8003cbc <HAL_GPIO_Init+0x17c>
 8003cba:	e0a0      	b.n	8003dfe <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cbc:	4b57      	ldr	r3, [pc, #348]	; (8003e1c <HAL_GPIO_Init+0x2dc>)
 8003cbe:	4a57      	ldr	r2, [pc, #348]	; (8003e1c <HAL_GPIO_Init+0x2dc>)
 8003cc0:	6992      	ldr	r2, [r2, #24]
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	619a      	str	r2, [r3, #24]
 8003cc8:	4b54      	ldr	r3, [pc, #336]	; (8003e1c <HAL_GPIO_Init+0x2dc>)
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	4013      	ands	r3, r2
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8003cd4:	4a52      	ldr	r2, [pc, #328]	; (8003e20 <HAL_GPIO_Init+0x2e0>)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	3302      	adds	r3, #2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	589b      	ldr	r3, [r3, r2]
 8003ce0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2203      	movs	r2, #3
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	220f      	movs	r2, #15
 8003cec:	409a      	lsls	r2, r3
 8003cee:	0013      	movs	r3, r2
 8003cf0:	43da      	mvns	r2, r3
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	2390      	movs	r3, #144	; 0x90
 8003cfc:	05db      	lsls	r3, r3, #23
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d019      	beq.n	8003d36 <HAL_GPIO_Init+0x1f6>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a47      	ldr	r2, [pc, #284]	; (8003e24 <HAL_GPIO_Init+0x2e4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_GPIO_Init+0x1f2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a46      	ldr	r2, [pc, #280]	; (8003e28 <HAL_GPIO_Init+0x2e8>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00d      	beq.n	8003d2e <HAL_GPIO_Init+0x1ee>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a45      	ldr	r2, [pc, #276]	; (8003e2c <HAL_GPIO_Init+0x2ec>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d007      	beq.n	8003d2a <HAL_GPIO_Init+0x1ea>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a44      	ldr	r2, [pc, #272]	; (8003e30 <HAL_GPIO_Init+0x2f0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d101      	bne.n	8003d26 <HAL_GPIO_Init+0x1e6>
 8003d22:	2304      	movs	r3, #4
 8003d24:	e008      	b.n	8003d38 <HAL_GPIO_Init+0x1f8>
 8003d26:	2305      	movs	r3, #5
 8003d28:	e006      	b.n	8003d38 <HAL_GPIO_Init+0x1f8>
 8003d2a:	2303      	movs	r3, #3
 8003d2c:	e004      	b.n	8003d38 <HAL_GPIO_Init+0x1f8>
 8003d2e:	2302      	movs	r3, #2
 8003d30:	e002      	b.n	8003d38 <HAL_GPIO_Init+0x1f8>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_GPIO_Init+0x1f8>
 8003d36:	2300      	movs	r3, #0
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	2103      	movs	r1, #3
 8003d3c:	400a      	ands	r2, r1
 8003d3e:	0092      	lsls	r2, r2, #2
 8003d40:	4093      	lsls	r3, r2
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d48:	4935      	ldr	r1, [pc, #212]	; (8003e20 <HAL_GPIO_Init+0x2e0>)
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	089b      	lsrs	r3, r3, #2
 8003d4e:	3302      	adds	r3, #2
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d56:	4b37      	ldr	r3, [pc, #220]	; (8003e34 <HAL_GPIO_Init+0x2f4>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	4013      	ands	r3, r2
 8003d64:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	685a      	ldr	r2, [r3, #4]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	025b      	lsls	r3, r3, #9
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d003      	beq.n	8003d7a <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003d7a:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <HAL_GPIO_Init+0x2f4>)
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8003d80:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <HAL_GPIO_Init+0x2f4>)
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	43da      	mvns	r2, r3
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685a      	ldr	r2, [r3, #4]
 8003d94:	2380      	movs	r3, #128	; 0x80
 8003d96:	029b      	lsls	r3, r3, #10
 8003d98:	4013      	ands	r3, r2
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003da4:	4b23      	ldr	r3, [pc, #140]	; (8003e34 <HAL_GPIO_Init+0x2f4>)
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003daa:	4b22      	ldr	r3, [pc, #136]	; (8003e34 <HAL_GPIO_Init+0x2f4>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	43da      	mvns	r2, r3
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	4013      	ands	r3, r2
 8003db8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685a      	ldr	r2, [r3, #4]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	035b      	lsls	r3, r3, #13
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003dce:	4b19      	ldr	r3, [pc, #100]	; (8003e34 <HAL_GPIO_Init+0x2f4>)
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003dd4:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <HAL_GPIO_Init+0x2f4>)
 8003dd6:	68db      	ldr	r3, [r3, #12]
 8003dd8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4013      	ands	r3, r2
 8003de2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	2380      	movs	r3, #128	; 0x80
 8003dea:	039b      	lsls	r3, r3, #14
 8003dec:	4013      	ands	r3, r2
 8003dee:	d003      	beq.n	8003df8 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	4313      	orrs	r3, r2
 8003df6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003df8:	4b0e      	ldr	r3, [pc, #56]	; (8003e34 <HAL_GPIO_Init+0x2f4>)
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3301      	adds	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	40da      	lsrs	r2, r3
 8003e0c:	1e13      	subs	r3, r2, #0
 8003e0e:	d000      	beq.n	8003e12 <HAL_GPIO_Init+0x2d2>
 8003e10:	e6a2      	b.n	8003b58 <HAL_GPIO_Init+0x18>
  } 
}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b006      	add	sp, #24
 8003e18:	bd80      	pop	{r7, pc}
 8003e1a:	46c0      	nop			; (mov r8, r8)
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40010000 	.word	0x40010000
 8003e24:	48000400 	.word	0x48000400
 8003e28:	48000800 	.word	0x48000800
 8003e2c:	48000c00 	.word	0x48000c00
 8003e30:	48001000 	.word	0x48001000
 8003e34:	40010400 	.word	0x40010400

08003e38 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != RESET)
 8003e4e:	e0b9      	b.n	8003fc4 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1U << position);
 8003e50:	2201      	movs	r2, #1
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	409a      	lsls	r2, r3
 8003e56:	0013      	movs	r3, r2
 8003e58:	683a      	ldr	r2, [r7, #0]
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d100      	bne.n	8003e66 <HAL_GPIO_DeInit+0x2e>
 8003e64:	e0ab      	b.n	8003fbe <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floting Mode */
      CLEAR_BIT(GPIOx->MODER, GPIO_MODER_MODER0 << (position * 2U)); 
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	0052      	lsls	r2, r2, #1
 8003e6e:	2103      	movs	r1, #3
 8003e70:	4091      	lsls	r1, r2
 8003e72:	000a      	movs	r2, r1
 8003e74:	43d2      	mvns	r2, r2
 8003e76:	401a      	ands	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	601a      	str	r2, [r3, #0]
  
      /* Configure the default Alternate Function in current IO */ 
      CLEAR_BIT(GPIOx->AFR[position >> 3U], 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	08da      	lsrs	r2, r3, #3
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	08d9      	lsrs	r1, r3, #3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	3108      	adds	r1, #8
 8003e88:	0089      	lsls	r1, r1, #2
 8003e8a:	58cb      	ldr	r3, [r1, r3]
 8003e8c:	6979      	ldr	r1, [r7, #20]
 8003e8e:	2007      	movs	r0, #7
 8003e90:	4001      	ands	r1, r0
 8003e92:	0089      	lsls	r1, r1, #2
 8003e94:	200f      	movs	r0, #15
 8003e96:	4088      	lsls	r0, r1
 8003e98:	0001      	movs	r1, r0
 8003e9a:	43c9      	mvns	r1, r1
 8003e9c:	4019      	ands	r1, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3208      	adds	r2, #8
 8003ea2:	0092      	lsls	r2, r2, #2
 8003ea4:	50d1      	str	r1, [r2, r3]
  
      /* Configure the default value for IO Speed */
      CLEAR_BIT(GPIOx->OSPEEDR, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	0052      	lsls	r2, r2, #1
 8003eae:	2103      	movs	r1, #3
 8003eb0:	4091      	lsls	r1, r2
 8003eb2:	000a      	movs	r2, r1
 8003eb4:	43d2      	mvns	r2, r2
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	609a      	str	r2, [r3, #8]
                  
      /* Configure the default value IO Output Type */
      CLEAR_BIT(GPIOx->OTYPER, GPIO_OTYPER_OT_0 << position) ;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	4091      	lsls	r1, r2
 8003ec6:	000a      	movs	r2, r1
 8003ec8:	43d2      	mvns	r2, r2
 8003eca:	401a      	ands	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	605a      	str	r2, [r3, #4]
  
      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      CLEAR_BIT(GPIOx->PUPDR, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	0052      	lsls	r2, r2, #1
 8003ed8:	2103      	movs	r1, #3
 8003eda:	4091      	lsls	r1, r2
 8003edc:	000a      	movs	r2, r1
 8003ede:	43d2      	mvns	r2, r2
 8003ee0:	401a      	ands	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	60da      	str	r2, [r3, #12]

      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003ee6:	4a3c      	ldr	r2, [pc, #240]	; (8003fd8 <HAL_GPIO_DeInit+0x1a0>)
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	089b      	lsrs	r3, r3, #2
 8003eec:	3302      	adds	r3, #2
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	589b      	ldr	r3, [r3, r2]
 8003ef2:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FU) << (4U * (position & 0x03U)));
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2203      	movs	r2, #3
 8003ef8:	4013      	ands	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	220f      	movs	r2, #15
 8003efe:	409a      	lsls	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4013      	ands	r3, r2
 8003f04:	60fb      	str	r3, [r7, #12]
      if(tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	2390      	movs	r3, #144	; 0x90
 8003f0a:	05db      	lsls	r3, r3, #23
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d019      	beq.n	8003f44 <HAL_GPIO_DeInit+0x10c>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a32      	ldr	r2, [pc, #200]	; (8003fdc <HAL_GPIO_DeInit+0x1a4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d013      	beq.n	8003f40 <HAL_GPIO_DeInit+0x108>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a31      	ldr	r2, [pc, #196]	; (8003fe0 <HAL_GPIO_DeInit+0x1a8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00d      	beq.n	8003f3c <HAL_GPIO_DeInit+0x104>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a30      	ldr	r2, [pc, #192]	; (8003fe4 <HAL_GPIO_DeInit+0x1ac>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d007      	beq.n	8003f38 <HAL_GPIO_DeInit+0x100>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a2f      	ldr	r2, [pc, #188]	; (8003fe8 <HAL_GPIO_DeInit+0x1b0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d101      	bne.n	8003f34 <HAL_GPIO_DeInit+0xfc>
 8003f30:	2304      	movs	r3, #4
 8003f32:	e008      	b.n	8003f46 <HAL_GPIO_DeInit+0x10e>
 8003f34:	2305      	movs	r3, #5
 8003f36:	e006      	b.n	8003f46 <HAL_GPIO_DeInit+0x10e>
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e004      	b.n	8003f46 <HAL_GPIO_DeInit+0x10e>
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	e002      	b.n	8003f46 <HAL_GPIO_DeInit+0x10e>
 8003f40:	2301      	movs	r3, #1
 8003f42:	e000      	b.n	8003f46 <HAL_GPIO_DeInit+0x10e>
 8003f44:	2300      	movs	r3, #0
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	2103      	movs	r1, #3
 8003f4a:	400a      	ands	r2, r1
 8003f4c:	0092      	lsls	r2, r2, #2
 8003f4e:	4093      	lsls	r3, r2
 8003f50:	001a      	movs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d132      	bne.n	8003fbe <HAL_GPIO_DeInit+0x186>
      {
        tmp = (0x0FU) << (4U * (position & 0x03U));
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	2203      	movs	r2, #3
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	220f      	movs	r2, #15
 8003f62:	409a      	lsls	r2, r3
 8003f64:	0013      	movs	r3, r2
 8003f66:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(SYSCFG->EXTICR[position >> 2U], tmp);
 8003f68:	481b      	ldr	r0, [pc, #108]	; (8003fd8 <HAL_GPIO_DeInit+0x1a0>)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	089b      	lsrs	r3, r3, #2
 8003f6e:	491a      	ldr	r1, [pc, #104]	; (8003fd8 <HAL_GPIO_DeInit+0x1a0>)
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	0892      	lsrs	r2, r2, #2
 8003f74:	3202      	adds	r2, #2
 8003f76:	0092      	lsls	r2, r2, #2
 8003f78:	5852      	ldr	r2, [r2, r1]
 8003f7a:	68f9      	ldr	r1, [r7, #12]
 8003f7c:	43c9      	mvns	r1, r1
 8003f7e:	400a      	ands	r2, r1
 8003f80:	3302      	adds	r3, #2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	501a      	str	r2, [r3, r0]
        
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8003f86:	4b19      	ldr	r3, [pc, #100]	; (8003fec <HAL_GPIO_DeInit+0x1b4>)
 8003f88:	4a18      	ldr	r2, [pc, #96]	; (8003fec <HAL_GPIO_DeInit+0x1b4>)
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	6939      	ldr	r1, [r7, #16]
 8003f8e:	43c9      	mvns	r1, r1
 8003f90:	400a      	ands	r2, r1
 8003f92:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8003f94:	4b15      	ldr	r3, [pc, #84]	; (8003fec <HAL_GPIO_DeInit+0x1b4>)
 8003f96:	4a15      	ldr	r2, [pc, #84]	; (8003fec <HAL_GPIO_DeInit+0x1b4>)
 8003f98:	6852      	ldr	r2, [r2, #4]
 8003f9a:	6939      	ldr	r1, [r7, #16]
 8003f9c:	43c9      	mvns	r1, r1
 8003f9e:	400a      	ands	r2, r1
 8003fa0:	605a      	str	r2, [r3, #4]
        
        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8003fa2:	4b12      	ldr	r3, [pc, #72]	; (8003fec <HAL_GPIO_DeInit+0x1b4>)
 8003fa4:	4a11      	ldr	r2, [pc, #68]	; (8003fec <HAL_GPIO_DeInit+0x1b4>)
 8003fa6:	6892      	ldr	r2, [r2, #8]
 8003fa8:	6939      	ldr	r1, [r7, #16]
 8003faa:	43c9      	mvns	r1, r1
 8003fac:	400a      	ands	r2, r1
 8003fae:	609a      	str	r2, [r3, #8]
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8003fb0:	4b0e      	ldr	r3, [pc, #56]	; (8003fec <HAL_GPIO_DeInit+0x1b4>)
 8003fb2:	4a0e      	ldr	r2, [pc, #56]	; (8003fec <HAL_GPIO_DeInit+0x1b4>)
 8003fb4:	68d2      	ldr	r2, [r2, #12]
 8003fb6:	6939      	ldr	r1, [r7, #16]
 8003fb8:	43c9      	mvns	r1, r1
 8003fba:	400a      	ands	r2, r1
 8003fbc:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != RESET)
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	40da      	lsrs	r2, r3
 8003fca:	1e13      	subs	r3, r2, #0
 8003fcc:	d000      	beq.n	8003fd0 <HAL_GPIO_DeInit+0x198>
 8003fce:	e73f      	b.n	8003e50 <HAL_GPIO_DeInit+0x18>
  }
}
 8003fd0:	46c0      	nop			; (mov r8, r8)
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	b006      	add	sp, #24
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	40010000 	.word	0x40010000
 8003fdc:	48000400 	.word	0x48000400
 8003fe0:	48000800 	.word	0x48000800
 8003fe4:	48000c00 	.word	0x48000c00
 8003fe8:	48001000 	.word	0x48001000
 8003fec:	40010400 	.word	0x40010400

08003ff0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b084      	sub	sp, #16
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	000a      	movs	r2, r1
 8003ffa:	1cbb      	adds	r3, r7, #2
 8003ffc:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	1cba      	adds	r2, r7, #2
 8004004:	8812      	ldrh	r2, [r2, #0]
 8004006:	4013      	ands	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800400a:	230f      	movs	r3, #15
 800400c:	18fb      	adds	r3, r7, r3
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e003      	b.n	800401c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004014:	230f      	movs	r3, #15
 8004016:	18fb      	adds	r3, r7, r3
 8004018:	2200      	movs	r2, #0
 800401a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800401c:	230f      	movs	r3, #15
 800401e:	18fb      	adds	r3, r7, r3
 8004020:	781b      	ldrb	r3, [r3, #0]
  }
 8004022:	0018      	movs	r0, r3
 8004024:	46bd      	mov	sp, r7
 8004026:	b004      	add	sp, #16
 8004028:	bd80      	pop	{r7, pc}

0800402a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800402a:	b580      	push	{r7, lr}
 800402c:	b082      	sub	sp, #8
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
 8004032:	0008      	movs	r0, r1
 8004034:	0011      	movs	r1, r2
 8004036:	1cbb      	adds	r3, r7, #2
 8004038:	1c02      	adds	r2, r0, #0
 800403a:	801a      	strh	r2, [r3, #0]
 800403c:	1c7b      	adds	r3, r7, #1
 800403e:	1c0a      	adds	r2, r1, #0
 8004040:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004042:	1c7b      	adds	r3, r7, #1
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d004      	beq.n	8004054 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800404a:	1cbb      	adds	r3, r7, #2
 800404c:	881a      	ldrh	r2, [r3, #0]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004052:	e003      	b.n	800405c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004054:	1cbb      	adds	r3, r7, #2
 8004056:	881a      	ldrh	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800405c:	46c0      	nop			; (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	b002      	add	sp, #8
 8004062:	bd80      	pop	{r7, pc}

08004064 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	000a      	movs	r2, r1
 800406e:	1cbb      	adds	r3, r7, #2
 8004070:	801a      	strh	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695a      	ldr	r2, [r3, #20]
 8004076:	1cbb      	adds	r3, r7, #2
 8004078:	881b      	ldrh	r3, [r3, #0]
 800407a:	405a      	eors	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	615a      	str	r2, [r3, #20]
}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	b002      	add	sp, #8
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_GPIO_LockPin>:
  * @param  GPIO_Pin specifies the port bits to be locked.
*         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
* @retval None
*/
HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	000a      	movs	r2, r1
 8004092:	1cbb      	adds	r3, r7, #2
 8004094:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmp = GPIO_LCKR_LCKK;
 8004096:	2380      	movs	r3, #128	; 0x80
 8004098:	025b      	lsls	r3, r3, #9
 800409a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_LOCK_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Apply lock key write sequence */
  SET_BIT(tmp, GPIO_Pin);
 800409c:	1cbb      	adds	r3, r7, #2
 800409e:	881a      	ldrh	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	61da      	str	r2, [r3, #28]
  /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
  GPIOx->LCKR = GPIO_Pin;
 80040ac:	1cbb      	adds	r3, r7, #2
 80040ae:	881a      	ldrh	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	61da      	str	r2, [r3, #28]
  /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
  GPIOx->LCKR = tmp;
 80040b4:	68fa      	ldr	r2, [r7, #12]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	61da      	str	r2, [r3, #28]
  /* Read LCKK bit*/
  tmp = GPIOx->LCKR;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	60fb      	str	r3, [r7, #12]

  if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	69da      	ldr	r2, [r3, #28]
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	025b      	lsls	r3, r3, #9
 80040c8:	4013      	ands	r3, r2
 80040ca:	d001      	beq.n	80040d0 <HAL_GPIO_LockPin+0x48>
  {
    return HAL_OK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	e000      	b.n	80040d2 <HAL_GPIO_LockPin+0x4a>
  }
  else
  {
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
  }
}
 80040d2:	0018      	movs	r0, r3
 80040d4:	46bd      	mov	sp, r7
 80040d6:	b004      	add	sp, #16
 80040d8:	bd80      	pop	{r7, pc}
	...

080040dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	0002      	movs	r2, r0
 80040e4:	1dbb      	adds	r3, r7, #6
 80040e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80040e8:	4b09      	ldr	r3, [pc, #36]	; (8004110 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	1dba      	adds	r2, r7, #6
 80040ee:	8812      	ldrh	r2, [r2, #0]
 80040f0:	4013      	ands	r3, r2
 80040f2:	d008      	beq.n	8004106 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80040f6:	1dba      	adds	r2, r7, #6
 80040f8:	8812      	ldrh	r2, [r2, #0]
 80040fa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80040fc:	1dbb      	adds	r3, r7, #6
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	0018      	movs	r0, r3
 8004102:	f000 f807 	bl	8004114 <HAL_GPIO_EXTI_Callback>
  }
}
 8004106:	46c0      	nop			; (mov r8, r8)
 8004108:	46bd      	mov	sp, r7
 800410a:	b002      	add	sp, #8
 800410c:	bd80      	pop	{r7, pc}
 800410e:	46c0      	nop			; (mov r8, r8)
 8004110:	40010400 	.word	0x40010400

08004114 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	0002      	movs	r2, r0
 800411c:	1dbb      	adds	r3, r7, #6
 800411e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */ 
}
 8004120:	46c0      	nop			; (mov r8, r8)
 8004122:	46bd      	mov	sp, r7
 8004124:	b002      	add	sp, #8
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_MspInit>:
/**
  * @brief  Initializes the Global MSP.
  * @retval None
  */
void HAL_MspInit(void)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	af00      	add	r7, sp, #0

}
 800412c:	46c0      	nop			; (mov r8, r8)
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}

08004132 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the Global MSP. 
  * @retval None
  */
void HAL_MspDeInit(void)
{
 8004132:	b580      	push	{r7, lr}
 8004134:	af00      	add	r7, sp, #0

}
 8004136:	46c0      	nop			; (mov r8, r8)
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_PPP_MspInit>:
/**
  * @brief  Initializes the PPP MSP.
  * @retval None
  */
void HAL_PPP_MspInit(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0

}
 8004140:	46c0      	nop			; (mov r8, r8)
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_PPP_MspDeInit>:
/**
  * @brief  DeInitializes the PPP MSP. 
  * @retval None
  */
void HAL_PPP_MspDeInit(void)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	af00      	add	r7, sp, #0

}
 800414a:	46c0      	nop			; (mov r8, r8)
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}

08004150 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval None
  */
void HAL_RCC_DeInit(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Set HSION bit, HSITRIM[4:0] bits to the reset value*/
  SET_BIT(RCC->CR, RCC_CR_HSION | RCC_CR_HSITRIM_4); 
 8004154:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <HAL_RCC_DeInit+0x58>)
 8004156:	4a14      	ldr	r2, [pc, #80]	; (80041a8 <HAL_RCC_DeInit+0x58>)
 8004158:	6812      	ldr	r2, [r2, #0]
 800415a:	2181      	movs	r1, #129	; 0x81
 800415c:	430a      	orrs	r2, r1
 800415e:	601a      	str	r2, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0] and MCOSEL[2:0] bits */
  CLEAR_BIT(RCC->CFGR, RCC_CFGR_SW | RCC_CFGR_HPRE | RCC_CFGR_PPRE | RCC_CFGR_MCO);
 8004160:	4b11      	ldr	r3, [pc, #68]	; (80041a8 <HAL_RCC_DeInit+0x58>)
 8004162:	4a11      	ldr	r2, [pc, #68]	; (80041a8 <HAL_RCC_DeInit+0x58>)
 8004164:	6852      	ldr	r2, [r2, #4]
 8004166:	4911      	ldr	r1, [pc, #68]	; (80041ac <HAL_RCC_DeInit+0x5c>)
 8004168:	400a      	ands	r2, r1
 800416a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON, PLLON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON | RCC_CR_CSSON | RCC_CR_HSEON);
 800416c:	4b0e      	ldr	r3, [pc, #56]	; (80041a8 <HAL_RCC_DeInit+0x58>)
 800416e:	4a0e      	ldr	r2, [pc, #56]	; (80041a8 <HAL_RCC_DeInit+0x58>)
 8004170:	6812      	ldr	r2, [r2, #0]
 8004172:	490f      	ldr	r1, [pc, #60]	; (80041b0 <HAL_RCC_DeInit+0x60>)
 8004174:	400a      	ands	r2, r1
 8004176:	601a      	str	r2, [r3, #0]
  
  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004178:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <HAL_RCC_DeInit+0x58>)
 800417a:	4a0b      	ldr	r2, [pc, #44]	; (80041a8 <HAL_RCC_DeInit+0x58>)
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	490d      	ldr	r1, [pc, #52]	; (80041b4 <HAL_RCC_DeInit+0x64>)
 8004180:	400a      	ands	r2, r1
 8004182:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8004184:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <HAL_RCC_DeInit+0x58>)
 8004186:	2200      	movs	r2, #0
 8004188:	605a      	str	r2, [r3, #4]
  
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
 800418a:	4b07      	ldr	r3, [pc, #28]	; (80041a8 <HAL_RCC_DeInit+0x58>)
 800418c:	2200      	movs	r2, #0
 800418e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Reset CFGR3 register */
  CLEAR_REG(RCC->CFGR3);
 8004190:	4b05      	ldr	r3, [pc, #20]	; (80041a8 <HAL_RCC_DeInit+0x58>)
 8004192:	2200      	movs	r2, #0
 8004194:	631a      	str	r2, [r3, #48]	; 0x30
  
  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 8004196:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <HAL_RCC_DeInit+0x58>)
 8004198:	2200      	movs	r2, #0
 800419a:	609a      	str	r2, [r3, #8]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 800419c:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <HAL_RCC_DeInit+0x68>)
 800419e:	4a07      	ldr	r2, [pc, #28]	; (80041bc <HAL_RCC_DeInit+0x6c>)
 80041a0:	601a      	str	r2, [r3, #0]
}
 80041a2:	46c0      	nop			; (mov r8, r8)
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	40021000 	.word	0x40021000
 80041ac:	f0fff80c 	.word	0xf0fff80c
 80041b0:	fef6ffff 	.word	0xfef6ffff
 80041b4:	fffbffff 	.word	0xfffbffff
 80041b8:	2000000c 	.word	0x2000000c
 80041bc:	007a1200 	.word	0x007a1200

080041c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2201      	movs	r2, #1
 80041d2:	4013      	ands	r3, r2
 80041d4:	d100      	bne.n	80041d8 <HAL_RCC_OscConfig+0x18>
 80041d6:	e08d      	b.n	80042f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80041d8:	4bc5      	ldr	r3, [pc, #788]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	220c      	movs	r2, #12
 80041de:	4013      	ands	r3, r2
 80041e0:	2b04      	cmp	r3, #4
 80041e2:	d00e      	beq.n	8004202 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041e4:	4bc2      	ldr	r3, [pc, #776]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	220c      	movs	r2, #12
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b08      	cmp	r3, #8
 80041ee:	d116      	bne.n	800421e <HAL_RCC_OscConfig+0x5e>
 80041f0:	4bbf      	ldr	r3, [pc, #764]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	23c0      	movs	r3, #192	; 0xc0
 80041f6:	025b      	lsls	r3, r3, #9
 80041f8:	401a      	ands	r2, r3
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	025b      	lsls	r3, r3, #9
 80041fe:	429a      	cmp	r2, r3
 8004200:	d10d      	bne.n	800421e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004202:	4bbb      	ldr	r3, [pc, #748]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	2380      	movs	r3, #128	; 0x80
 8004208:	029b      	lsls	r3, r3, #10
 800420a:	4013      	ands	r3, r2
 800420c:	d100      	bne.n	8004210 <HAL_RCC_OscConfig+0x50>
 800420e:	e070      	b.n	80042f2 <HAL_RCC_OscConfig+0x132>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d000      	beq.n	800421a <HAL_RCC_OscConfig+0x5a>
 8004218:	e06b      	b.n	80042f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e327      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d107      	bne.n	8004236 <HAL_RCC_OscConfig+0x76>
 8004226:	4bb2      	ldr	r3, [pc, #712]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004228:	4ab1      	ldr	r2, [pc, #708]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 800422a:	6812      	ldr	r2, [r2, #0]
 800422c:	2180      	movs	r1, #128	; 0x80
 800422e:	0249      	lsls	r1, r1, #9
 8004230:	430a      	orrs	r2, r1
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	e02f      	b.n	8004296 <HAL_RCC_OscConfig+0xd6>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10c      	bne.n	8004258 <HAL_RCC_OscConfig+0x98>
 800423e:	4bac      	ldr	r3, [pc, #688]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004240:	4aab      	ldr	r2, [pc, #684]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004242:	6812      	ldr	r2, [r2, #0]
 8004244:	49ab      	ldr	r1, [pc, #684]	; (80044f4 <HAL_RCC_OscConfig+0x334>)
 8004246:	400a      	ands	r2, r1
 8004248:	601a      	str	r2, [r3, #0]
 800424a:	4ba9      	ldr	r3, [pc, #676]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 800424c:	4aa8      	ldr	r2, [pc, #672]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	49a9      	ldr	r1, [pc, #676]	; (80044f8 <HAL_RCC_OscConfig+0x338>)
 8004252:	400a      	ands	r2, r1
 8004254:	601a      	str	r2, [r3, #0]
 8004256:	e01e      	b.n	8004296 <HAL_RCC_OscConfig+0xd6>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b05      	cmp	r3, #5
 800425e:	d10e      	bne.n	800427e <HAL_RCC_OscConfig+0xbe>
 8004260:	4ba3      	ldr	r3, [pc, #652]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004262:	4aa3      	ldr	r2, [pc, #652]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004264:	6812      	ldr	r2, [r2, #0]
 8004266:	2180      	movs	r1, #128	; 0x80
 8004268:	02c9      	lsls	r1, r1, #11
 800426a:	430a      	orrs	r2, r1
 800426c:	601a      	str	r2, [r3, #0]
 800426e:	4ba0      	ldr	r3, [pc, #640]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004270:	4a9f      	ldr	r2, [pc, #636]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	2180      	movs	r1, #128	; 0x80
 8004276:	0249      	lsls	r1, r1, #9
 8004278:	430a      	orrs	r2, r1
 800427a:	601a      	str	r2, [r3, #0]
 800427c:	e00b      	b.n	8004296 <HAL_RCC_OscConfig+0xd6>
 800427e:	4b9c      	ldr	r3, [pc, #624]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004280:	4a9b      	ldr	r2, [pc, #620]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004282:	6812      	ldr	r2, [r2, #0]
 8004284:	499b      	ldr	r1, [pc, #620]	; (80044f4 <HAL_RCC_OscConfig+0x334>)
 8004286:	400a      	ands	r2, r1
 8004288:	601a      	str	r2, [r3, #0]
 800428a:	4b99      	ldr	r3, [pc, #612]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 800428c:	4a98      	ldr	r2, [pc, #608]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 800428e:	6812      	ldr	r2, [r2, #0]
 8004290:	4999      	ldr	r1, [pc, #612]	; (80044f8 <HAL_RCC_OscConfig+0x338>)
 8004292:	400a      	ands	r2, r1
 8004294:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d014      	beq.n	80042c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429e:	f7fc fbcb 	bl	8000a38 <HAL_GetTick>
 80042a2:	0003      	movs	r3, r0
 80042a4:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a6:	e008      	b.n	80042ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042a8:	f7fc fbc6 	bl	8000a38 <HAL_GetTick>
 80042ac:	0002      	movs	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	2b64      	cmp	r3, #100	; 0x64
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e2d9      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ba:	4b8d      	ldr	r3, [pc, #564]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	2380      	movs	r3, #128	; 0x80
 80042c0:	029b      	lsls	r3, r3, #10
 80042c2:	4013      	ands	r3, r2
 80042c4:	d0f0      	beq.n	80042a8 <HAL_RCC_OscConfig+0xe8>
 80042c6:	e015      	b.n	80042f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042c8:	f7fc fbb6 	bl	8000a38 <HAL_GetTick>
 80042cc:	0003      	movs	r3, r0
 80042ce:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d2:	f7fc fbb1 	bl	8000a38 <HAL_GetTick>
 80042d6:	0002      	movs	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b64      	cmp	r3, #100	; 0x64
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e2c4      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e4:	4b82      	ldr	r3, [pc, #520]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	2380      	movs	r3, #128	; 0x80
 80042ea:	029b      	lsls	r3, r3, #10
 80042ec:	4013      	ands	r3, r2
 80042ee:	d1f0      	bne.n	80042d2 <HAL_RCC_OscConfig+0x112>
 80042f0:	e000      	b.n	80042f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2202      	movs	r2, #2
 80042fa:	4013      	ands	r3, r2
 80042fc:	d100      	bne.n	8004300 <HAL_RCC_OscConfig+0x140>
 80042fe:	e06c      	b.n	80043da <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004300:	4b7b      	ldr	r3, [pc, #492]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	220c      	movs	r2, #12
 8004306:	4013      	ands	r3, r2
 8004308:	d00e      	beq.n	8004328 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800430a:	4b79      	ldr	r3, [pc, #484]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	220c      	movs	r2, #12
 8004310:	4013      	ands	r3, r2
 8004312:	2b08      	cmp	r3, #8
 8004314:	d11f      	bne.n	8004356 <HAL_RCC_OscConfig+0x196>
 8004316:	4b76      	ldr	r3, [pc, #472]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	23c0      	movs	r3, #192	; 0xc0
 800431c:	025b      	lsls	r3, r3, #9
 800431e:	401a      	ands	r2, r3
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	429a      	cmp	r2, r3
 8004326:	d116      	bne.n	8004356 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004328:	4b71      	ldr	r3, [pc, #452]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2202      	movs	r2, #2
 800432e:	4013      	ands	r3, r2
 8004330:	d005      	beq.n	800433e <HAL_RCC_OscConfig+0x17e>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d001      	beq.n	800433e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e297      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433e:	4a6c      	ldr	r2, [pc, #432]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004340:	4b6b      	ldr	r3, [pc, #428]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	21f8      	movs	r1, #248	; 0xf8
 8004346:	438b      	bics	r3, r1
 8004348:	0019      	movs	r1, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	00db      	lsls	r3, r3, #3
 8004350:	430b      	orrs	r3, r1
 8004352:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004354:	e041      	b.n	80043da <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d024      	beq.n	80043a8 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800435e:	4b64      	ldr	r3, [pc, #400]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004360:	4a63      	ldr	r2, [pc, #396]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	2101      	movs	r1, #1
 8004366:	430a      	orrs	r2, r1
 8004368:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436a:	f7fc fb65 	bl	8000a38 <HAL_GetTick>
 800436e:	0003      	movs	r3, r0
 8004370:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004374:	f7fc fb60 	bl	8000a38 <HAL_GetTick>
 8004378:	0002      	movs	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b02      	cmp	r3, #2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e273      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004386:	4b5a      	ldr	r3, [pc, #360]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2202      	movs	r2, #2
 800438c:	4013      	ands	r3, r2
 800438e:	d0f1      	beq.n	8004374 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004390:	4a57      	ldr	r2, [pc, #348]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004392:	4b57      	ldr	r3, [pc, #348]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	21f8      	movs	r1, #248	; 0xf8
 8004398:	438b      	bics	r3, r1
 800439a:	0019      	movs	r1, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	430b      	orrs	r3, r1
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e018      	b.n	80043da <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043a8:	4b51      	ldr	r3, [pc, #324]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 80043aa:	4a51      	ldr	r2, [pc, #324]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 80043ac:	6812      	ldr	r2, [r2, #0]
 80043ae:	2101      	movs	r1, #1
 80043b0:	438a      	bics	r2, r1
 80043b2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b4:	f7fc fb40 	bl	8000a38 <HAL_GetTick>
 80043b8:	0003      	movs	r3, r0
 80043ba:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043be:	f7fc fb3b 	bl	8000a38 <HAL_GetTick>
 80043c2:	0002      	movs	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e24e      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043d0:	4b47      	ldr	r3, [pc, #284]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2202      	movs	r2, #2
 80043d6:	4013      	ands	r3, r2
 80043d8:	d1f1      	bne.n	80043be <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	2208      	movs	r2, #8
 80043e0:	4013      	ands	r3, r2
 80043e2:	d036      	beq.n	8004452 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d019      	beq.n	8004420 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043ec:	4b40      	ldr	r3, [pc, #256]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 80043ee:	4a40      	ldr	r2, [pc, #256]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 80043f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043f2:	2101      	movs	r1, #1
 80043f4:	430a      	orrs	r2, r1
 80043f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043f8:	f7fc fb1e 	bl	8000a38 <HAL_GetTick>
 80043fc:	0003      	movs	r3, r0
 80043fe:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004400:	e008      	b.n	8004414 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004402:	f7fc fb19 	bl	8000a38 <HAL_GetTick>
 8004406:	0002      	movs	r2, r0
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	2b02      	cmp	r3, #2
 800440e:	d901      	bls.n	8004414 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e22c      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004414:	4b36      	ldr	r3, [pc, #216]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	2202      	movs	r2, #2
 800441a:	4013      	ands	r3, r2
 800441c:	d0f1      	beq.n	8004402 <HAL_RCC_OscConfig+0x242>
 800441e:	e018      	b.n	8004452 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004420:	4b33      	ldr	r3, [pc, #204]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004422:	4a33      	ldr	r2, [pc, #204]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004426:	2101      	movs	r1, #1
 8004428:	438a      	bics	r2, r1
 800442a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800442c:	f7fc fb04 	bl	8000a38 <HAL_GetTick>
 8004430:	0003      	movs	r3, r0
 8004432:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004434:	e008      	b.n	8004448 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004436:	f7fc faff 	bl	8000a38 <HAL_GetTick>
 800443a:	0002      	movs	r2, r0
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d901      	bls.n	8004448 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8004444:	2303      	movs	r3, #3
 8004446:	e212      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004448:	4b29      	ldr	r3, [pc, #164]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 800444a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800444c:	2202      	movs	r2, #2
 800444e:	4013      	ands	r3, r2
 8004450:	d1f1      	bne.n	8004436 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2204      	movs	r2, #4
 8004458:	4013      	ands	r3, r2
 800445a:	d100      	bne.n	800445e <HAL_RCC_OscConfig+0x29e>
 800445c:	e0b6      	b.n	80045cc <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800445e:	2317      	movs	r3, #23
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004466:	4b22      	ldr	r3, [pc, #136]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004468:	69da      	ldr	r2, [r3, #28]
 800446a:	2380      	movs	r3, #128	; 0x80
 800446c:	055b      	lsls	r3, r3, #21
 800446e:	4013      	ands	r3, r2
 8004470:	d111      	bne.n	8004496 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004472:	4b1f      	ldr	r3, [pc, #124]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004474:	4a1e      	ldr	r2, [pc, #120]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004476:	69d2      	ldr	r2, [r2, #28]
 8004478:	2180      	movs	r1, #128	; 0x80
 800447a:	0549      	lsls	r1, r1, #21
 800447c:	430a      	orrs	r2, r1
 800447e:	61da      	str	r2, [r3, #28]
 8004480:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	2380      	movs	r3, #128	; 0x80
 8004486:	055b      	lsls	r3, r3, #21
 8004488:	4013      	ands	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
 800448c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800448e:	2317      	movs	r3, #23
 8004490:	18fb      	adds	r3, r7, r3
 8004492:	2201      	movs	r2, #1
 8004494:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004496:	4b19      	ldr	r3, [pc, #100]	; (80044fc <HAL_RCC_OscConfig+0x33c>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	2380      	movs	r3, #128	; 0x80
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	4013      	ands	r3, r2
 80044a0:	d11a      	bne.n	80044d8 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044a2:	4b16      	ldr	r3, [pc, #88]	; (80044fc <HAL_RCC_OscConfig+0x33c>)
 80044a4:	4a15      	ldr	r2, [pc, #84]	; (80044fc <HAL_RCC_OscConfig+0x33c>)
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	2180      	movs	r1, #128	; 0x80
 80044aa:	0049      	lsls	r1, r1, #1
 80044ac:	430a      	orrs	r2, r1
 80044ae:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044b0:	f7fc fac2 	bl	8000a38 <HAL_GetTick>
 80044b4:	0003      	movs	r3, r0
 80044b6:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ba:	f7fc fabd 	bl	8000a38 <HAL_GetTick>
 80044be:	0002      	movs	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b64      	cmp	r3, #100	; 0x64
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e1d0      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044cc:	4b0b      	ldr	r3, [pc, #44]	; (80044fc <HAL_RCC_OscConfig+0x33c>)
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	2380      	movs	r3, #128	; 0x80
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	4013      	ands	r3, r2
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d10f      	bne.n	8004500 <HAL_RCC_OscConfig+0x340>
 80044e0:	4b03      	ldr	r3, [pc, #12]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 80044e2:	4a03      	ldr	r2, [pc, #12]	; (80044f0 <HAL_RCC_OscConfig+0x330>)
 80044e4:	6a12      	ldr	r2, [r2, #32]
 80044e6:	2101      	movs	r1, #1
 80044e8:	430a      	orrs	r2, r1
 80044ea:	621a      	str	r2, [r3, #32]
 80044ec:	e036      	b.n	800455c <HAL_RCC_OscConfig+0x39c>
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	40021000 	.word	0x40021000
 80044f4:	fffeffff 	.word	0xfffeffff
 80044f8:	fffbffff 	.word	0xfffbffff
 80044fc:	40007000 	.word	0x40007000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d10c      	bne.n	8004522 <HAL_RCC_OscConfig+0x362>
 8004508:	4bc9      	ldr	r3, [pc, #804]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800450a:	4ac9      	ldr	r2, [pc, #804]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800450c:	6a12      	ldr	r2, [r2, #32]
 800450e:	2101      	movs	r1, #1
 8004510:	438a      	bics	r2, r1
 8004512:	621a      	str	r2, [r3, #32]
 8004514:	4bc6      	ldr	r3, [pc, #792]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004516:	4ac6      	ldr	r2, [pc, #792]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004518:	6a12      	ldr	r2, [r2, #32]
 800451a:	2104      	movs	r1, #4
 800451c:	438a      	bics	r2, r1
 800451e:	621a      	str	r2, [r3, #32]
 8004520:	e01c      	b.n	800455c <HAL_RCC_OscConfig+0x39c>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	2b05      	cmp	r3, #5
 8004528:	d10c      	bne.n	8004544 <HAL_RCC_OscConfig+0x384>
 800452a:	4bc1      	ldr	r3, [pc, #772]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800452c:	4ac0      	ldr	r2, [pc, #768]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800452e:	6a12      	ldr	r2, [r2, #32]
 8004530:	2104      	movs	r1, #4
 8004532:	430a      	orrs	r2, r1
 8004534:	621a      	str	r2, [r3, #32]
 8004536:	4bbe      	ldr	r3, [pc, #760]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004538:	4abd      	ldr	r2, [pc, #756]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800453a:	6a12      	ldr	r2, [r2, #32]
 800453c:	2101      	movs	r1, #1
 800453e:	430a      	orrs	r2, r1
 8004540:	621a      	str	r2, [r3, #32]
 8004542:	e00b      	b.n	800455c <HAL_RCC_OscConfig+0x39c>
 8004544:	4bba      	ldr	r3, [pc, #744]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004546:	4aba      	ldr	r2, [pc, #744]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004548:	6a12      	ldr	r2, [r2, #32]
 800454a:	2101      	movs	r1, #1
 800454c:	438a      	bics	r2, r1
 800454e:	621a      	str	r2, [r3, #32]
 8004550:	4bb7      	ldr	r3, [pc, #732]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004552:	4ab7      	ldr	r2, [pc, #732]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004554:	6a12      	ldr	r2, [r2, #32]
 8004556:	2104      	movs	r1, #4
 8004558:	438a      	bics	r2, r1
 800455a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d014      	beq.n	800458e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004564:	f7fc fa68 	bl	8000a38 <HAL_GetTick>
 8004568:	0003      	movs	r3, r0
 800456a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456c:	e009      	b.n	8004582 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456e:	f7fc fa63 	bl	8000a38 <HAL_GetTick>
 8004572:	0002      	movs	r2, r0
 8004574:	693b      	ldr	r3, [r7, #16]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	4aae      	ldr	r2, [pc, #696]	; (8004834 <HAL_RCC_OscConfig+0x674>)
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e175      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004582:	4bab      	ldr	r3, [pc, #684]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	2202      	movs	r2, #2
 8004588:	4013      	ands	r3, r2
 800458a:	d0f0      	beq.n	800456e <HAL_RCC_OscConfig+0x3ae>
 800458c:	e013      	b.n	80045b6 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7fc fa53 	bl	8000a38 <HAL_GetTick>
 8004592:	0003      	movs	r3, r0
 8004594:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004596:	e009      	b.n	80045ac <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004598:	f7fc fa4e 	bl	8000a38 <HAL_GetTick>
 800459c:	0002      	movs	r2, r0
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	4aa4      	ldr	r2, [pc, #656]	; (8004834 <HAL_RCC_OscConfig+0x674>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e160      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ac:	4ba0      	ldr	r3, [pc, #640]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	2202      	movs	r2, #2
 80045b2:	4013      	ands	r3, r2
 80045b4:	d1f0      	bne.n	8004598 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045b6:	2317      	movs	r3, #23
 80045b8:	18fb      	adds	r3, r7, r3
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	2b01      	cmp	r3, #1
 80045be:	d105      	bne.n	80045cc <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045c0:	4b9b      	ldr	r3, [pc, #620]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80045c2:	4a9b      	ldr	r2, [pc, #620]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80045c4:	69d2      	ldr	r2, [r2, #28]
 80045c6:	499c      	ldr	r1, [pc, #624]	; (8004838 <HAL_RCC_OscConfig+0x678>)
 80045c8:	400a      	ands	r2, r1
 80045ca:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2210      	movs	r2, #16
 80045d2:	4013      	ands	r3, r2
 80045d4:	d063      	beq.n	800469e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d12a      	bne.n	8004634 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80045de:	4b94      	ldr	r3, [pc, #592]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80045e0:	4a93      	ldr	r2, [pc, #588]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80045e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045e4:	2104      	movs	r1, #4
 80045e6:	430a      	orrs	r2, r1
 80045e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80045ea:	4b91      	ldr	r3, [pc, #580]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80045ec:	4a90      	ldr	r2, [pc, #576]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80045ee:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80045f0:	2101      	movs	r1, #1
 80045f2:	430a      	orrs	r2, r1
 80045f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045f6:	f7fc fa1f 	bl	8000a38 <HAL_GetTick>
 80045fa:	0003      	movs	r3, r0
 80045fc:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80045fe:	e008      	b.n	8004612 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004600:	f7fc fa1a 	bl	8000a38 <HAL_GetTick>
 8004604:	0002      	movs	r2, r0
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e12d      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004612:	4b87      	ldr	r3, [pc, #540]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004614:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004616:	2202      	movs	r2, #2
 8004618:	4013      	ands	r3, r2
 800461a:	d0f1      	beq.n	8004600 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800461c:	4a84      	ldr	r2, [pc, #528]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800461e:	4b84      	ldr	r3, [pc, #528]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004620:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004622:	21f8      	movs	r1, #248	; 0xf8
 8004624:	438b      	bics	r3, r1
 8004626:	0019      	movs	r1, r3
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	699b      	ldr	r3, [r3, #24]
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	430b      	orrs	r3, r1
 8004630:	6353      	str	r3, [r2, #52]	; 0x34
 8004632:	e034      	b.n	800469e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	3305      	adds	r3, #5
 800463a:	d111      	bne.n	8004660 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800463c:	4b7c      	ldr	r3, [pc, #496]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800463e:	4a7c      	ldr	r2, [pc, #496]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004640:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004642:	2104      	movs	r1, #4
 8004644:	438a      	bics	r2, r1
 8004646:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004648:	4a79      	ldr	r2, [pc, #484]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800464a:	4b79      	ldr	r3, [pc, #484]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800464c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464e:	21f8      	movs	r1, #248	; 0xf8
 8004650:	438b      	bics	r3, r1
 8004652:	0019      	movs	r1, r3
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	699b      	ldr	r3, [r3, #24]
 8004658:	00db      	lsls	r3, r3, #3
 800465a:	430b      	orrs	r3, r1
 800465c:	6353      	str	r3, [r2, #52]	; 0x34
 800465e:	e01e      	b.n	800469e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004660:	4b73      	ldr	r3, [pc, #460]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004662:	4a73      	ldr	r2, [pc, #460]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004664:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004666:	2104      	movs	r1, #4
 8004668:	430a      	orrs	r2, r1
 800466a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800466c:	4b70      	ldr	r3, [pc, #448]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800466e:	4a70      	ldr	r2, [pc, #448]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004670:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004672:	2101      	movs	r1, #1
 8004674:	438a      	bics	r2, r1
 8004676:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004678:	f7fc f9de 	bl	8000a38 <HAL_GetTick>
 800467c:	0003      	movs	r3, r0
 800467e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004680:	e008      	b.n	8004694 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004682:	f7fc f9d9 	bl	8000a38 <HAL_GetTick>
 8004686:	0002      	movs	r2, r0
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	1ad3      	subs	r3, r2, r3
 800468c:	2b02      	cmp	r3, #2
 800468e:	d901      	bls.n	8004694 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e0ec      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004694:	4b66      	ldr	r3, [pc, #408]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004698:	2202      	movs	r2, #2
 800469a:	4013      	ands	r3, r2
 800469c:	d1f1      	bne.n	8004682 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	2220      	movs	r2, #32
 80046a4:	4013      	ands	r3, r2
 80046a6:	d05c      	beq.n	8004762 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80046a8:	4b61      	ldr	r3, [pc, #388]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	220c      	movs	r2, #12
 80046ae:	4013      	ands	r3, r2
 80046b0:	2b0c      	cmp	r3, #12
 80046b2:	d00e      	beq.n	80046d2 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80046b4:	4b5e      	ldr	r3, [pc, #376]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	220c      	movs	r2, #12
 80046ba:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d114      	bne.n	80046ea <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80046c0:	4b5b      	ldr	r3, [pc, #364]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80046c2:	685a      	ldr	r2, [r3, #4]
 80046c4:	23c0      	movs	r3, #192	; 0xc0
 80046c6:	025b      	lsls	r3, r3, #9
 80046c8:	401a      	ands	r2, r3
 80046ca:	23c0      	movs	r3, #192	; 0xc0
 80046cc:	025b      	lsls	r3, r3, #9
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d10b      	bne.n	80046ea <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80046d2:	4b57      	ldr	r3, [pc, #348]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80046d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046d6:	2380      	movs	r3, #128	; 0x80
 80046d8:	025b      	lsls	r3, r3, #9
 80046da:	4013      	ands	r3, r2
 80046dc:	d040      	beq.n	8004760 <HAL_RCC_OscConfig+0x5a0>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d03c      	beq.n	8004760 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e0c1      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a1b      	ldr	r3, [r3, #32]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d01b      	beq.n	800472a <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80046f2:	4b4f      	ldr	r3, [pc, #316]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80046f4:	4a4e      	ldr	r2, [pc, #312]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80046f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046f8:	2180      	movs	r1, #128	; 0x80
 80046fa:	0249      	lsls	r1, r1, #9
 80046fc:	430a      	orrs	r2, r1
 80046fe:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004700:	f7fc f99a 	bl	8000a38 <HAL_GetTick>
 8004704:	0003      	movs	r3, r0
 8004706:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8004708:	e008      	b.n	800471c <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800470a:	f7fc f995 	bl	8000a38 <HAL_GetTick>
 800470e:	0002      	movs	r2, r0
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	2b02      	cmp	r3, #2
 8004716:	d901      	bls.n	800471c <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e0a8      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800471c:	4b44      	ldr	r3, [pc, #272]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800471e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	025b      	lsls	r3, r3, #9
 8004724:	4013      	ands	r3, r2
 8004726:	d0f0      	beq.n	800470a <HAL_RCC_OscConfig+0x54a>
 8004728:	e01b      	b.n	8004762 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800472a:	4b41      	ldr	r3, [pc, #260]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800472c:	4a40      	ldr	r2, [pc, #256]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800472e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004730:	4942      	ldr	r1, [pc, #264]	; (800483c <HAL_RCC_OscConfig+0x67c>)
 8004732:	400a      	ands	r2, r1
 8004734:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004736:	f7fc f97f 	bl	8000a38 <HAL_GetTick>
 800473a:	0003      	movs	r3, r0
 800473c:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800473e:	e008      	b.n	8004752 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004740:	f7fc f97a 	bl	8000a38 <HAL_GetTick>
 8004744:	0002      	movs	r2, r0
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	1ad3      	subs	r3, r2, r3
 800474a:	2b02      	cmp	r3, #2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e08d      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8004752:	4b37      	ldr	r3, [pc, #220]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004754:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004756:	2380      	movs	r3, #128	; 0x80
 8004758:	025b      	lsls	r3, r3, #9
 800475a:	4013      	ands	r3, r2
 800475c:	d1f0      	bne.n	8004740 <HAL_RCC_OscConfig+0x580>
 800475e:	e000      	b.n	8004762 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8004760:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004766:	2b00      	cmp	r3, #0
 8004768:	d100      	bne.n	800476c <HAL_RCC_OscConfig+0x5ac>
 800476a:	e07f      	b.n	800486c <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800476c:	4b30      	ldr	r3, [pc, #192]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	220c      	movs	r2, #12
 8004772:	4013      	ands	r3, r2
 8004774:	2b08      	cmp	r3, #8
 8004776:	d100      	bne.n	800477a <HAL_RCC_OscConfig+0x5ba>
 8004778:	e076      	b.n	8004868 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477e:	2b02      	cmp	r3, #2
 8004780:	d14b      	bne.n	800481a <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004782:	4b2b      	ldr	r3, [pc, #172]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004784:	4a2a      	ldr	r2, [pc, #168]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 8004786:	6812      	ldr	r2, [r2, #0]
 8004788:	492d      	ldr	r1, [pc, #180]	; (8004840 <HAL_RCC_OscConfig+0x680>)
 800478a:	400a      	ands	r2, r1
 800478c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800478e:	f7fc f953 	bl	8000a38 <HAL_GetTick>
 8004792:	0003      	movs	r3, r0
 8004794:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004798:	f7fc f94e 	bl	8000a38 <HAL_GetTick>
 800479c:	0002      	movs	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b02      	cmp	r3, #2
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e061      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80047aa:	4b21      	ldr	r3, [pc, #132]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	2380      	movs	r3, #128	; 0x80
 80047b0:	049b      	lsls	r3, r3, #18
 80047b2:	4013      	ands	r3, r2
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047b6:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80047b8:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	210f      	movs	r1, #15
 80047be:	438b      	bics	r3, r1
 80047c0:	0019      	movs	r1, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	430b      	orrs	r3, r1
 80047c8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80047ca:	4a19      	ldr	r2, [pc, #100]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80047cc:	4b18      	ldr	r3, [pc, #96]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	491c      	ldr	r1, [pc, #112]	; (8004844 <HAL_RCC_OscConfig+0x684>)
 80047d2:	4019      	ands	r1, r3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	4303      	orrs	r3, r0
 80047de:	430b      	orrs	r3, r1
 80047e0:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047e2:	4b13      	ldr	r3, [pc, #76]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80047e4:	4a12      	ldr	r2, [pc, #72]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 80047e6:	6812      	ldr	r2, [r2, #0]
 80047e8:	2180      	movs	r1, #128	; 0x80
 80047ea:	0449      	lsls	r1, r1, #17
 80047ec:	430a      	orrs	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047f0:	f7fc f922 	bl	8000a38 <HAL_GetTick>
 80047f4:	0003      	movs	r3, r0
 80047f6:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047f8:	e008      	b.n	800480c <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047fa:	f7fc f91d 	bl	8000a38 <HAL_GetTick>
 80047fe:	0002      	movs	r2, r0
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	2b02      	cmp	r3, #2
 8004806:	d901      	bls.n	800480c <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e030      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800480c:	4b08      	ldr	r3, [pc, #32]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	2380      	movs	r3, #128	; 0x80
 8004812:	049b      	lsls	r3, r3, #18
 8004814:	4013      	ands	r3, r2
 8004816:	d0f0      	beq.n	80047fa <HAL_RCC_OscConfig+0x63a>
 8004818:	e028      	b.n	800486c <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800481a:	4b05      	ldr	r3, [pc, #20]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800481c:	4a04      	ldr	r2, [pc, #16]	; (8004830 <HAL_RCC_OscConfig+0x670>)
 800481e:	6812      	ldr	r2, [r2, #0]
 8004820:	4907      	ldr	r1, [pc, #28]	; (8004840 <HAL_RCC_OscConfig+0x680>)
 8004822:	400a      	ands	r2, r1
 8004824:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004826:	f7fc f907 	bl	8000a38 <HAL_GetTick>
 800482a:	0003      	movs	r3, r0
 800482c:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800482e:	e014      	b.n	800485a <HAL_RCC_OscConfig+0x69a>
 8004830:	40021000 	.word	0x40021000
 8004834:	00001388 	.word	0x00001388
 8004838:	efffffff 	.word	0xefffffff
 800483c:	fffeffff 	.word	0xfffeffff
 8004840:	feffffff 	.word	0xfeffffff
 8004844:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004848:	f7fc f8f6 	bl	8000a38 <HAL_GetTick>
 800484c:	0002      	movs	r2, r0
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	2b02      	cmp	r3, #2
 8004854:	d901      	bls.n	800485a <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8004856:	2303      	movs	r3, #3
 8004858:	e009      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800485a:	4b07      	ldr	r3, [pc, #28]	; (8004878 <HAL_RCC_OscConfig+0x6b8>)
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	2380      	movs	r3, #128	; 0x80
 8004860:	049b      	lsls	r3, r3, #18
 8004862:	4013      	ands	r3, r2
 8004864:	d1f0      	bne.n	8004848 <HAL_RCC_OscConfig+0x688>
 8004866:	e001      	b.n	800486c <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e000      	b.n	800486e <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	0018      	movs	r0, r3
 8004870:	46bd      	mov	sp, r7
 8004872:	b006      	add	sp, #24
 8004874:	bd80      	pop	{r7, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	40021000 	.word	0x40021000

0800487c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800488a:	4b7a      	ldr	r3, [pc, #488]	; (8004a74 <HAL_RCC_ClockConfig+0x1f8>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2201      	movs	r2, #1
 8004890:	401a      	ands	r2, r3
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d211      	bcs.n	80048bc <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004898:	4b76      	ldr	r3, [pc, #472]	; (8004a74 <HAL_RCC_ClockConfig+0x1f8>)
 800489a:	4a76      	ldr	r2, [pc, #472]	; (8004a74 <HAL_RCC_ClockConfig+0x1f8>)
 800489c:	6812      	ldr	r2, [r2, #0]
 800489e:	2101      	movs	r1, #1
 80048a0:	438a      	bics	r2, r1
 80048a2:	0011      	movs	r1, r2
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80048aa:	4b72      	ldr	r3, [pc, #456]	; (8004a74 <HAL_RCC_ClockConfig+0x1f8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2201      	movs	r2, #1
 80048b0:	401a      	ands	r2, r3
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0d7      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2202      	movs	r2, #2
 80048c2:	4013      	ands	r3, r2
 80048c4:	d009      	beq.n	80048da <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c6:	4a6c      	ldr	r2, [pc, #432]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 80048c8:	4b6b      	ldr	r3, [pc, #428]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	21f0      	movs	r1, #240	; 0xf0
 80048ce:	438b      	bics	r3, r1
 80048d0:	0019      	movs	r1, r3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	430b      	orrs	r3, r1
 80048d8:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2201      	movs	r2, #1
 80048e0:	4013      	ands	r3, r2
 80048e2:	d100      	bne.n	80048e6 <HAL_RCC_ClockConfig+0x6a>
 80048e4:	e089      	b.n	80049fa <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d107      	bne.n	80048fe <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ee:	4b62      	ldr	r3, [pc, #392]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	2380      	movs	r3, #128	; 0x80
 80048f4:	029b      	lsls	r3, r3, #10
 80048f6:	4013      	ands	r3, r2
 80048f8:	d120      	bne.n	800493c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e0b6      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d107      	bne.n	8004916 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004906:	4b5c      	ldr	r3, [pc, #368]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	2380      	movs	r3, #128	; 0x80
 800490c:	049b      	lsls	r3, r3, #18
 800490e:	4013      	ands	r3, r2
 8004910:	d114      	bne.n	800493c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e0aa      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b03      	cmp	r3, #3
 800491c:	d107      	bne.n	800492e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800491e:	4b56      	ldr	r3, [pc, #344]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 8004920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004922:	2380      	movs	r3, #128	; 0x80
 8004924:	025b      	lsls	r3, r3, #9
 8004926:	4013      	ands	r3, r2
 8004928:	d108      	bne.n	800493c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e09e      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800492e:	4b52      	ldr	r3, [pc, #328]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2202      	movs	r2, #2
 8004934:	4013      	ands	r3, r2
 8004936:	d101      	bne.n	800493c <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e097      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800493c:	4a4e      	ldr	r2, [pc, #312]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 800493e:	4b4e      	ldr	r3, [pc, #312]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2103      	movs	r1, #3
 8004944:	438b      	bics	r3, r1
 8004946:	0019      	movs	r1, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	430b      	orrs	r3, r1
 800494e:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004950:	f7fc f872 	bl	8000a38 <HAL_GetTick>
 8004954:	0003      	movs	r3, r0
 8004956:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d111      	bne.n	8004984 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004960:	e009      	b.n	8004976 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004962:	f7fc f869 	bl	8000a38 <HAL_GetTick>
 8004966:	0002      	movs	r2, r0
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	4a43      	ldr	r2, [pc, #268]	; (8004a7c <HAL_RCC_ClockConfig+0x200>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d901      	bls.n	8004976 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8004972:	2303      	movs	r3, #3
 8004974:	e07a      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004976:	4b40      	ldr	r3, [pc, #256]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	220c      	movs	r2, #12
 800497c:	4013      	ands	r3, r2
 800497e:	2b04      	cmp	r3, #4
 8004980:	d1ef      	bne.n	8004962 <HAL_RCC_ClockConfig+0xe6>
 8004982:	e03a      	b.n	80049fa <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d111      	bne.n	80049b0 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800498c:	e009      	b.n	80049a2 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800498e:	f7fc f853 	bl	8000a38 <HAL_GetTick>
 8004992:	0002      	movs	r2, r0
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	4a38      	ldr	r2, [pc, #224]	; (8004a7c <HAL_RCC_ClockConfig+0x200>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e064      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049a2:	4b35      	ldr	r3, [pc, #212]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	220c      	movs	r2, #12
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b08      	cmp	r3, #8
 80049ac:	d1ef      	bne.n	800498e <HAL_RCC_ClockConfig+0x112>
 80049ae:	e024      	b.n	80049fa <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2b03      	cmp	r3, #3
 80049b6:	d11b      	bne.n	80049f0 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80049b8:	e009      	b.n	80049ce <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ba:	f7fc f83d 	bl	8000a38 <HAL_GetTick>
 80049be:	0002      	movs	r2, r0
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	4a2d      	ldr	r2, [pc, #180]	; (8004a7c <HAL_RCC_ClockConfig+0x200>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e04e      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80049ce:	4b2a      	ldr	r3, [pc, #168]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	220c      	movs	r2, #12
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b0c      	cmp	r3, #12
 80049d8:	d1ef      	bne.n	80049ba <HAL_RCC_ClockConfig+0x13e>
 80049da:	e00e      	b.n	80049fa <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049dc:	f7fc f82c 	bl	8000a38 <HAL_GetTick>
 80049e0:	0002      	movs	r2, r0
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <HAL_RCC_ClockConfig+0x200>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d901      	bls.n	80049f0 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80049ec:	2303      	movs	r3, #3
 80049ee:	e03d      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049f0:	4b21      	ldr	r3, [pc, #132]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	220c      	movs	r2, #12
 80049f6:	4013      	ands	r3, r2
 80049f8:	d1f0      	bne.n	80049dc <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80049fa:	4b1e      	ldr	r3, [pc, #120]	; (8004a74 <HAL_RCC_ClockConfig+0x1f8>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	2201      	movs	r2, #1
 8004a00:	401a      	ands	r2, r3
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d911      	bls.n	8004a2c <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a08:	4b1a      	ldr	r3, [pc, #104]	; (8004a74 <HAL_RCC_ClockConfig+0x1f8>)
 8004a0a:	4a1a      	ldr	r2, [pc, #104]	; (8004a74 <HAL_RCC_ClockConfig+0x1f8>)
 8004a0c:	6812      	ldr	r2, [r2, #0]
 8004a0e:	2101      	movs	r1, #1
 8004a10:	438a      	bics	r2, r1
 8004a12:	0011      	movs	r1, r2
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	430a      	orrs	r2, r1
 8004a18:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004a1a:	4b16      	ldr	r3, [pc, #88]	; (8004a74 <HAL_RCC_ClockConfig+0x1f8>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	401a      	ands	r2, r3
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e01f      	b.n	8004a6c <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2204      	movs	r2, #4
 8004a32:	4013      	ands	r3, r2
 8004a34:	d008      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004a36:	4a10      	ldr	r2, [pc, #64]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 8004a38:	4b0f      	ldr	r3, [pc, #60]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	4910      	ldr	r1, [pc, #64]	; (8004a80 <HAL_RCC_ClockConfig+0x204>)
 8004a3e:	4019      	ands	r1, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	430b      	orrs	r3, r1
 8004a46:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004a48:	f000 f882 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 8004a4c:	0001      	movs	r1, r0
 8004a4e:	4b0a      	ldr	r3, [pc, #40]	; (8004a78 <HAL_RCC_ClockConfig+0x1fc>)
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	091b      	lsrs	r3, r3, #4
 8004a54:	220f      	movs	r2, #15
 8004a56:	4013      	ands	r3, r2
 8004a58:	4a0a      	ldr	r2, [pc, #40]	; (8004a84 <HAL_RCC_ClockConfig+0x208>)
 8004a5a:	5cd3      	ldrb	r3, [r2, r3]
 8004a5c:	000a      	movs	r2, r1
 8004a5e:	40da      	lsrs	r2, r3
 8004a60:	4b09      	ldr	r3, [pc, #36]	; (8004a88 <HAL_RCC_ClockConfig+0x20c>)
 8004a62:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004a64:	2003      	movs	r0, #3
 8004a66:	f7fb ffbf 	bl	80009e8 <HAL_InitTick>
  
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	b004      	add	sp, #16
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40022000 	.word	0x40022000
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	00001388 	.word	0x00001388
 8004a80:	fffff8ff 	.word	0xfffff8ff
 8004a84:	08006a70 	.word	0x08006a70
 8004a88:	2000000c 	.word	0x2000000c

08004a8c <HAL_RCC_MCOConfig>:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
#endif
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08a      	sub	sp, #40	; 0x28
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
  
  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8004a98:	2314      	movs	r3, #20
 8004a9a:	18fb      	adds	r3, r7, r3
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	605a      	str	r2, [r3, #4]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004aa0:	2314      	movs	r3, #20
 8004aa2:	18fb      	adds	r3, r7, r3
 8004aa4:	2203      	movs	r2, #3
 8004aa6:	60da      	str	r2, [r3, #12]
  gpio.Pull      = GPIO_NOPULL;
 8004aa8:	2314      	movs	r3, #20
 8004aaa:	18fb      	adds	r3, r7, r3
 8004aac:	2200      	movs	r2, #0
 8004aae:	609a      	str	r2, [r3, #8]
  gpio.Pin       = MCO1_PIN;
 8004ab0:	2314      	movs	r3, #20
 8004ab2:	18fb      	adds	r3, r7, r3
 8004ab4:	2280      	movs	r2, #128	; 0x80
 8004ab6:	0052      	lsls	r2, r2, #1
 8004ab8:	601a      	str	r2, [r3, #0]
  gpio.Alternate = GPIO_AF0_MCO;
 8004aba:	2314      	movs	r3, #20
 8004abc:	18fb      	adds	r3, r7, r3
 8004abe:	2200      	movs	r2, #0
 8004ac0:	611a      	str	r2, [r3, #16]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8004ac2:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <HAL_RCC_MCOConfig+0x80>)
 8004ac4:	4a11      	ldr	r2, [pc, #68]	; (8004b0c <HAL_RCC_MCOConfig+0x80>)
 8004ac6:	6952      	ldr	r2, [r2, #20]
 8004ac8:	2180      	movs	r1, #128	; 0x80
 8004aca:	0289      	lsls	r1, r1, #10
 8004acc:	430a      	orrs	r2, r1
 8004ace:	615a      	str	r2, [r3, #20]
 8004ad0:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <HAL_RCC_MCOConfig+0x80>)
 8004ad2:	695a      	ldr	r2, [r3, #20]
 8004ad4:	2380      	movs	r3, #128	; 0x80
 8004ad6:	029b      	lsls	r3, r3, #10
 8004ad8:	4013      	ands	r3, r2
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	693b      	ldr	r3, [r7, #16]
  
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8004ade:	2314      	movs	r3, #20
 8004ae0:	18fa      	adds	r2, r7, r3
 8004ae2:	2390      	movs	r3, #144	; 0x90
 8004ae4:	05db      	lsls	r3, r3, #23
 8004ae6:	0011      	movs	r1, r2
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7ff f829 	bl	8003b40 <HAL_GPIO_Init>
  
  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8004aee:	4b07      	ldr	r3, [pc, #28]	; (8004b0c <HAL_RCC_MCOConfig+0x80>)
 8004af0:	4a06      	ldr	r2, [pc, #24]	; (8004b0c <HAL_RCC_MCOConfig+0x80>)
 8004af2:	6852      	ldr	r2, [r2, #4]
 8004af4:	4906      	ldr	r1, [pc, #24]	; (8004b10 <HAL_RCC_MCOConfig+0x84>)
 8004af6:	4011      	ands	r1, r2
 8004af8:	68b8      	ldr	r0, [r7, #8]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	4302      	orrs	r2, r0
 8004afe:	430a      	orrs	r2, r1
 8004b00:	605a      	str	r2, [r3, #4]
}
 8004b02:	46c0      	nop			; (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b00a      	add	sp, #40	; 0x28
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			; (mov r8, r8)
 8004b0c:	40021000 	.word	0x40021000
 8004b10:	80ffffff 	.word	0x80ffffff

08004b14 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to 
  *         the Cortex-M0 NMI (Non-Maskable Interrupt) exception vector.  
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004b18:	4b04      	ldr	r3, [pc, #16]	; (8004b2c <HAL_RCC_EnableCSS+0x18>)
 8004b1a:	4a04      	ldr	r2, [pc, #16]	; (8004b2c <HAL_RCC_EnableCSS+0x18>)
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	2180      	movs	r1, #128	; 0x80
 8004b20:	0309      	lsls	r1, r1, #12
 8004b22:	430a      	orrs	r2, r1
 8004b24:	601a      	str	r2, [r3, #0]
}
 8004b26:	46c0      	nop			; (mov r8, r8)
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}
 8004b2c:	40021000 	.word	0x40021000

08004b30 <HAL_RCC_DisableCSS>:
/**
  * @brief  Disables the Clock Security System.
  * @retval None
  */
void HAL_RCC_DisableCSS(void)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004b34:	4b04      	ldr	r3, [pc, #16]	; (8004b48 <HAL_RCC_DisableCSS+0x18>)
 8004b36:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <HAL_RCC_DisableCSS+0x18>)
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	4904      	ldr	r1, [pc, #16]	; (8004b4c <HAL_RCC_DisableCSS+0x1c>)
 8004b3c:	400a      	ands	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]
}
 8004b40:	46c0      	nop			; (mov r8, r8)
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	46c0      	nop			; (mov r8, r8)
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	fff7ffff 	.word	0xfff7ffff

08004b50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b50:	b590      	push	{r4, r7, lr}
 8004b52:	b08f      	sub	sp, #60	; 0x3c
 8004b54:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004b56:	2314      	movs	r3, #20
 8004b58:	18fb      	adds	r3, r7, r3
 8004b5a:	4a37      	ldr	r2, [pc, #220]	; (8004c38 <HAL_RCC_GetSysClockFreq+0xe8>)
 8004b5c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b5e:	c313      	stmia	r3!, {r0, r1, r4}
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004b64:	1d3b      	adds	r3, r7, #4
 8004b66:	4a35      	ldr	r2, [pc, #212]	; (8004c3c <HAL_RCC_GetSysClockFreq+0xec>)
 8004b68:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004b6a:	c313      	stmia	r3!, {r0, r1, r4}
 8004b6c:	6812      	ldr	r2, [r2, #0]
 8004b6e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004b70:	2300      	movs	r3, #0
 8004b72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b74:	2300      	movs	r3, #0
 8004b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b78:	2300      	movs	r3, #0
 8004b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004b80:	2300      	movs	r3, #0
 8004b82:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004b84:	4b2e      	ldr	r3, [pc, #184]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b8c:	220c      	movs	r2, #12
 8004b8e:	4013      	ands	r3, r2
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d006      	beq.n	8004ba2 <HAL_RCC_GetSysClockFreq+0x52>
 8004b94:	2b0c      	cmp	r3, #12
 8004b96:	d043      	beq.n	8004c20 <HAL_RCC_GetSysClockFreq+0xd0>
 8004b98:	2b04      	cmp	r3, #4
 8004b9a:	d144      	bne.n	8004c26 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b9c:	4b29      	ldr	r3, [pc, #164]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004b9e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ba0:	e044      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	0c9b      	lsrs	r3, r3, #18
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	4013      	ands	r3, r2
 8004baa:	2214      	movs	r2, #20
 8004bac:	18ba      	adds	r2, r7, r2
 8004bae:	5cd3      	ldrb	r3, [r2, r3]
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004bb2:	4b23      	ldr	r3, [pc, #140]	; (8004c40 <HAL_RCC_GetSysClockFreq+0xf0>)
 8004bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb6:	220f      	movs	r2, #15
 8004bb8:	4013      	ands	r3, r2
 8004bba:	1d3a      	adds	r2, r7, #4
 8004bbc:	5cd3      	ldrb	r3, [r2, r3]
 8004bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004bc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bc2:	23c0      	movs	r3, #192	; 0xc0
 8004bc4:	025b      	lsls	r3, r3, #9
 8004bc6:	401a      	ands	r2, r3
 8004bc8:	2380      	movs	r3, #128	; 0x80
 8004bca:	025b      	lsls	r3, r3, #9
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d109      	bne.n	8004be4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8004bd0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bd2:	481c      	ldr	r0, [pc, #112]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004bd4:	f7fb faa8 	bl	8000128 <__udivsi3>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	001a      	movs	r2, r3
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	4353      	muls	r3, r2
 8004be0:	637b      	str	r3, [r7, #52]	; 0x34
 8004be2:	e01a      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8004be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004be6:	23c0      	movs	r3, #192	; 0xc0
 8004be8:	025b      	lsls	r3, r3, #9
 8004bea:	401a      	ands	r2, r3
 8004bec:	23c0      	movs	r3, #192	; 0xc0
 8004bee:	025b      	lsls	r3, r3, #9
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	d109      	bne.n	8004c08 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 8004bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004bf6:	4814      	ldr	r0, [pc, #80]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004bf8:	f7fb fa96 	bl	8000128 <__udivsi3>
 8004bfc:	0003      	movs	r3, r0
 8004bfe:	001a      	movs	r2, r3
 8004c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c02:	4353      	muls	r3, r2
 8004c04:	637b      	str	r3, [r7, #52]	; 0x34
 8004c06:	e008      	b.n	8004c1a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8004c08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004c0a:	480e      	ldr	r0, [pc, #56]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004c0c:	f7fb fa8c 	bl	8000128 <__udivsi3>
 8004c10:	0003      	movs	r3, r0
 8004c12:	001a      	movs	r2, r3
 8004c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c16:	4353      	muls	r3, r2
 8004c18:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c1e:	e005      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8004c20:	4b09      	ldr	r3, [pc, #36]	; (8004c48 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004c22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c24:	e002      	b.n	8004c2c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c26:	4b07      	ldr	r3, [pc, #28]	; (8004c44 <HAL_RCC_GetSysClockFreq+0xf4>)
 8004c28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c2a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b00f      	add	sp, #60	; 0x3c
 8004c34:	bd90      	pop	{r4, r7, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	08006a2c 	.word	0x08006a2c
 8004c3c:	08006a3c 	.word	0x08006a3c
 8004c40:	40021000 	.word	0x40021000
 8004c44:	007a1200 	.word	0x007a1200
 8004c48:	02dc6c00 	.word	0x02dc6c00

08004c4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c50:	4b02      	ldr	r3, [pc, #8]	; (8004c5c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c52:	681b      	ldr	r3, [r3, #0]
}
 8004c54:	0018      	movs	r0, r3
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	46c0      	nop			; (mov r8, r8)
 8004c5c:	2000000c 	.word	0x2000000c

08004c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004c64:	f7ff fff2 	bl	8004c4c <HAL_RCC_GetHCLKFreq>
 8004c68:	0001      	movs	r1, r0
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	0a1b      	lsrs	r3, r3, #8
 8004c70:	2207      	movs	r2, #7
 8004c72:	4013      	ands	r3, r2
 8004c74:	4a04      	ldr	r2, [pc, #16]	; (8004c88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c76:	5cd3      	ldrb	r3, [r2, r3]
 8004c78:	40d9      	lsrs	r1, r3
 8004c7a:	000b      	movs	r3, r1
}    
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	40021000 	.word	0x40021000
 8004c88:	08006a80 	.word	0x08006a80

08004c8c <HAL_RCC_GetOscConfig>:
  * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that 
  * will be configured.
  * @retval None
  */
void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);

  /* Set all possible values for the Oscillator type parameter ---------------*/
  RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI  \
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	221f      	movs	r2, #31
 8004c98:	601a      	str	r2, [r3, #0]
                  | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_HSI14;
#if defined(RCC_HSI48_SUPPORT)
  RCC_OscInitStruct->OscillatorType |= RCC_OSCILLATORTYPE_HSI48;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	2220      	movs	r2, #32
 8004ca0:	431a      	orrs	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	601a      	str	r2, [r3, #0]
#endif /* RCC_HSI48_SUPPORT */


  /* Get the HSE configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
 8004ca6:	4b4e      	ldr	r3, [pc, #312]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	2380      	movs	r3, #128	; 0x80
 8004cac:	02db      	lsls	r3, r3, #11
 8004cae:	401a      	ands	r2, r3
 8004cb0:	2380      	movs	r3, #128	; 0x80
 8004cb2:	02db      	lsls	r3, r3, #11
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d103      	bne.n	8004cc0 <HAL_RCC_GetOscConfig+0x34>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2205      	movs	r2, #5
 8004cbc:	605a      	str	r2, [r3, #4]
 8004cbe:	e00f      	b.n	8004ce0 <HAL_RCC_GetOscConfig+0x54>
  }
  else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
 8004cc0:	4b47      	ldr	r3, [pc, #284]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	2380      	movs	r3, #128	; 0x80
 8004cc6:	025b      	lsls	r3, r3, #9
 8004cc8:	401a      	ands	r2, r3
 8004cca:	2380      	movs	r3, #128	; 0x80
 8004ccc:	025b      	lsls	r3, r3, #9
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d103      	bne.n	8004cda <HAL_RCC_GetOscConfig+0x4e>
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_ON;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	e002      	b.n	8004ce0 <HAL_RCC_GetOscConfig+0x54>
  }
  else
  {
    RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	605a      	str	r2, [r3, #4]
  }

  /* Get the HSI configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
 8004ce0:	4b3f      	ldr	r3, [pc, #252]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	4013      	ands	r3, r2
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d103      	bne.n	8004cf4 <HAL_RCC_GetOscConfig+0x68>
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_ON;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	60da      	str	r2, [r3, #12]
 8004cf2:	e002      	b.n	8004cfa <HAL_RCC_GetOscConfig+0x6e>
  }
  else
  {
    RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	60da      	str	r2, [r3, #12]
  }
  
  RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_BitNumber);
 8004cfa:	4b39      	ldr	r3, [pc, #228]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	08db      	lsrs	r3, r3, #3
 8004d00:	221f      	movs	r2, #31
 8004d02:	401a      	ands	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	611a      	str	r2, [r3, #16]
  
  /* Get the LSE configuration -----------------------------------------------*/
  if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
 8004d08:	4b35      	ldr	r3, [pc, #212]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	2204      	movs	r2, #4
 8004d0e:	4013      	ands	r3, r2
 8004d10:	2b04      	cmp	r3, #4
 8004d12:	d103      	bne.n	8004d1c <HAL_RCC_GetOscConfig+0x90>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2205      	movs	r2, #5
 8004d18:	609a      	str	r2, [r3, #8]
 8004d1a:	e00c      	b.n	8004d36 <HAL_RCC_GetOscConfig+0xaa>
  }
  else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
 8004d1c:	4b30      	ldr	r3, [pc, #192]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004d1e:	6a1b      	ldr	r3, [r3, #32]
 8004d20:	2201      	movs	r2, #1
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d103      	bne.n	8004d30 <HAL_RCC_GetOscConfig+0xa4>
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_ON;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	609a      	str	r2, [r3, #8]
 8004d2e:	e002      	b.n	8004d36 <HAL_RCC_GetOscConfig+0xaa>
  }
  else
  {
    RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	609a      	str	r2, [r3, #8]
  }
  
  /* Get the LSI configuration -----------------------------------------------*/
  if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
 8004d36:	4b2a      	ldr	r3, [pc, #168]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	2b01      	cmp	r3, #1
 8004d40:	d103      	bne.n	8004d4a <HAL_RCC_GetOscConfig+0xbe>
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_ON;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	61da      	str	r2, [r3, #28]
 8004d48:	e002      	b.n	8004d50 <HAL_RCC_GetOscConfig+0xc4>
  }
  else
  {
    RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	61da      	str	r2, [r3, #28]
  }
  
  /* Get the HSI14 configuration -----------------------------------------------*/
  if((RCC->CR2 & RCC_CR2_HSI14ON) == RCC_CR2_HSI14ON)
 8004d50:	4b23      	ldr	r3, [pc, #140]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d54:	2201      	movs	r2, #1
 8004d56:	4013      	ands	r3, r2
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d103      	bne.n	8004d64 <HAL_RCC_GetOscConfig+0xd8>
  {
    RCC_OscInitStruct->HSI14State = RCC_HSI_ON;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	615a      	str	r2, [r3, #20]
 8004d62:	e002      	b.n	8004d6a <HAL_RCC_GetOscConfig+0xde>
  }
  else
  {
    RCC_OscInitStruct->HSI14State = RCC_HSI_OFF;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2200      	movs	r2, #0
 8004d68:	615a      	str	r2, [r3, #20]
  }

  RCC_OscInitStruct->HSI14CalibrationValue = (uint32_t)((RCC->CR2 & RCC_CR2_HSI14TRIM) >> RCC_HSI14TRIM_BIT_NUMBER);
 8004d6a:	4b1d      	ldr	r3, [pc, #116]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	08db      	lsrs	r3, r3, #3
 8004d70:	221f      	movs	r2, #31
 8004d72:	401a      	ands	r2, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	619a      	str	r2, [r3, #24]
  
#if defined(RCC_HSI48_SUPPORT)
  /* Get the HSI48 configuration if any-----------------------------------------*/
  RCC_OscInitStruct->HSI48State = __HAL_RCC_GET_HSI48_STATE();
 8004d78:	4b19      	ldr	r3, [pc, #100]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004d7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d7c:	2380      	movs	r3, #128	; 0x80
 8004d7e:	025b      	lsls	r3, r3, #9
 8004d80:	4013      	ands	r3, r2
 8004d82:	1e5a      	subs	r2, r3, #1
 8004d84:	4193      	sbcs	r3, r2
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	001a      	movs	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	621a      	str	r2, [r3, #32]
#endif /* RCC_HSI48_SUPPORT */

  /* Get the PLL configuration -----------------------------------------------*/
  if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
 8004d8e:	4b14      	ldr	r3, [pc, #80]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	2380      	movs	r3, #128	; 0x80
 8004d94:	045b      	lsls	r3, r3, #17
 8004d96:	401a      	ands	r2, r3
 8004d98:	2380      	movs	r3, #128	; 0x80
 8004d9a:	045b      	lsls	r3, r3, #17
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d103      	bne.n	8004da8 <HAL_RCC_GetOscConfig+0x11c>
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2202      	movs	r2, #2
 8004da4:	625a      	str	r2, [r3, #36]	; 0x24
 8004da6:	e002      	b.n	8004dae <HAL_RCC_GetOscConfig+0x122>
  }
  else
  {
    RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	625a      	str	r2, [r3, #36]	; 0x24
  }
  RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLSRC);
 8004dae:	4b0c      	ldr	r3, [pc, #48]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	23c0      	movs	r3, #192	; 0xc0
 8004db4:	025b      	lsls	r3, r3, #9
 8004db6:	401a      	ands	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct->PLL.PLLMUL = (uint32_t)(RCC->CFGR & RCC_CFGR_PLLMUL);
 8004dbc:	4b08      	ldr	r3, [pc, #32]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	23f0      	movs	r3, #240	; 0xf0
 8004dc2:	039b      	lsls	r3, r3, #14
 8004dc4:	401a      	ands	r2, r3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct->PLL.PREDIV = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV);
 8004dca:	4b05      	ldr	r3, [pc, #20]	; (8004de0 <HAL_RCC_GetOscConfig+0x154>)
 8004dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dce:	220f      	movs	r2, #15
 8004dd0:	401a      	ands	r2, r3
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dd6:	46c0      	nop			; (mov r8, r8)
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	b002      	add	sp, #8
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	40021000 	.word	0x40021000

08004de4 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2207      	movs	r2, #7
 8004df2:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004df4:	4b0e      	ldr	r3, [pc, #56]	; (8004e30 <HAL_RCC_GetClockConfig+0x4c>)
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2203      	movs	r2, #3
 8004dfa:	401a      	ands	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8004e00:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <HAL_RCC_GetClockConfig+0x4c>)
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	22f0      	movs	r2, #240	; 0xf0
 8004e06:	401a      	ands	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8004e0c:	4b08      	ldr	r3, [pc, #32]	; (8004e30 <HAL_RCC_GetClockConfig+0x4c>)
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	23e0      	movs	r3, #224	; 0xe0
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	401a      	ands	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60da      	str	r2, [r3, #12]
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 8004e1a:	4b06      	ldr	r3, [pc, #24]	; (8004e34 <HAL_RCC_GetClockConfig+0x50>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	401a      	ands	r2, r3
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	601a      	str	r2, [r3, #0]
}
 8004e26:	46c0      	nop			; (mov r8, r8)
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	b002      	add	sp, #8
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	40021000 	.word	0x40021000
 8004e34:	40022000 	.word	0x40022000

08004e38 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004e3c:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	2280      	movs	r2, #128	; 0x80
 8004e42:	4013      	ands	r3, r2
 8004e44:	2b80      	cmp	r3, #128	; 0x80
 8004e46:	d104      	bne.n	8004e52 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004e48:	f000 f80a 	bl	8004e60 <HAL_RCC_CSSCallback>
    
    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004e4c:	4b03      	ldr	r3, [pc, #12]	; (8004e5c <HAL_RCC_NMI_IRQHandler+0x24>)
 8004e4e:	2280      	movs	r2, #128	; 0x80
 8004e50:	701a      	strb	r2, [r3, #0]
  }
}
 8004e52:	46c0      	nop			; (mov r8, r8)
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40021000 	.word	0x40021000
 8004e5c:	4002100a 	.word	0x4002100a

08004e60 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */ 
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
	...

08004e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004e78:	2300      	movs	r3, #0
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	2380      	movs	r3, #128	; 0x80
 8004e82:	025b      	lsls	r3, r3, #9
 8004e84:	4013      	ands	r3, r2
 8004e86:	d100      	bne.n	8004e8a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004e88:	e08e      	b.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004e8a:	2317      	movs	r3, #23
 8004e8c:	18fb      	adds	r3, r7, r3
 8004e8e:	2200      	movs	r2, #0
 8004e90:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e92:	4b6d      	ldr	r3, [pc, #436]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004e94:	69da      	ldr	r2, [r3, #28]
 8004e96:	2380      	movs	r3, #128	; 0x80
 8004e98:	055b      	lsls	r3, r3, #21
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	d111      	bne.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e9e:	4b6a      	ldr	r3, [pc, #424]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004ea0:	4a69      	ldr	r2, [pc, #420]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004ea2:	69d2      	ldr	r2, [r2, #28]
 8004ea4:	2180      	movs	r1, #128	; 0x80
 8004ea6:	0549      	lsls	r1, r1, #21
 8004ea8:	430a      	orrs	r2, r1
 8004eaa:	61da      	str	r2, [r3, #28]
 8004eac:	4b66      	ldr	r3, [pc, #408]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004eae:	69da      	ldr	r2, [r3, #28]
 8004eb0:	2380      	movs	r3, #128	; 0x80
 8004eb2:	055b      	lsls	r3, r3, #21
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004eba:	2317      	movs	r3, #23
 8004ebc:	18fb      	adds	r3, r7, r3
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec2:	4b62      	ldr	r3, [pc, #392]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	2380      	movs	r3, #128	; 0x80
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4013      	ands	r3, r2
 8004ecc:	d11a      	bne.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ece:	4b5f      	ldr	r3, [pc, #380]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ed0:	4a5e      	ldr	r2, [pc, #376]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004ed2:	6812      	ldr	r2, [r2, #0]
 8004ed4:	2180      	movs	r1, #128	; 0x80
 8004ed6:	0049      	lsls	r1, r1, #1
 8004ed8:	430a      	orrs	r2, r1
 8004eda:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004edc:	f7fb fdac 	bl	8000a38 <HAL_GetTick>
 8004ee0:	0003      	movs	r3, r0
 8004ee2:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee4:	e008      	b.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee6:	f7fb fda7 	bl	8000a38 <HAL_GetTick>
 8004eea:	0002      	movs	r2, r0
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b64      	cmp	r3, #100	; 0x64
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e0a3      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef8:	4b54      	ldr	r3, [pc, #336]	; (800504c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	2380      	movs	r3, #128	; 0x80
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	4013      	ands	r3, r2
 8004f02:	d0f0      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f04:	4b50      	ldr	r3, [pc, #320]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f06:	6a1a      	ldr	r2, [r3, #32]
 8004f08:	23c0      	movs	r3, #192	; 0xc0
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d034      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685a      	ldr	r2, [r3, #4]
 8004f1a:	23c0      	movs	r3, #192	; 0xc0
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	401a      	ands	r2, r3
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d02c      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004f26:	4b48      	ldr	r3, [pc, #288]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f28:	6a1b      	ldr	r3, [r3, #32]
 8004f2a:	4a49      	ldr	r2, [pc, #292]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004f30:	4b45      	ldr	r3, [pc, #276]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f32:	4a45      	ldr	r2, [pc, #276]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f34:	6a12      	ldr	r2, [r2, #32]
 8004f36:	2180      	movs	r1, #128	; 0x80
 8004f38:	0249      	lsls	r1, r1, #9
 8004f3a:	430a      	orrs	r2, r1
 8004f3c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004f3e:	4b42      	ldr	r3, [pc, #264]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f40:	4a41      	ldr	r2, [pc, #260]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f42:	6a12      	ldr	r2, [r2, #32]
 8004f44:	4943      	ldr	r1, [pc, #268]	; (8005054 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8004f46:	400a      	ands	r2, r1
 8004f48:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004f4a:	4b3f      	ldr	r3, [pc, #252]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f4c:	68fa      	ldr	r2, [r7, #12]
 8004f4e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	2201      	movs	r2, #1
 8004f54:	4013      	ands	r3, r2
 8004f56:	d013      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f58:	f7fb fd6e 	bl	8000a38 <HAL_GetTick>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f60:	e009      	b.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f62:	f7fb fd69 	bl	8000a38 <HAL_GetTick>
 8004f66:	0002      	movs	r2, r0
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	1ad3      	subs	r3, r2, r3
 8004f6c:	4a3a      	ldr	r2, [pc, #232]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e064      	b.n	8005040 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f76:	4b34      	ldr	r3, [pc, #208]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	2202      	movs	r2, #2
 8004f7c:	4013      	ands	r3, r2
 8004f7e:	d0f0      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f80:	4a31      	ldr	r2, [pc, #196]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f82:	4b31      	ldr	r3, [pc, #196]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	4932      	ldr	r1, [pc, #200]	; (8005050 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8004f88:	4019      	ands	r1, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004f92:	2317      	movs	r3, #23
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d105      	bne.n	8004fa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f9c:	4b2a      	ldr	r3, [pc, #168]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004f9e:	4a2a      	ldr	r2, [pc, #168]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004fa0:	69d2      	ldr	r2, [r2, #28]
 8004fa2:	492e      	ldr	r1, [pc, #184]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8004fa4:	400a      	ands	r2, r1
 8004fa6:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2201      	movs	r2, #1
 8004fae:	4013      	ands	r3, r2
 8004fb0:	d009      	beq.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004fb2:	4a25      	ldr	r2, [pc, #148]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004fb4:	4b24      	ldr	r3, [pc, #144]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	2103      	movs	r1, #3
 8004fba:	438b      	bics	r3, r1
 8004fbc:	0019      	movs	r1, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	430b      	orrs	r3, r1
 8004fc4:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2202      	movs	r2, #2
 8004fcc:	4013      	ands	r3, r2
 8004fce:	d008      	beq.n	8004fe2 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004fd0:	4a1d      	ldr	r2, [pc, #116]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004fd2:	4b1d      	ldr	r3, [pc, #116]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd6:	4922      	ldr	r1, [pc, #136]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8004fd8:	4019      	ands	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	430b      	orrs	r3, r1
 8004fe0:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	2380      	movs	r3, #128	; 0x80
 8004fe8:	02db      	lsls	r3, r3, #11
 8004fea:	4013      	ands	r3, r2
 8004fec:	d008      	beq.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004fee:	4a16      	ldr	r2, [pc, #88]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004ff0:	4b15      	ldr	r3, [pc, #84]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ff4:	491b      	ldr	r1, [pc, #108]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8004ff6:	4019      	ands	r1, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	430b      	orrs	r3, r1
 8004ffe:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	2220      	movs	r2, #32
 8005006:	4013      	ands	r3, r2
 8005008:	d009      	beq.n	800501e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800500a:	4a0f      	ldr	r2, [pc, #60]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800500c:	4b0e      	ldr	r3, [pc, #56]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800500e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005010:	2110      	movs	r1, #16
 8005012:	438b      	bics	r3, r1
 8005014:	0019      	movs	r1, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	430b      	orrs	r3, r1
 800501c:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	2380      	movs	r3, #128	; 0x80
 8005024:	00db      	lsls	r3, r3, #3
 8005026:	4013      	ands	r3, r2
 8005028:	d009      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800502a:	4a07      	ldr	r2, [pc, #28]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800502c:	4b06      	ldr	r3, [pc, #24]	; (8005048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	2140      	movs	r1, #64	; 0x40
 8005032:	438b      	bics	r3, r1
 8005034:	0019      	movs	r1, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	430b      	orrs	r3, r1
 800503c:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800503e:	2300      	movs	r3, #0
}
 8005040:	0018      	movs	r0, r3
 8005042:	46bd      	mov	sp, r7
 8005044:	b006      	add	sp, #24
 8005046:	bd80      	pop	{r7, pc}
 8005048:	40021000 	.word	0x40021000
 800504c:	40007000 	.word	0x40007000
 8005050:	fffffcff 	.word	0xfffffcff
 8005054:	fffeffff 	.word	0xfffeffff
 8005058:	00001388 	.word	0x00001388
 800505c:	efffffff 	.word	0xefffffff
 8005060:	fffcffff 	.word	0xfffcffff
 8005064:	fff3ffff 	.word	0xfff3ffff

08005068 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         returns the configuration information for the Extended Peripherals clocks
  *         (USART, RTC, I2C, CEC and USB).
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  /* Set all possible values for the extended clock type parameter------------*/
  /* Common part first */
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_RTC;  
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a20      	ldr	r2, [pc, #128]	; (80050f4 <HAL_RCCEx_GetPeriphCLKConfig+0x8c>)
 8005074:	601a      	str	r2, [r3, #0]
  /* Get the RTC configuration --------------------------------------------*/
  PeriphClkInit->RTCClockSelection = __HAL_RCC_GET_RTC_SOURCE();
 8005076:	4b20      	ldr	r3, [pc, #128]	; (80050f8 <HAL_RCCEx_GetPeriphCLKConfig+0x90>)
 8005078:	6a1a      	ldr	r2, [r3, #32]
 800507a:	23c0      	movs	r3, #192	; 0xc0
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	401a      	ands	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	605a      	str	r2, [r3, #4]
  /* Get the USART1 clock configuration --------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8005084:	4b1c      	ldr	r3, [pc, #112]	; (80050f8 <HAL_RCCEx_GetPeriphCLKConfig+0x90>)
 8005086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005088:	2203      	movs	r2, #3
 800508a:	401a      	ands	r2, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	609a      	str	r2, [r3, #8]
  /* Get the I2C1 clock source -----------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8005090:	4b19      	ldr	r3, [pc, #100]	; (80050f8 <HAL_RCCEx_GetPeriphCLKConfig+0x90>)
 8005092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005094:	2210      	movs	r2, #16
 8005096:	401a      	ands	r2, r3
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	615a      	str	r2, [r3, #20]

#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USART2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2202      	movs	r2, #2
 80050a2:	431a      	orrs	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	601a      	str	r2, [r3, #0]
  /* Get the USART2 clock source ---------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80050a8:	4b13      	ldr	r3, [pc, #76]	; (80050f8 <HAL_RCCEx_GetPeriphCLKConfig+0x90>)
 80050aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ac:	23c0      	movs	r3, #192	; 0xc0
 80050ae:	029b      	lsls	r3, r3, #10
 80050b0:	401a      	ands	r2, r3
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60da      	str	r2, [r3, #12]
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_USART3;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	2280      	movs	r2, #128	; 0x80
 80050bc:	02d2      	lsls	r2, r2, #11
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]
  /* Get the USART3 clock source ---------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80050c4:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <HAL_RCCEx_GetPeriphCLKConfig+0x90>)
 80050c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c8:	23c0      	movs	r3, #192	; 0xc0
 80050ca:	031b      	lsls	r3, r3, #12
 80050cc:	401a      	ands	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	611a      	str	r2, [r3, #16]

#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_CEC;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	2280      	movs	r2, #128	; 0x80
 80050d8:	00d2      	lsls	r2, r2, #3
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	601a      	str	r2, [r3, #0]
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80050e0:	4b05      	ldr	r3, [pc, #20]	; (80050f8 <HAL_RCCEx_GetPeriphCLKConfig+0x90>)
 80050e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e4:	2240      	movs	r2, #64	; 0x40
 80050e6:	401a      	ands	r2, r3
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	619a      	str	r2, [r3, #24]
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b002      	add	sp, #8
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	00010021 	.word	0x00010021
 80050f8:	40021000 	.word	0x40021000

080050fc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_CEC     CEC peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* frequency == 0 : means that no available frequency for the peripheral */
  uint32_t frequency = 0U;
 8005104:	2300      	movs	r3, #0
 8005106:	60fb      	str	r3, [r7, #12]
  
  uint32_t srcclk = 0U;
 8005108:	2300      	movs	r3, #0
 800510a:	60bb      	str	r3, [r7, #8]
#endif /* USB */

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2b20      	cmp	r3, #32
 8005110:	d100      	bne.n	8005114 <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8005112:	e0dd      	b.n	80052d0 <HAL_RCCEx_GetPeriphCLKFreq+0x1d4>
 8005114:	d805      	bhi.n	8005122 <HAL_RCCEx_GetPeriphCLKFreq+0x26>
 8005116:	2b01      	cmp	r3, #1
 8005118:	d044      	beq.n	80051a4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 800511a:	2b02      	cmp	r3, #2
 800511c:	d100      	bne.n	8005120 <HAL_RCCEx_GetPeriphCLKFreq+0x24>
 800511e:	e06f      	b.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
      break;
    }
#endif /* CEC */
  default: 
    {
      break;
 8005120:	e115      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
  switch (PeriphClk)
 8005122:	2280      	movs	r2, #128	; 0x80
 8005124:	0252      	lsls	r2, r2, #9
 8005126:	4293      	cmp	r3, r2
 8005128:	d00a      	beq.n	8005140 <HAL_RCCEx_GetPeriphCLKFreq+0x44>
 800512a:	2280      	movs	r2, #128	; 0x80
 800512c:	02d2      	lsls	r2, r2, #11
 800512e:	4293      	cmp	r3, r2
 8005130:	d100      	bne.n	8005134 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005132:	e09a      	b.n	800526a <HAL_RCCEx_GetPeriphCLKFreq+0x16e>
 8005134:	2280      	movs	r2, #128	; 0x80
 8005136:	00d2      	lsls	r2, r2, #3
 8005138:	4293      	cmp	r3, r2
 800513a:	d100      	bne.n	800513e <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 800513c:	e0e0      	b.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x204>
      break;
 800513e:	e106      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8005140:	4b85      	ldr	r3, [pc, #532]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005142:	6a1a      	ldr	r2, [r3, #32]
 8005144:	23c0      	movs	r3, #192	; 0xc0
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4013      	ands	r3, r2
 800514a:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	2380      	movs	r3, #128	; 0x80
 8005150:	005b      	lsls	r3, r3, #1
 8005152:	429a      	cmp	r2, r3
 8005154:	d108      	bne.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
 8005156:	4b80      	ldr	r3, [pc, #512]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005158:	6a1b      	ldr	r3, [r3, #32]
 800515a:	2202      	movs	r2, #2
 800515c:	4013      	ands	r3, r2
 800515e:	d003      	beq.n	8005168 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
        frequency = LSE_VALUE;
 8005160:	2380      	movs	r3, #128	; 0x80
 8005162:	021b      	lsls	r3, r3, #8
 8005164:	60fb      	str	r3, [r7, #12]
 8005166:	e01c      	b.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
      else if ((srcclk == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005168:	68ba      	ldr	r2, [r7, #8]
 800516a:	2380      	movs	r3, #128	; 0x80
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	429a      	cmp	r2, r3
 8005170:	d107      	bne.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
 8005172:	4b79      	ldr	r3, [pc, #484]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005176:	2202      	movs	r2, #2
 8005178:	4013      	ands	r3, r2
 800517a:	d002      	beq.n	8005182 <HAL_RCCEx_GetPeriphCLKFreq+0x86>
        frequency = LSI_VALUE;
 800517c:	4b77      	ldr	r3, [pc, #476]	; (800535c <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e00f      	b.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
      else if ((srcclk == RCC_RTCCLKSOURCE_HSE_DIV32) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	23c0      	movs	r3, #192	; 0xc0
 8005186:	009b      	lsls	r3, r3, #2
 8005188:	429a      	cmp	r2, r3
 800518a:	d000      	beq.n	800518e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
 800518c:	e0d4      	b.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 800518e:	4b72      	ldr	r3, [pc, #456]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005190:	681a      	ldr	r2, [r3, #0]
 8005192:	2380      	movs	r3, #128	; 0x80
 8005194:	029b      	lsls	r3, r3, #10
 8005196:	4013      	ands	r3, r2
 8005198:	d100      	bne.n	800519c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
 800519a:	e0cd      	b.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
        frequency = HSE_VALUE / 32U;
 800519c:	4b70      	ldr	r3, [pc, #448]	; (8005360 <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 800519e:	60fb      	str	r3, [r7, #12]
      break;
 80051a0:	e0ca      	b.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
 80051a2:	e0c9      	b.n	8005338 <HAL_RCCEx_GetPeriphCLKFreq+0x23c>
      srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80051a4:	4b6c      	ldr	r3, [pc, #432]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80051a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a8:	2203      	movs	r2, #3
 80051aa:	4013      	ands	r3, r2
 80051ac:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART1CLKSOURCE_PCLK1)
 80051ae:	68bb      	ldr	r3, [r7, #8]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d104      	bne.n	80051be <HAL_RCCEx_GetPeriphCLKFreq+0xc2>
        frequency = HAL_RCC_GetPCLK1Freq();
 80051b4:	f7ff fd54 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 80051b8:	0003      	movs	r3, r0
 80051ba:	60fb      	str	r3, [r7, #12]
      break;
 80051bc:	e0be      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
      else if ((srcclk == RCC_USART1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	2b03      	cmp	r3, #3
 80051c2:	d107      	bne.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 80051c4:	4b64      	ldr	r3, [pc, #400]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2202      	movs	r2, #2
 80051ca:	4013      	ands	r3, r2
 80051cc:	d002      	beq.n	80051d4 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
        frequency = HSI_VALUE;
 80051ce:	4b65      	ldr	r3, [pc, #404]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80051d0:	60fb      	str	r3, [r7, #12]
      break;
 80051d2:	e0b3      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
      else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	2b01      	cmp	r3, #1
 80051d8:	d104      	bne.n	80051e4 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
        frequency = HAL_RCC_GetSysClockFreq();
 80051da:	f7ff fcb9 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 80051de:	0003      	movs	r3, r0
 80051e0:	60fb      	str	r3, [r7, #12]
      break;
 80051e2:	e0ab      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
      else if ((srcclk == RCC_USART1CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d000      	beq.n	80051ec <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
 80051ea:	e0a7      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 80051ec:	4b5a      	ldr	r3, [pc, #360]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	2202      	movs	r2, #2
 80051f2:	4013      	ands	r3, r2
 80051f4:	d100      	bne.n	80051f8 <HAL_RCCEx_GetPeriphCLKFreq+0xfc>
 80051f6:	e0a1      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
        frequency = LSE_VALUE;
 80051f8:	2380      	movs	r3, #128	; 0x80
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	60fb      	str	r3, [r7, #12]
      break;
 80051fe:	e09d      	b.n	800533c <HAL_RCCEx_GetPeriphCLKFreq+0x240>
      srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8005200:	4b55      	ldr	r3, [pc, #340]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005204:	23c0      	movs	r3, #192	; 0xc0
 8005206:	029b      	lsls	r3, r3, #10
 8005208:	4013      	ands	r3, r2
 800520a:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 800520c:	68bb      	ldr	r3, [r7, #8]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d104      	bne.n	800521c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = HAL_RCC_GetPCLK1Freq();
 8005212:	f7ff fd25 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 8005216:	0003      	movs	r3, r0
 8005218:	60fb      	str	r3, [r7, #12]
      break;
 800521a:	e091      	b.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
      else if ((srcclk == RCC_USART2CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	23c0      	movs	r3, #192	; 0xc0
 8005220:	029b      	lsls	r3, r3, #10
 8005222:	429a      	cmp	r2, r3
 8005224:	d107      	bne.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
 8005226:	4b4c      	ldr	r3, [pc, #304]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2202      	movs	r2, #2
 800522c:	4013      	ands	r3, r2
 800522e:	d002      	beq.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
        frequency = HSI_VALUE;
 8005230:	4b4c      	ldr	r3, [pc, #304]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 8005232:	60fb      	str	r3, [r7, #12]
      break;
 8005234:	e084      	b.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
      else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 8005236:	68ba      	ldr	r2, [r7, #8]
 8005238:	2380      	movs	r3, #128	; 0x80
 800523a:	025b      	lsls	r3, r3, #9
 800523c:	429a      	cmp	r2, r3
 800523e:	d104      	bne.n	800524a <HAL_RCCEx_GetPeriphCLKFreq+0x14e>
        frequency = HAL_RCC_GetSysClockFreq();
 8005240:	f7ff fc86 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 8005244:	0003      	movs	r3, r0
 8005246:	60fb      	str	r3, [r7, #12]
      break;
 8005248:	e07a      	b.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
      else if ((srcclk == RCC_USART2CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	2380      	movs	r3, #128	; 0x80
 800524e:	029b      	lsls	r3, r3, #10
 8005250:	429a      	cmp	r2, r3
 8005252:	d000      	beq.n	8005256 <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
 8005254:	e074      	b.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8005256:	4b40      	ldr	r3, [pc, #256]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	2202      	movs	r2, #2
 800525c:	4013      	ands	r3, r2
 800525e:	d100      	bne.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8005260:	e06e      	b.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
        frequency = LSE_VALUE;
 8005262:	2380      	movs	r3, #128	; 0x80
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	60fb      	str	r3, [r7, #12]
      break;
 8005268:	e06a      	b.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
      srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800526a:	4b3b      	ldr	r3, [pc, #236]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 800526c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800526e:	23c0      	movs	r3, #192	; 0xc0
 8005270:	031b      	lsls	r3, r3, #12
 8005272:	4013      	ands	r3, r2
 8005274:	60bb      	str	r3, [r7, #8]
      if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d104      	bne.n	8005286 <HAL_RCCEx_GetPeriphCLKFreq+0x18a>
        frequency = HAL_RCC_GetPCLK1Freq();
 800527c:	f7ff fcf0 	bl	8004c60 <HAL_RCC_GetPCLK1Freq>
 8005280:	0003      	movs	r3, r0
 8005282:	60fb      	str	r3, [r7, #12]
      break;
 8005284:	e05e      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      else if ((srcclk == RCC_USART3CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	23c0      	movs	r3, #192	; 0xc0
 800528a:	031b      	lsls	r3, r3, #12
 800528c:	429a      	cmp	r2, r3
 800528e:	d107      	bne.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8005290:	4b31      	ldr	r3, [pc, #196]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2202      	movs	r2, #2
 8005296:	4013      	ands	r3, r2
 8005298:	d002      	beq.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
        frequency = HSI_VALUE;
 800529a:	4b32      	ldr	r3, [pc, #200]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800529c:	60fb      	str	r3, [r7, #12]
      break;
 800529e:	e051      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	2380      	movs	r3, #128	; 0x80
 80052a4:	02db      	lsls	r3, r3, #11
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d104      	bne.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1b8>
        frequency = HAL_RCC_GetSysClockFreq();
 80052aa:	f7ff fc51 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 80052ae:	0003      	movs	r3, r0
 80052b0:	60fb      	str	r3, [r7, #12]
      break;
 80052b2:	e047      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      else if ((srcclk == RCC_USART3CLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	2380      	movs	r3, #128	; 0x80
 80052b8:	031b      	lsls	r3, r3, #12
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d142      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
 80052be:	4b26      	ldr	r3, [pc, #152]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	2202      	movs	r2, #2
 80052c4:	4013      	ands	r3, r2
 80052c6:	d03d      	beq.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = LSE_VALUE;
 80052c8:	2380      	movs	r3, #128	; 0x80
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	60fb      	str	r3, [r7, #12]
      break;
 80052ce:	e039      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80052d0:	4b21      	ldr	r3, [pc, #132]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80052d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d4:	2210      	movs	r2, #16
 80052d6:	4013      	ands	r3, r2
 80052d8:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_I2C1CLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d107      	bne.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 80052e0:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	2202      	movs	r2, #2
 80052e6:	4013      	ands	r3, r2
 80052e8:	d002      	beq.n	80052f0 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
        frequency = HSI_VALUE;
 80052ea:	4b1e      	ldr	r3, [pc, #120]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 80052ec:	60fb      	str	r3, [r7, #12]
      break;
 80052ee:	e02b      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
      else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	2b10      	cmp	r3, #16
 80052f4:	d128      	bne.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
        frequency = HAL_RCC_GetSysClockFreq();
 80052f6:	f7ff fc2b 	bl	8004b50 <HAL_RCC_GetSysClockFreq>
 80052fa:	0003      	movs	r3, r0
 80052fc:	60fb      	str	r3, [r7, #12]
      break;
 80052fe:	e023      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x24c>
      srcclk = __HAL_RCC_GET_CEC_SOURCE();
 8005300:	4b15      	ldr	r3, [pc, #84]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	2240      	movs	r2, #64	; 0x40
 8005306:	4013      	ands	r3, r2
 8005308:	60bb      	str	r3, [r7, #8]
      if ((srcclk == RCC_CECCLKSOURCE_HSI) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)))
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d107      	bne.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8005310:	4b11      	ldr	r3, [pc, #68]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2202      	movs	r2, #2
 8005316:	4013      	ands	r3, r2
 8005318:	d002      	beq.n	8005320 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
        frequency = HSI_VALUE;
 800531a:	4b12      	ldr	r3, [pc, #72]	; (8005364 <HAL_RCCEx_GetPeriphCLKFreq+0x268>)
 800531c:	60fb      	str	r3, [r7, #12]
      break;
 800531e:	e015      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      else if ((srcclk == RCC_CECCLKSOURCE_LSE) && (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)))
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d112      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x250>
 8005326:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8005328:	6a1b      	ldr	r3, [r3, #32]
 800532a:	2202      	movs	r2, #2
 800532c:	4013      	ands	r3, r2
 800532e:	d00d      	beq.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x250>
        frequency = LSE_VALUE;
 8005330:	2380      	movs	r3, #128	; 0x80
 8005332:	021b      	lsls	r3, r3, #8
 8005334:	60fb      	str	r3, [r7, #12]
      break;
 8005336:	e009      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x250>
      break;
 8005338:	46c0      	nop			; (mov r8, r8)
 800533a:	e008      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      break;
 800533c:	46c0      	nop			; (mov r8, r8)
 800533e:	e006      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      break;
 8005340:	46c0      	nop			; (mov r8, r8)
 8005342:	e004      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      break;
 8005344:	46c0      	nop			; (mov r8, r8)
 8005346:	e002      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      break;
 8005348:	46c0      	nop			; (mov r8, r8)
 800534a:	e000      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x252>
      break;
 800534c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return(frequency);
 800534e:	68fb      	ldr	r3, [r7, #12]
}
 8005350:	0018      	movs	r0, r3
 8005352:	46bd      	mov	sp, r7
 8005354:	b004      	add	sp, #16
 8005356:	bd80      	pop	{r7, pc}
 8005358:	40021000 	.word	0x40021000
 800535c:	00009c40 	.word	0x00009c40
 8005360:	0003d090 	.word	0x0003d090
 8005364:	007a1200 	.word	0x007a1200

08005368 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b084      	sub	sp, #16
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
  uint32_t value = 0U;
 8005370:	2300      	movs	r3, #0
 8005372:	60fb      	str	r3, [r7, #12]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 8005374:	4b1b      	ldr	r3, [pc, #108]	; (80053e4 <HAL_RCCEx_CRSConfig+0x7c>)
 8005376:	4a1b      	ldr	r2, [pc, #108]	; (80053e4 <HAL_RCCEx_CRSConfig+0x7c>)
 8005378:	6912      	ldr	r2, [r2, #16]
 800537a:	2180      	movs	r1, #128	; 0x80
 800537c:	0509      	lsls	r1, r1, #20
 800537e:	430a      	orrs	r2, r1
 8005380:	611a      	str	r2, [r3, #16]
  __HAL_RCC_CRS_RELEASE_RESET();
 8005382:	4b18      	ldr	r3, [pc, #96]	; (80053e4 <HAL_RCCEx_CRSConfig+0x7c>)
 8005384:	4a17      	ldr	r2, [pc, #92]	; (80053e4 <HAL_RCCEx_CRSConfig+0x7c>)
 8005386:	6912      	ldr	r2, [r2, #16]
 8005388:	4917      	ldr	r1, [pc, #92]	; (80053e8 <HAL_RCCEx_CRSConfig+0x80>)
 800538a:	400a      	ands	r2, r1
 800538c:	611a      	str	r2, [r3, #16]

  /* Set the SYNCDIV[2:0] bits according to Prescaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	431a      	orrs	r2, r3
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	4313      	orrs	r3, r2
 80053a8:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_BITNUMBER);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	041b      	lsls	r3, r3, #16
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 80053b6:	4b0d      	ldr	r3, [pc, #52]	; (80053ec <HAL_RCCEx_CRSConfig+0x84>)
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	605a      	str	r2, [r3, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_BITNUMBER));
 80053bc:	4a0b      	ldr	r2, [pc, #44]	; (80053ec <HAL_RCCEx_CRSConfig+0x84>)
 80053be:	4b0b      	ldr	r3, [pc, #44]	; (80053ec <HAL_RCCEx_CRSConfig+0x84>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	490b      	ldr	r1, [pc, #44]	; (80053f0 <HAL_RCCEx_CRSConfig+0x88>)
 80053c4:	4019      	ands	r1, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	430b      	orrs	r3, r1
 80053ce:	6013      	str	r3, [r2, #0]
  
  /* START AUTOMATIC SYNCHRONIZATION*/
  
  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 80053d0:	4b06      	ldr	r3, [pc, #24]	; (80053ec <HAL_RCCEx_CRSConfig+0x84>)
 80053d2:	4a06      	ldr	r2, [pc, #24]	; (80053ec <HAL_RCCEx_CRSConfig+0x84>)
 80053d4:	6812      	ldr	r2, [r2, #0]
 80053d6:	2160      	movs	r1, #96	; 0x60
 80053d8:	430a      	orrs	r2, r1
 80053da:	601a      	str	r2, [r3, #0]
}
 80053dc:	46c0      	nop			; (mov r8, r8)
 80053de:	46bd      	mov	sp, r7
 80053e0:	b004      	add	sp, #16
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	40021000 	.word	0x40021000
 80053e8:	f7ffffff 	.word	0xf7ffffff
 80053ec:	40006c00 	.word	0x40006c00
 80053f0:	ffffc0ff 	.word	0xffffc0ff

080053f4 <HAL_RCCEx_CRSSoftwareSynchronizationGenerate>:
/**
  * @brief  Generate the software synchronization event
  * @retval None
  */
void HAL_RCCEx_CRSSoftwareSynchronizationGenerate(void)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	af00      	add	r7, sp, #0
  SET_BIT(CRS->CR, CRS_CR_SWSYNC);
 80053f8:	4b04      	ldr	r3, [pc, #16]	; (800540c <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x18>)
 80053fa:	4a04      	ldr	r2, [pc, #16]	; (800540c <HAL_RCCEx_CRSSoftwareSynchronizationGenerate+0x18>)
 80053fc:	6812      	ldr	r2, [r2, #0]
 80053fe:	2180      	movs	r1, #128	; 0x80
 8005400:	430a      	orrs	r2, r1
 8005402:	601a      	str	r2, [r3, #0]
}
 8005404:	46c0      	nop			; (mov r8, r8)
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	46c0      	nop			; (mov r8, r8)
 800540c:	40006c00 	.word	0x40006c00

08005410 <HAL_RCCEx_CRSGetSynchronizationInfo>:
  * @brief  Return synchronization info 
  * @param  pSynchroInfo Pointer on RCC_CRSSynchroInfoTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSGetSynchronizationInfo(RCC_CRSSynchroInfoTypeDef *pSynchroInfo)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b082      	sub	sp, #8
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(pSynchroInfo != NULL);
  
  /* Get the reload value */
  pSynchroInfo->ReloadValue = (uint32_t)(READ_BIT(CRS->CFGR, CRS_CFGR_RELOAD));
 8005418:	4b0f      	ldr	r3, [pc, #60]	; (8005458 <HAL_RCCEx_CRSGetSynchronizationInfo+0x48>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	041b      	lsls	r3, r3, #16
 800541e:	0c1a      	lsrs	r2, r3, #16
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	601a      	str	r2, [r3, #0]
  
  /* Get HSI48 oscillator smooth trimming */
  pSynchroInfo->HSI48CalibrationValue = (uint32_t)(READ_BIT(CRS->CR, CRS_CR_TRIM) >> CRS_CR_TRIM_BITNUMBER);
 8005424:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <HAL_RCCEx_CRSGetSynchronizationInfo+0x48>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	0a1b      	lsrs	r3, r3, #8
 800542a:	223f      	movs	r2, #63	; 0x3f
 800542c:	401a      	ands	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	605a      	str	r2, [r3, #4]

  /* Get Frequency error capture */
  pSynchroInfo->FreqErrorCapture = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FECAP) >> CRS_ISR_FECAP_BITNUMBER);
 8005432:	4b09      	ldr	r3, [pc, #36]	; (8005458 <HAL_RCCEx_CRSGetSynchronizationInfo+0x48>)
 8005434:	689b      	ldr	r3, [r3, #8]
 8005436:	0c1b      	lsrs	r3, r3, #16
 8005438:	041b      	lsls	r3, r3, #16
 800543a:	0c1a      	lsrs	r2, r3, #16
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	609a      	str	r2, [r3, #8]

  /* Get Frequency error direction */
  pSynchroInfo->FreqErrorDirection = (uint32_t)(READ_BIT(CRS->ISR, CRS_ISR_FEDIR));
 8005440:	4b05      	ldr	r3, [pc, #20]	; (8005458 <HAL_RCCEx_CRSGetSynchronizationInfo+0x48>)
 8005442:	689a      	ldr	r2, [r3, #8]
 8005444:	2380      	movs	r3, #128	; 0x80
 8005446:	021b      	lsls	r3, r3, #8
 8005448:	401a      	ands	r2, r3
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60da      	str	r2, [r3, #12]
}
 800544e:	46c0      	nop			; (mov r8, r8)
 8005450:	46bd      	mov	sp, r7
 8005452:	b002      	add	sp, #8
 8005454:	bd80      	pop	{r7, pc}
 8005456:	46c0      	nop			; (mov r8, r8)
 8005458:	40006c00 	.word	0x40006c00

0800545c <HAL_RCCEx_CRSWaitSynchronization>:
*            @arg @ref RCC_CRS_SYNCERR
*            @arg @ref RCC_CRS_SYNCMISS
*            @arg @ref RCC_CRS_TRIMOVF
*/
uint32_t HAL_RCCEx_CRSWaitSynchronization(uint32_t Timeout)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  uint32_t crsstatus = RCC_CRS_NONE;
 8005464:	2300      	movs	r3, #0
 8005466:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	60bb      	str	r3, [r7, #8]
  
  /* Get timeout */
  tickstart = HAL_GetTick();
 800546c:	f7fb fae4 	bl	8000a38 <HAL_GetTick>
 8005470:	0003      	movs	r3, r0
 8005472:	60bb      	str	r3, [r7, #8]
  
  /* Wait for CRS flag or timeout detection */
  do
  {
    if(Timeout != HAL_MAX_DELAY)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	3301      	adds	r3, #1
 8005478:	d00c      	beq.n	8005494 <HAL_RCCEx_CRSWaitSynchronization+0x38>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <HAL_RCCEx_CRSWaitSynchronization+0x34>
 8005480:	f7fb fada 	bl	8000a38 <HAL_GetTick>
 8005484:	0002      	movs	r2, r0
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	1ad2      	subs	r2, r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	429a      	cmp	r2, r3
 800548e:	d901      	bls.n	8005494 <HAL_RCCEx_CRSWaitSynchronization+0x38>
      {
        crsstatus = RCC_CRS_TIMEOUT;
 8005490:	2301      	movs	r3, #1
 8005492:	60fb      	str	r3, [r7, #12]
      }
    }
    /* Check CRS SYNCOK flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCOK))
 8005494:	4b2d      	ldr	r3, [pc, #180]	; (800554c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	2201      	movs	r2, #1
 800549a:	4013      	ands	r3, r2
 800549c:	2b01      	cmp	r3, #1
 800549e:	d106      	bne.n	80054ae <HAL_RCCEx_CRSWaitSynchronization+0x52>
    {
      /* CRS SYNC event OK */
      crsstatus |= RCC_CRS_SYNCOK;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2202      	movs	r2, #2
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]
    
      /* Clear CRS SYNC event OK bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCOK);
 80054a8:	4b28      	ldr	r3, [pc, #160]	; (800554c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 80054aa:	2201      	movs	r2, #1
 80054ac:	60da      	str	r2, [r3, #12]
    }
    
    /* Check CRS SYNCWARN flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCWARN))
 80054ae:	4b27      	ldr	r3, [pc, #156]	; (800554c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	2202      	movs	r2, #2
 80054b4:	4013      	ands	r3, r2
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d106      	bne.n	80054c8 <HAL_RCCEx_CRSWaitSynchronization+0x6c>
    {
      /* CRS SYNC warning */
      crsstatus |= RCC_CRS_SYNCWARN;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2204      	movs	r2, #4
 80054be:	4313      	orrs	r3, r2
 80054c0:	60fb      	str	r3, [r7, #12]
    
      /* Clear CRS SYNCWARN bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCWARN);
 80054c2:	4b22      	ldr	r3, [pc, #136]	; (800554c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 80054c4:	2202      	movs	r2, #2
 80054c6:	60da      	str	r2, [r3, #12]
    }
    
    /* Check CRS TRIM overflow flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_TRIMOVF))
 80054c8:	4b20      	ldr	r3, [pc, #128]	; (800554c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	2380      	movs	r3, #128	; 0x80
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	401a      	ands	r2, r3
 80054d2:	2380      	movs	r3, #128	; 0x80
 80054d4:	00db      	lsls	r3, r3, #3
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d106      	bne.n	80054e8 <HAL_RCCEx_CRSWaitSynchronization+0x8c>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_TRIMOVF;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2220      	movs	r2, #32
 80054de:	4313      	orrs	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
    
      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_TRIMOVF);
 80054e2:	4b1a      	ldr	r3, [pc, #104]	; (800554c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 80054e4:	2204      	movs	r2, #4
 80054e6:	60da      	str	r2, [r3, #12]
    }
    
    /* Check CRS Error flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCERR))
 80054e8:	4b18      	ldr	r3, [pc, #96]	; (800554c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 80054ea:	689a      	ldr	r2, [r3, #8]
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	401a      	ands	r2, r3
 80054f2:	2380      	movs	r3, #128	; 0x80
 80054f4:	005b      	lsls	r3, r3, #1
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d106      	bne.n	8005508 <HAL_RCCEx_CRSWaitSynchronization+0xac>
    {
      /* CRS SYNC Error */
      crsstatus |= RCC_CRS_SYNCERR;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2208      	movs	r2, #8
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]
    
      /* Clear CRS Error bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCERR);
 8005502:	4b12      	ldr	r3, [pc, #72]	; (800554c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8005504:	2204      	movs	r2, #4
 8005506:	60da      	str	r2, [r3, #12]
    }
    
    /* Check CRS SYNC Missed flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_SYNCMISS))
 8005508:	4b10      	ldr	r3, [pc, #64]	; (800554c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	2380      	movs	r3, #128	; 0x80
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	401a      	ands	r2, r3
 8005512:	2380      	movs	r3, #128	; 0x80
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	429a      	cmp	r2, r3
 8005518:	d106      	bne.n	8005528 <HAL_RCCEx_CRSWaitSynchronization+0xcc>
    {
      /* CRS SYNC Missed */
      crsstatus |= RCC_CRS_SYNCMISS;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2210      	movs	r2, #16
 800551e:	4313      	orrs	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
    
      /* Clear CRS SYNC Missed bit */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_SYNCMISS);
 8005522:	4b0a      	ldr	r3, [pc, #40]	; (800554c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8005524:	2204      	movs	r2, #4
 8005526:	60da      	str	r2, [r3, #12]
    }
    
    /* Check CRS Expected SYNC flag  */
    if(__HAL_RCC_CRS_GET_FLAG(RCC_CRS_FLAG_ESYNC))
 8005528:	4b08      	ldr	r3, [pc, #32]	; (800554c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2208      	movs	r2, #8
 800552e:	4013      	ands	r3, r2
 8005530:	2b08      	cmp	r3, #8
 8005532:	d102      	bne.n	800553a <HAL_RCCEx_CRSWaitSynchronization+0xde>
    {
      /* frequency error counter reached a zero value */
      __HAL_RCC_CRS_CLEAR_FLAG(RCC_CRS_FLAG_ESYNC);
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <HAL_RCCEx_CRSWaitSynchronization+0xf0>)
 8005536:	2208      	movs	r2, #8
 8005538:	60da      	str	r2, [r3, #12]
    }
  } while(RCC_CRS_NONE == crsstatus);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d099      	beq.n	8005474 <HAL_RCCEx_CRSWaitSynchronization+0x18>

  return crsstatus;
 8005540:	68fb      	ldr	r3, [r7, #12]
}
 8005542:	0018      	movs	r0, r3
 8005544:	46bd      	mov	sp, r7
 8005546:	b004      	add	sp, #16
 8005548:	bd80      	pop	{r7, pc}
 800554a:	46c0      	nop			; (mov r8, r8)
 800554c:	40006c00 	.word	0x40006c00

08005550 <HAL_RCCEx_CRS_IRQHandler>:
/**
  * @brief Handle the Clock Recovery System interrupt request.
  * @retval None
  */
void HAL_RCCEx_CRS_IRQHandler(void)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b084      	sub	sp, #16
 8005554:	af00      	add	r7, sp, #0
  uint32_t crserror = RCC_CRS_NONE;
 8005556:	2300      	movs	r3, #0
 8005558:	60fb      	str	r3, [r7, #12]
  /* Get current IT flags and IT sources values */
  uint32_t itflags = READ_REG(CRS->ISR);
 800555a:	4b2f      	ldr	r3, [pc, #188]	; (8005618 <HAL_RCCEx_CRS_IRQHandler+0xc8>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	60bb      	str	r3, [r7, #8]
  uint32_t itsources = READ_REG(CRS->CR);
 8005560:	4b2d      	ldr	r3, [pc, #180]	; (8005618 <HAL_RCCEx_CRS_IRQHandler+0xc8>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	607b      	str	r3, [r7, #4]

  /* Check CRS SYNCOK flag  */
  if(((itflags & RCC_CRS_FLAG_SYNCOK) != RESET) && ((itsources & RCC_CRS_IT_SYNCOK) != RESET))
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	2201      	movs	r2, #1
 800556a:	4013      	ands	r3, r2
 800556c:	d009      	beq.n	8005582 <HAL_RCCEx_CRS_IRQHandler+0x32>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	4013      	ands	r3, r2
 8005574:	d005      	beq.n	8005582 <HAL_RCCEx_CRS_IRQHandler+0x32>
  {
    /* Clear CRS SYNC event OK flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCOKC);
 8005576:	4b28      	ldr	r3, [pc, #160]	; (8005618 <HAL_RCCEx_CRS_IRQHandler+0xc8>)
 8005578:	2201      	movs	r2, #1
 800557a:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncOkCallback();
 800557c:	f000 f84e 	bl	800561c <HAL_RCCEx_CRS_SyncOkCallback>
 8005580:	e046      	b.n	8005610 <HAL_RCCEx_CRS_IRQHandler+0xc0>
  }
  /* Check CRS SYNCWARN flag  */
  else if(((itflags & RCC_CRS_FLAG_SYNCWARN) != RESET) && ((itsources & RCC_CRS_IT_SYNCWARN) != RESET))
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2202      	movs	r2, #2
 8005586:	4013      	ands	r3, r2
 8005588:	d009      	beq.n	800559e <HAL_RCCEx_CRS_IRQHandler+0x4e>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2202      	movs	r2, #2
 800558e:	4013      	ands	r3, r2
 8005590:	d005      	beq.n	800559e <HAL_RCCEx_CRS_IRQHandler+0x4e>
  {
    /* Clear CRS SYNCWARN flag */
    WRITE_REG(CRS->ICR, CRS_ICR_SYNCWARNC);
 8005592:	4b21      	ldr	r3, [pc, #132]	; (8005618 <HAL_RCCEx_CRS_IRQHandler+0xc8>)
 8005594:	2202      	movs	r2, #2
 8005596:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_SyncWarnCallback();
 8005598:	f000 f845 	bl	8005626 <HAL_RCCEx_CRS_SyncWarnCallback>
 800559c:	e038      	b.n	8005610 <HAL_RCCEx_CRS_IRQHandler+0xc0>
  }
  /* Check CRS Expected SYNC flag  */
  else if(((itflags & RCC_CRS_FLAG_ESYNC) != RESET) && ((itsources & RCC_CRS_IT_ESYNC) != RESET))
 800559e:	68bb      	ldr	r3, [r7, #8]
 80055a0:	2208      	movs	r2, #8
 80055a2:	4013      	ands	r3, r2
 80055a4:	d009      	beq.n	80055ba <HAL_RCCEx_CRS_IRQHandler+0x6a>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2208      	movs	r2, #8
 80055aa:	4013      	ands	r3, r2
 80055ac:	d005      	beq.n	80055ba <HAL_RCCEx_CRS_IRQHandler+0x6a>
  {
    /* frequency error counter reached a zero value */
    WRITE_REG(CRS->ICR, CRS_ICR_ESYNCC);
 80055ae:	4b1a      	ldr	r3, [pc, #104]	; (8005618 <HAL_RCCEx_CRS_IRQHandler+0xc8>)
 80055b0:	2208      	movs	r2, #8
 80055b2:	60da      	str	r2, [r3, #12]

    /* user callback */
    HAL_RCCEx_CRS_ExpectedSyncCallback();
 80055b4:	f000 f83c 	bl	8005630 <HAL_RCCEx_CRS_ExpectedSyncCallback>
 80055b8:	e02a      	b.n	8005610 <HAL_RCCEx_CRS_IRQHandler+0xc0>
  }
  /* Check CRS Error flags  */
  else
  {
    if(((itflags & RCC_CRS_FLAG_ERR) != RESET) && ((itsources & RCC_CRS_IT_ERR) != RESET))
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	2204      	movs	r2, #4
 80055be:	4013      	ands	r3, r2
 80055c0:	d026      	beq.n	8005610 <HAL_RCCEx_CRS_IRQHandler+0xc0>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2204      	movs	r2, #4
 80055c6:	4013      	ands	r3, r2
 80055c8:	d022      	beq.n	8005610 <HAL_RCCEx_CRS_IRQHandler+0xc0>
    {
      if((itflags & RCC_CRS_FLAG_SYNCERR) != RESET)
 80055ca:	68ba      	ldr	r2, [r7, #8]
 80055cc:	2380      	movs	r3, #128	; 0x80
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	4013      	ands	r3, r2
 80055d2:	d003      	beq.n	80055dc <HAL_RCCEx_CRS_IRQHandler+0x8c>
      {
        crserror |= RCC_CRS_SYNCERR;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2208      	movs	r2, #8
 80055d8:	4313      	orrs	r3, r2
 80055da:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_SYNCMISS) != RESET)
 80055dc:	68ba      	ldr	r2, [r7, #8]
 80055de:	2380      	movs	r3, #128	; 0x80
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	4013      	ands	r3, r2
 80055e4:	d003      	beq.n	80055ee <HAL_RCCEx_CRS_IRQHandler+0x9e>
      {
        crserror |= RCC_CRS_SYNCMISS;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2210      	movs	r2, #16
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
      }
      if((itflags & RCC_CRS_FLAG_TRIMOVF) != RESET)
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	2380      	movs	r3, #128	; 0x80
 80055f2:	00db      	lsls	r3, r3, #3
 80055f4:	4013      	ands	r3, r2
 80055f6:	d003      	beq.n	8005600 <HAL_RCCEx_CRS_IRQHandler+0xb0>
      {
        crserror |= RCC_CRS_TRIMOVF;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2220      	movs	r2, #32
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
      }

      /* Clear CRS Error flags */
      WRITE_REG(CRS->ICR, CRS_ICR_ERRC);
 8005600:	4b05      	ldr	r3, [pc, #20]	; (8005618 <HAL_RCCEx_CRS_IRQHandler+0xc8>)
 8005602:	2204      	movs	r2, #4
 8005604:	60da      	str	r2, [r3, #12]
    
      /* user error callback */
      HAL_RCCEx_CRS_ErrorCallback(crserror);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	0018      	movs	r0, r3
 800560a:	f000 f816 	bl	800563a <HAL_RCCEx_CRS_ErrorCallback>
    }
  }
}
 800560e:	e7ff      	b.n	8005610 <HAL_RCCEx_CRS_IRQHandler+0xc0>
 8005610:	46c0      	nop			; (mov r8, r8)
 8005612:	46bd      	mov	sp, r7
 8005614:	b004      	add	sp, #16
 8005616:	bd80      	pop	{r7, pc}
 8005618:	40006c00 	.word	0x40006c00

0800561c <HAL_RCCEx_CRS_SyncOkCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCOK interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncOkCallback(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncOkCallback should be implemented in the user file
   */
}
 8005620:	46c0      	nop			; (mov r8, r8)
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <HAL_RCCEx_CRS_SyncWarnCallback>:
/**
  * @brief  RCCEx Clock Recovery System SYNCWARN interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_SyncWarnCallback(void)
{
 8005626:	b580      	push	{r7, lr}
 8005628:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_SyncWarnCallback should be implemented in the user file
   */
}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_RCCEx_CRS_ExpectedSyncCallback>:
/**
  * @brief  RCCEx Clock Recovery System Expected SYNC interrupt callback.
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ExpectedSyncCallback(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ExpectedSyncCallback should be implemented in the user file
   */
}
 8005634:	46c0      	nop			; (mov r8, r8)
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}

0800563a <HAL_RCCEx_CRS_ErrorCallback>:
  *           @arg @ref RCC_CRS_SYNCMISS
  *           @arg @ref RCC_CRS_TRIMOVF
  * @retval none
  */
__weak void HAL_RCCEx_CRS_ErrorCallback(uint32_t Error)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	b082      	sub	sp, #8
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
  UNUSED(Error);

  /* NOTE : This function should not be modified, when the callback is needed,
            the @ref HAL_RCCEx_CRS_ErrorCallback should be implemented in the user file
   */
}
 8005642:	46c0      	nop			; (mov r8, r8)
 8005644:	46bd      	mov	sp, r7
 8005646:	b002      	add	sp, #8
 8005648:	bd80      	pop	{r7, pc}
	...

0800564c <LL_RCC_HSE_EnableBypass>:
  * @brief  Enable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8005650:	4b04      	ldr	r3, [pc, #16]	; (8005664 <LL_RCC_HSE_EnableBypass+0x18>)
 8005652:	4a04      	ldr	r2, [pc, #16]	; (8005664 <LL_RCC_HSE_EnableBypass+0x18>)
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	2180      	movs	r1, #128	; 0x80
 8005658:	02c9      	lsls	r1, r1, #11
 800565a:	430a      	orrs	r2, r1
 800565c:	601a      	str	r2, [r3, #0]
}
 800565e:	46c0      	nop			; (mov r8, r8)
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}
 8005664:	40021000 	.word	0x40021000

08005668 <LL_RCC_HSE_DisableBypass>:
  * @brief  Disable HSE external oscillator (HSE Bypass)
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_DisableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_DisableBypass(void)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 800566c:	4b04      	ldr	r3, [pc, #16]	; (8005680 <LL_RCC_HSE_DisableBypass+0x18>)
 800566e:	4a04      	ldr	r2, [pc, #16]	; (8005680 <LL_RCC_HSE_DisableBypass+0x18>)
 8005670:	6812      	ldr	r2, [r2, #0]
 8005672:	4904      	ldr	r1, [pc, #16]	; (8005684 <LL_RCC_HSE_DisableBypass+0x1c>)
 8005674:	400a      	ands	r2, r1
 8005676:	601a      	str	r2, [r3, #0]
}
 8005678:	46c0      	nop			; (mov r8, r8)
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	46c0      	nop			; (mov r8, r8)
 8005680:	40021000 	.word	0x40021000
 8005684:	fffbffff 	.word	0xfffbffff

08005688 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800568c:	4b04      	ldr	r3, [pc, #16]	; (80056a0 <LL_RCC_HSE_Enable+0x18>)
 800568e:	4a04      	ldr	r2, [pc, #16]	; (80056a0 <LL_RCC_HSE_Enable+0x18>)
 8005690:	6812      	ldr	r2, [r2, #0]
 8005692:	2180      	movs	r1, #128	; 0x80
 8005694:	0249      	lsls	r1, r1, #9
 8005696:	430a      	orrs	r2, r1
 8005698:	601a      	str	r2, [r3, #0]
}
 800569a:	46c0      	nop			; (mov r8, r8)
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	40021000 	.word	0x40021000

080056a4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80056a8:	4b06      	ldr	r3, [pc, #24]	; (80056c4 <LL_RCC_HSE_IsReady+0x20>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	2380      	movs	r3, #128	; 0x80
 80056ae:	029b      	lsls	r3, r3, #10
 80056b0:	4013      	ands	r3, r2
 80056b2:	4a05      	ldr	r2, [pc, #20]	; (80056c8 <LL_RCC_HSE_IsReady+0x24>)
 80056b4:	4694      	mov	ip, r2
 80056b6:	4463      	add	r3, ip
 80056b8:	425a      	negs	r2, r3
 80056ba:	4153      	adcs	r3, r2
 80056bc:	b2db      	uxtb	r3, r3
}
 80056be:	0018      	movs	r0, r3
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}
 80056c4:	40021000 	.word	0x40021000
 80056c8:	fffe0000 	.word	0xfffe0000

080056cc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80056d0:	4b04      	ldr	r3, [pc, #16]	; (80056e4 <LL_RCC_HSI_Enable+0x18>)
 80056d2:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <LL_RCC_HSI_Enable+0x18>)
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	2101      	movs	r1, #1
 80056d8:	430a      	orrs	r2, r1
 80056da:	601a      	str	r2, [r3, #0]
}
 80056dc:	46c0      	nop			; (mov r8, r8)
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	46c0      	nop			; (mov r8, r8)
 80056e4:	40021000 	.word	0x40021000

080056e8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80056ec:	4b05      	ldr	r3, [pc, #20]	; (8005704 <LL_RCC_HSI_IsReady+0x1c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	2202      	movs	r2, #2
 80056f2:	4013      	ands	r3, r2
 80056f4:	3b02      	subs	r3, #2
 80056f6:	425a      	negs	r2, r3
 80056f8:	4153      	adcs	r3, r2
 80056fa:	b2db      	uxtb	r3, r3
}
 80056fc:	0018      	movs	r0, r3
 80056fe:	46bd      	mov	sp, r7
 8005700:	bd80      	pop	{r7, pc}
 8005702:	46c0      	nop			; (mov r8, r8)
 8005704:	40021000 	.word	0x40021000

08005708 <LL_RCC_HSI48_Enable>:
  * @brief  Enable HSI48
  * @rmtoll CR2          HSI48ON       LL_RCC_HSI48_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI48_Enable(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR2, RCC_CR2_HSI48ON);
 800570c:	4b04      	ldr	r3, [pc, #16]	; (8005720 <LL_RCC_HSI48_Enable+0x18>)
 800570e:	4a04      	ldr	r2, [pc, #16]	; (8005720 <LL_RCC_HSI48_Enable+0x18>)
 8005710:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005712:	2180      	movs	r1, #128	; 0x80
 8005714:	0249      	lsls	r1, r1, #9
 8005716:	430a      	orrs	r2, r1
 8005718:	635a      	str	r2, [r3, #52]	; 0x34
}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	40021000 	.word	0x40021000

08005724 <LL_RCC_HSI48_IsReady>:
  * @brief  Check if HSI48 oscillator Ready
  * @rmtoll CR2          HSI48RDY      LL_RCC_HSI48_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI48_IsReady(void)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR2, RCC_CR2_HSI48RDY) == (RCC_CR2_HSI48RDY));
 8005728:	4b06      	ldr	r3, [pc, #24]	; (8005744 <LL_RCC_HSI48_IsReady+0x20>)
 800572a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800572c:	2380      	movs	r3, #128	; 0x80
 800572e:	029b      	lsls	r3, r3, #10
 8005730:	4013      	ands	r3, r2
 8005732:	4a05      	ldr	r2, [pc, #20]	; (8005748 <LL_RCC_HSI48_IsReady+0x24>)
 8005734:	4694      	mov	ip, r2
 8005736:	4463      	add	r3, ip
 8005738:	425a      	negs	r2, r3
 800573a:	4153      	adcs	r3, r2
 800573c:	b2db      	uxtb	r3, r3
}
 800573e:	0018      	movs	r0, r3
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	40021000 	.word	0x40021000
 8005748:	fffe0000 	.word	0xfffe0000

0800574c <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005754:	4b06      	ldr	r3, [pc, #24]	; (8005770 <LL_RCC_SetSysClkSource+0x24>)
 8005756:	4a06      	ldr	r2, [pc, #24]	; (8005770 <LL_RCC_SetSysClkSource+0x24>)
 8005758:	6852      	ldr	r2, [r2, #4]
 800575a:	2103      	movs	r1, #3
 800575c:	438a      	bics	r2, r1
 800575e:	0011      	movs	r1, r2
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	430a      	orrs	r2, r1
 8005764:	605a      	str	r2, [r3, #4]
}
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	46bd      	mov	sp, r7
 800576a:	b002      	add	sp, #8
 800576c:	bd80      	pop	{r7, pc}
 800576e:	46c0      	nop			; (mov r8, r8)
 8005770:	40021000 	.word	0x40021000

08005774 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI48 (*)
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005778:	4b03      	ldr	r3, [pc, #12]	; (8005788 <LL_RCC_GetSysClkSource+0x14>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	220c      	movs	r2, #12
 800577e:	4013      	ands	r3, r2
}
 8005780:	0018      	movs	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	46c0      	nop			; (mov r8, r8)
 8005788:	40021000 	.word	0x40021000

0800578c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b082      	sub	sp, #8
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005794:	4b06      	ldr	r3, [pc, #24]	; (80057b0 <LL_RCC_SetAHBPrescaler+0x24>)
 8005796:	4a06      	ldr	r2, [pc, #24]	; (80057b0 <LL_RCC_SetAHBPrescaler+0x24>)
 8005798:	6852      	ldr	r2, [r2, #4]
 800579a:	21f0      	movs	r1, #240	; 0xf0
 800579c:	438a      	bics	r2, r1
 800579e:	0011      	movs	r1, r2
 80057a0:	687a      	ldr	r2, [r7, #4]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	605a      	str	r2, [r3, #4]
}
 80057a6:	46c0      	nop			; (mov r8, r8)
 80057a8:	46bd      	mov	sp, r7
 80057aa:	b002      	add	sp, #8
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	46c0      	nop			; (mov r8, r8)
 80057b0:	40021000 	.word	0x40021000

080057b4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80057b4:	b580      	push	{r7, lr}
 80057b6:	b082      	sub	sp, #8
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, Prescaler);
 80057bc:	4b05      	ldr	r3, [pc, #20]	; (80057d4 <LL_RCC_SetAPB1Prescaler+0x20>)
 80057be:	4a05      	ldr	r2, [pc, #20]	; (80057d4 <LL_RCC_SetAPB1Prescaler+0x20>)
 80057c0:	6852      	ldr	r2, [r2, #4]
 80057c2:	4905      	ldr	r1, [pc, #20]	; (80057d8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80057c4:	4011      	ands	r1, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	605a      	str	r2, [r3, #4]
}
 80057cc:	46c0      	nop			; (mov r8, r8)
 80057ce:	46bd      	mov	sp, r7
 80057d0:	b002      	add	sp, #8
 80057d2:	bd80      	pop	{r7, pc}
 80057d4:	40021000 	.word	0x40021000
 80057d8:	fffff8ff 	.word	0xfffff8ff

080057dc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80057e0:	4b03      	ldr	r3, [pc, #12]	; (80057f0 <LL_RCC_GetAHBPrescaler+0x14>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	22f0      	movs	r2, #240	; 0xf0
 80057e6:	4013      	ands	r3, r2
}
 80057e8:	0018      	movs	r0, r3
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	46c0      	nop			; (mov r8, r8)
 80057f0:	40021000 	.word	0x40021000

080057f4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80057f8:	4b04      	ldr	r3, [pc, #16]	; (800580c <LL_RCC_PLL_Enable+0x18>)
 80057fa:	4a04      	ldr	r2, [pc, #16]	; (800580c <LL_RCC_PLL_Enable+0x18>)
 80057fc:	6812      	ldr	r2, [r2, #0]
 80057fe:	2180      	movs	r1, #128	; 0x80
 8005800:	0449      	lsls	r1, r1, #17
 8005802:	430a      	orrs	r2, r1
 8005804:	601a      	str	r2, [r3, #0]
}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	40021000 	.word	0x40021000

08005810 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8005814:	4b07      	ldr	r3, [pc, #28]	; (8005834 <LL_RCC_PLL_IsReady+0x24>)
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	2380      	movs	r3, #128	; 0x80
 800581a:	049b      	lsls	r3, r3, #18
 800581c:	4013      	ands	r3, r2
 800581e:	22fe      	movs	r2, #254	; 0xfe
 8005820:	0612      	lsls	r2, r2, #24
 8005822:	4694      	mov	ip, r2
 8005824:	4463      	add	r3, ip
 8005826:	425a      	negs	r2, r3
 8005828:	4153      	adcs	r3, r2
 800582a:	b2db      	uxtb	r3, r3
}
 800582c:	0018      	movs	r0, r3
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	46c0      	nop			; (mov r8, r8)
 8005834:	40021000 	.word	0x40021000

08005838 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLMul, uint32_t PLLDiv)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, Source | PLLMul);
 8005844:	4b0b      	ldr	r3, [pc, #44]	; (8005874 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8005846:	4a0b      	ldr	r2, [pc, #44]	; (8005874 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8005848:	6852      	ldr	r2, [r2, #4]
 800584a:	490b      	ldr	r1, [pc, #44]	; (8005878 <LL_RCC_PLL_ConfigDomain_SYS+0x40>)
 800584c:	4011      	ands	r1, r2
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	4302      	orrs	r2, r0
 8005854:	430a      	orrs	r2, r1
 8005856:	605a      	str	r2, [r3, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, PLLDiv);
 8005858:	4b06      	ldr	r3, [pc, #24]	; (8005874 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800585a:	4a06      	ldr	r2, [pc, #24]	; (8005874 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 800585c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800585e:	210f      	movs	r1, #15
 8005860:	438a      	bics	r2, r1
 8005862:	0011      	movs	r1, r2
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	430a      	orrs	r2, r1
 8005868:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800586a:	46c0      	nop			; (mov r8, r8)
 800586c:	46bd      	mov	sp, r7
 800586e:	b004      	add	sp, #16
 8005870:	bd80      	pop	{r7, pc}
 8005872:	46c0      	nop			; (mov r8, r8)
 8005874:	40021000 	.word	0x40021000
 8005878:	ffc27fff 	.word	0xffc27fff

0800587c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800587c:	b590      	push	{r4, r7, lr}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005886:	4c09      	ldr	r4, [pc, #36]	; (80058ac <LL_InitTick+0x30>)
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7fa fc4c 	bl	8000128 <__udivsi3>
 8005890:	0003      	movs	r3, r0
 8005892:	3b01      	subs	r3, #1
 8005894:	6063      	str	r3, [r4, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005896:	4b05      	ldr	r3, [pc, #20]	; (80058ac <LL_InitTick+0x30>)
 8005898:	2200      	movs	r2, #0
 800589a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800589c:	4b03      	ldr	r3, [pc, #12]	; (80058ac <LL_InitTick+0x30>)
 800589e:	2205      	movs	r2, #5
 80058a0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80058a2:	46c0      	nop			; (mov r8, r8)
 80058a4:	46bd      	mov	sp, r7
 80058a6:	b003      	add	sp, #12
 80058a8:	bd90      	pop	{r4, r7, pc}
 80058aa:	46c0      	nop			; (mov r8, r8)
 80058ac:	e000e010 	.word	0xe000e010

080058b0 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80058b8:	4b06      	ldr	r3, [pc, #24]	; (80058d4 <LL_FLASH_SetLatency+0x24>)
 80058ba:	4a06      	ldr	r2, [pc, #24]	; (80058d4 <LL_FLASH_SetLatency+0x24>)
 80058bc:	6812      	ldr	r2, [r2, #0]
 80058be:	2101      	movs	r1, #1
 80058c0:	438a      	bics	r2, r1
 80058c2:	0011      	movs	r1, r2
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	430a      	orrs	r2, r1
 80058c8:	601a      	str	r2, [r3, #0]
}
 80058ca:	46c0      	nop			; (mov r8, r8)
 80058cc:	46bd      	mov	sp, r7
 80058ce:	b002      	add	sp, #8
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	46c0      	nop			; (mov r8, r8)
 80058d4:	40022000 	.word	0x40022000

080058d8 <LL_FLASH_GetLatency>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80058dc:	4b03      	ldr	r3, [pc, #12]	; (80058ec <LL_FLASH_GetLatency+0x14>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2201      	movs	r2, #1
 80058e2:	4013      	ands	r3, r2
}
 80058e4:	0018      	movs	r0, r3
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	46c0      	nop			; (mov r8, r8)
 80058ec:	40022000 	.word	0x40022000

080058f0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80058f8:	23fa      	movs	r3, #250	; 0xfa
 80058fa:	009a      	lsls	r2, r3, #2
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	0011      	movs	r1, r2
 8005900:	0018      	movs	r0, r3
 8005902:	f7ff ffbb 	bl	800587c <LL_InitTick>
}
 8005906:	46c0      	nop			; (mov r8, r8)
 8005908:	46bd      	mov	sp, r7
 800590a:	b002      	add	sp, #8
 800590c:	bd80      	pop	{r7, pc}
	...

08005910 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005918:	4b0d      	ldr	r3, [pc, #52]	; (8005950 <LL_mDelay+0x40>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800591e:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3301      	adds	r3, #1
 8005924:	d00c      	beq.n	8005940 <LL_mDelay+0x30>
  {
    Delay++;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3301      	adds	r3, #1
 800592a:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800592c:	e008      	b.n	8005940 <LL_mDelay+0x30>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800592e:	4b08      	ldr	r3, [pc, #32]	; (8005950 <LL_mDelay+0x40>)
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	2380      	movs	r3, #128	; 0x80
 8005934:	025b      	lsls	r3, r3, #9
 8005936:	4013      	ands	r3, r2
 8005938:	d002      	beq.n	8005940 <LL_mDelay+0x30>
    {
      Delay--;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3b01      	subs	r3, #1
 800593e:	607b      	str	r3, [r7, #4]
  while (Delay)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f3      	bne.n	800592e <LL_mDelay+0x1e>
    }
  }
}
 8005946:	46c0      	nop			; (mov r8, r8)
 8005948:	46bd      	mov	sp, r7
 800594a:	b004      	add	sp, #16
 800594c:	bd80      	pop	{r7, pc}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	e000e010 	.word	0xe000e010

08005954 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b082      	sub	sp, #8
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800595c:	4b03      	ldr	r3, [pc, #12]	; (800596c <LL_SetSystemCoreClock+0x18>)
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	601a      	str	r2, [r3, #0]
}
 8005962:	46c0      	nop			; (mov r8, r8)
 8005964:	46bd      	mov	sp, r7
 8005966:	b002      	add	sp, #8
 8005968:	bd80      	pop	{r7, pc}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	2000000c 	.word	0x2000000c

08005970 <LL_PLL_ConfigSystemClock_HSI>:
  *          - SUCCESS: Max frequency configuration done
  *          - ERROR: Max frequency configuration not done
  */
ErrorStatus LL_PLL_ConfigSystemClock_HSI(LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct,
                                         LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8005970:	b590      	push	{r4, r7, lr}
 8005972:	b085      	sub	sp, #20
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
 8005978:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800597a:	230f      	movs	r3, #15
 800597c:	18fb      	adds	r3, r7, r3
 800597e:	2201      	movs	r2, #1
 8005980:	701a      	strb	r2, [r3, #0]
  uint32_t pllfreq = 0U;
 8005982:	2300      	movs	r3, #0
 8005984:	60bb      	str	r3, [r7, #8]

  /* Check if one of the PLL is enabled */
  if (UTILS_PLL_IsBusy() == SUCCESS)
 8005986:	f000 f91c 	bl	8005bc2 <UTILS_PLL_IsBusy>
 800598a:	0003      	movs	r3, r0
 800598c:	2b01      	cmp	r3, #1
 800598e:	d128      	bne.n	80059e2 <LL_PLL_ConfigSystemClock_HSI+0x72>
#else
    /* Force PREDIV value to 2 */
    UTILS_PLLInitStruct->Prediv = LL_RCC_PREDIV_DIV_2;
#endif /*RCC_PLLSRC_PREDIV1_SUPPORT*/
    /* Calculate the new PLL output frequency */
    pllfreq = UTILS_GetPLLOutputFrequency(HSI_VALUE, UTILS_PLLInitStruct);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4a19      	ldr	r2, [pc, #100]	; (80059f8 <LL_PLL_ConfigSystemClock_HSI+0x88>)
 8005994:	0019      	movs	r1, r3
 8005996:	0010      	movs	r0, r2
 8005998:	f000 f8f4 	bl	8005b84 <UTILS_GetPLLOutputFrequency>
 800599c:	0003      	movs	r3, r0
 800599e:	60bb      	str	r3, [r7, #8]

    /* Enable HSI if not enabled */
    if (LL_RCC_HSI_IsReady() != 1U)
 80059a0:	f7ff fea2 	bl	80056e8 <LL_RCC_HSI_IsReady>
 80059a4:	0003      	movs	r3, r0
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d007      	beq.n	80059ba <LL_PLL_ConfigSystemClock_HSI+0x4a>
    {
      LL_RCC_HSI_Enable();
 80059aa:	f7ff fe8f 	bl	80056cc <LL_RCC_HSI_Enable>
      while (LL_RCC_HSI_IsReady() != 1U)
 80059ae:	46c0      	nop			; (mov r8, r8)
 80059b0:	f7ff fe9a 	bl	80056e8 <LL_RCC_HSI_IsReady>
 80059b4:	0003      	movs	r3, r0
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d1fa      	bne.n	80059b0 <LL_PLL_ConfigSystemClock_HSI+0x40>
      }
    }

    /* Configure PLL */
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, UTILS_PLLInitStruct->PLLMul, UTILS_PLLInitStruct->PLLDiv);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6819      	ldr	r1, [r3, #0]
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	2380      	movs	r3, #128	; 0x80
 80059c4:	021b      	lsls	r3, r3, #8
 80059c6:	0018      	movs	r0, r3
 80059c8:	f7ff ff36 	bl	8005838 <LL_RCC_PLL_ConfigDomain_SYS>
#else
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, UTILS_PLLInitStruct->PLLMul);
#endif /*RCC_PLLSRC_PREDIV1_SUPPORT*/

    /* Enable PLL and switch system clock to PLL */
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 80059cc:	230f      	movs	r3, #15
 80059ce:	18fc      	adds	r4, r7, r3
 80059d0:	683a      	ldr	r2, [r7, #0]
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	0011      	movs	r1, r2
 80059d6:	0018      	movs	r0, r3
 80059d8:	f000 f906 	bl	8005be8 <UTILS_EnablePLLAndSwitchSystem>
 80059dc:	0003      	movs	r3, r0
 80059de:	7023      	strb	r3, [r4, #0]
 80059e0:	e003      	b.n	80059ea <LL_PLL_ConfigSystemClock_HSI+0x7a>
  }
  else
  {
    /* Current PLL configuration cannot be modified */
    status = ERROR;
 80059e2:	230f      	movs	r3, #15
 80059e4:	18fb      	adds	r3, r7, r3
 80059e6:	2200      	movs	r2, #0
 80059e8:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80059ea:	230f      	movs	r3, #15
 80059ec:	18fb      	adds	r3, r7, r3
 80059ee:	781b      	ldrb	r3, [r3, #0]
}
 80059f0:	0018      	movs	r0, r3
 80059f2:	46bd      	mov	sp, r7
 80059f4:	b005      	add	sp, #20
 80059f6:	bd90      	pop	{r4, r7, pc}
 80059f8:	007a1200 	.word	0x007a1200

080059fc <LL_PLL_ConfigSystemClock_HSI48>:
  *          - SUCCESS: Max frequency configuration done
  *          - ERROR: Max frequency configuration not done
  */
ErrorStatus LL_PLL_ConfigSystemClock_HSI48(LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct,
                                         LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 80059fc:	b590      	push	{r4, r7, lr}
 80059fe:	b085      	sub	sp, #20
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005a06:	230f      	movs	r3, #15
 8005a08:	18fb      	adds	r3, r7, r3
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	701a      	strb	r2, [r3, #0]
  uint32_t pllfreq = 0U;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	60bb      	str	r3, [r7, #8]

  /* Check if one of the PLL is enabled */
  if (UTILS_PLL_IsBusy() == SUCCESS)
 8005a12:	f000 f8d6 	bl	8005bc2 <UTILS_PLL_IsBusy>
 8005a16:	0003      	movs	r3, r0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d128      	bne.n	8005a6e <LL_PLL_ConfigSystemClock_HSI48+0x72>
  {
    /* Check PREDIV value */
    assert_param(IS_LL_UTILS_PREDIV_VALUE(UTILS_PLLInitStruct->PLLDiv));

    /* Calculate the new PLL output frequency */
    pllfreq = UTILS_GetPLLOutputFrequency(HSI48_VALUE, UTILS_PLLInitStruct);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a19      	ldr	r2, [pc, #100]	; (8005a84 <LL_PLL_ConfigSystemClock_HSI48+0x88>)
 8005a20:	0019      	movs	r1, r3
 8005a22:	0010      	movs	r0, r2
 8005a24:	f000 f8ae 	bl	8005b84 <UTILS_GetPLLOutputFrequency>
 8005a28:	0003      	movs	r3, r0
 8005a2a:	60bb      	str	r3, [r7, #8]

    /* Enable HSI48 if not enabled */
    if (LL_RCC_HSI48_IsReady() != 1U)
 8005a2c:	f7ff fe7a 	bl	8005724 <LL_RCC_HSI48_IsReady>
 8005a30:	0003      	movs	r3, r0
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d007      	beq.n	8005a46 <LL_PLL_ConfigSystemClock_HSI48+0x4a>
    {
      LL_RCC_HSI48_Enable();
 8005a36:	f7ff fe67 	bl	8005708 <LL_RCC_HSI48_Enable>
      while (LL_RCC_HSI48_IsReady() != 1U)
 8005a3a:	46c0      	nop			; (mov r8, r8)
 8005a3c:	f7ff fe72 	bl	8005724 <LL_RCC_HSI48_IsReady>
 8005a40:	0003      	movs	r3, r0
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d1fa      	bne.n	8005a3c <LL_PLL_ConfigSystemClock_HSI48+0x40>
        /* Wait for HSI48 ready */
      }
    }

    /* Configure PLL */
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI48, UTILS_PLLInitStruct->PLLMul, UTILS_PLLInitStruct->PLLDiv);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6819      	ldr	r1, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685a      	ldr	r2, [r3, #4]
 8005a4e:	23c0      	movs	r3, #192	; 0xc0
 8005a50:	025b      	lsls	r3, r3, #9
 8005a52:	0018      	movs	r0, r3
 8005a54:	f7ff fef0 	bl	8005838 <LL_RCC_PLL_ConfigDomain_SYS>

    /* Enable PLL and switch system clock to PLL */
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8005a58:	230f      	movs	r3, #15
 8005a5a:	18fc      	adds	r4, r7, r3
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	0011      	movs	r1, r2
 8005a62:	0018      	movs	r0, r3
 8005a64:	f000 f8c0 	bl	8005be8 <UTILS_EnablePLLAndSwitchSystem>
 8005a68:	0003      	movs	r3, r0
 8005a6a:	7023      	strb	r3, [r4, #0]
 8005a6c:	e003      	b.n	8005a76 <LL_PLL_ConfigSystemClock_HSI48+0x7a>
  }
  else
  {
    /* Current PLL configuration cannot be modified */
    status = ERROR;
 8005a6e:	230f      	movs	r3, #15
 8005a70:	18fb      	adds	r3, r7, r3
 8005a72:	2200      	movs	r2, #0
 8005a74:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005a76:	230f      	movs	r3, #15
 8005a78:	18fb      	adds	r3, r7, r3
 8005a7a:	781b      	ldrb	r3, [r3, #0]
}
 8005a7c:	0018      	movs	r0, r3
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	b005      	add	sp, #20
 8005a82:	bd90      	pop	{r4, r7, pc}
 8005a84:	02dc6c00 	.word	0x02dc6c00

08005a88 <LL_PLL_ConfigSystemClock_HSE>:
  *          - SUCCESS: Max frequency configuration done
  *          - ERROR: Max frequency configuration not done
  */
ErrorStatus LL_PLL_ConfigSystemClock_HSE(uint32_t HSEFrequency, uint32_t HSEBypass,
                                         LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8005a88:	b590      	push	{r4, r7, lr}
 8005a8a:	b087      	sub	sp, #28
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	60f8      	str	r0, [r7, #12]
 8005a90:	60b9      	str	r1, [r7, #8]
 8005a92:	607a      	str	r2, [r7, #4]
 8005a94:	603b      	str	r3, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005a96:	2317      	movs	r3, #23
 8005a98:	18fb      	adds	r3, r7, r3
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	701a      	strb	r2, [r3, #0]
  uint32_t pllfreq = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_LL_UTILS_HSE_FREQUENCY(HSEFrequency));
  assert_param(IS_LL_UTILS_HSE_BYPASS(HSEBypass));

  /* Check if one of the PLL is enabled */
  if (UTILS_PLL_IsBusy() == SUCCESS)
 8005aa2:	f000 f88e 	bl	8005bc2 <UTILS_PLL_IsBusy>
 8005aa6:	0003      	movs	r3, r0
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d130      	bne.n	8005b0e <LL_PLL_ConfigSystemClock_HSE+0x86>
#else
    assert_param(IS_LL_UTILS_PREDIV_VALUE(UTILS_PLLInitStruct->Prediv));
#endif /*RCC_PLLSRC_PREDIV1_SUPPORT*/

    /* Calculate the new PLL output frequency */
    pllfreq = UTILS_GetPLLOutputFrequency(HSEFrequency, UTILS_PLLInitStruct);
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	0011      	movs	r1, r2
 8005ab2:	0018      	movs	r0, r3
 8005ab4:	f000 f866 	bl	8005b84 <UTILS_GetPLLOutputFrequency>
 8005ab8:	0003      	movs	r3, r0
 8005aba:	613b      	str	r3, [r7, #16]

    /* Enable HSE if not enabled */
    if (LL_RCC_HSE_IsReady() != 1U)
 8005abc:	f7ff fdf2 	bl	80056a4 <LL_RCC_HSE_IsReady>
 8005ac0:	0003      	movs	r3, r0
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d00f      	beq.n	8005ae6 <LL_PLL_ConfigSystemClock_HSE+0x5e>
    {
      /* Check if need to enable HSE bypass feature or not */
      if (HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d102      	bne.n	8005ad2 <LL_PLL_ConfigSystemClock_HSE+0x4a>
      {
        LL_RCC_HSE_EnableBypass();
 8005acc:	f7ff fdbe 	bl	800564c <LL_RCC_HSE_EnableBypass>
 8005ad0:	e001      	b.n	8005ad6 <LL_PLL_ConfigSystemClock_HSE+0x4e>
      }
      else
      {
        LL_RCC_HSE_DisableBypass();
 8005ad2:	f7ff fdc9 	bl	8005668 <LL_RCC_HSE_DisableBypass>
      }

      /* Enable HSE */
      LL_RCC_HSE_Enable();
 8005ad6:	f7ff fdd7 	bl	8005688 <LL_RCC_HSE_Enable>
      while (LL_RCC_HSE_IsReady() != 1U)
 8005ada:	46c0      	nop			; (mov r8, r8)
 8005adc:	f7ff fde2 	bl	80056a4 <LL_RCC_HSE_IsReady>
 8005ae0:	0003      	movs	r3, r0
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d1fa      	bne.n	8005adc <LL_PLL_ConfigSystemClock_HSE+0x54>
      }
    }

      /* Configure PLL */
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, UTILS_PLLInitStruct->PLLMul, UTILS_PLLInitStruct->PLLDiv);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6819      	ldr	r1, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685a      	ldr	r2, [r3, #4]
 8005aee:	2380      	movs	r3, #128	; 0x80
 8005af0:	025b      	lsls	r3, r3, #9
 8005af2:	0018      	movs	r0, r3
 8005af4:	f7ff fea0 	bl	8005838 <LL_RCC_PLL_ConfigDomain_SYS>
#else
    LL_RCC_PLL_ConfigDomain_SYS((RCC_CFGR_PLLSRC_HSE_PREDIV | UTILS_PLLInitStruct->Prediv), UTILS_PLLInitStruct->PLLMul);
#endif /*RCC_PLLSRC_PREDIV1_SUPPORT*/

    /* Enable PLL and switch system clock to PLL */
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8005af8:	2317      	movs	r3, #23
 8005afa:	18fc      	adds	r4, r7, r3
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	0011      	movs	r1, r2
 8005b02:	0018      	movs	r0, r3
 8005b04:	f000 f870 	bl	8005be8 <UTILS_EnablePLLAndSwitchSystem>
 8005b08:	0003      	movs	r3, r0
 8005b0a:	7023      	strb	r3, [r4, #0]
 8005b0c:	e003      	b.n	8005b16 <LL_PLL_ConfigSystemClock_HSE+0x8e>
  }
  else
  {
    /* Current PLL configuration cannot be modified */
    status = ERROR;
 8005b0e:	2317      	movs	r3, #23
 8005b10:	18fb      	adds	r3, r7, r3
 8005b12:	2200      	movs	r2, #0
 8005b14:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005b16:	2317      	movs	r3, #23
 8005b18:	18fb      	adds	r3, r7, r3
 8005b1a:	781b      	ldrb	r3, [r3, #0]
}
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	b007      	add	sp, #28
 8005b22:	bd90      	pop	{r4, r7, pc}

08005b24 <UTILS_SetFlashLatency>:
  *          - SUCCESS: Latency has been modified
  *          - ERROR: Latency cannot be modified
  */
#if defined(FLASH_ACR_LATENCY)
static ErrorStatus UTILS_SetFlashLatency(uint32_t Frequency)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 8005b2c:	230f      	movs	r3, #15
 8005b2e:	18fb      	adds	r3, r7, r3
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]

  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005b34:	2300      	movs	r3, #0
 8005b36:	60bb      	str	r3, [r7, #8]

  /* Frequency cannot be equal to 0 */
  if (Frequency == 0U)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d104      	bne.n	8005b48 <UTILS_SetFlashLatency+0x24>
  {
    status = ERROR;
 8005b3e:	230f      	movs	r3, #15
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	2200      	movs	r2, #0
 8005b44:	701a      	strb	r2, [r3, #0]
 8005b46:	e013      	b.n	8005b70 <UTILS_SetFlashLatency+0x4c>
  }
  else
  {
    if (Frequency > UTILS_LATENCY1_FREQ)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a0d      	ldr	r2, [pc, #52]	; (8005b80 <UTILS_SetFlashLatency+0x5c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d901      	bls.n	8005b54 <UTILS_SetFlashLatency+0x30>
    {
      /* 24 < SYSCLK <= 48 => 1WS (2 CPU cycles) */
      latency = LL_FLASH_LATENCY_1;
 8005b50:	2301      	movs	r3, #1
 8005b52:	60bb      	str	r3, [r7, #8]
    }
    /* else SYSCLK < 24MHz default LL_FLASH_LATENCY_0 0WS */

    LL_FLASH_SetLatency(latency);
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	0018      	movs	r0, r3
 8005b58:	f7ff feaa 	bl	80058b0 <LL_FLASH_SetLatency>

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if (LL_FLASH_GetLatency() != latency)
 8005b5c:	f7ff febc 	bl	80058d8 <LL_FLASH_GetLatency>
 8005b60:	0002      	movs	r2, r0
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d003      	beq.n	8005b70 <UTILS_SetFlashLatency+0x4c>
    {
      status = ERROR;
 8005b68:	230f      	movs	r3, #15
 8005b6a:	18fb      	adds	r3, r7, r3
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	701a      	strb	r2, [r3, #0]
    }
  }
  return status;
 8005b70:	230f      	movs	r3, #15
 8005b72:	18fb      	adds	r3, r7, r3
 8005b74:	781b      	ldrb	r3, [r3, #0]
}
 8005b76:	0018      	movs	r0, r3
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	b004      	add	sp, #16
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	46c0      	nop			; (mov r8, r8)
 8005b80:	016e3600 	.word	0x016e3600

08005b84 <UTILS_GetPLLOutputFrequency>:
  * @param  UTILS_PLLInitStruct pointer to a @ref LL_UTILS_PLLInitTypeDef structure that contains
  *                             the configuration information for the PLL.
  * @retval PLL output frequency (in Hz)
  */
static uint32_t UTILS_GetPLLOutputFrequency(uint32_t PLL_InputFrequency, LL_UTILS_PLLInitTypeDef *UTILS_PLLInitStruct)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b084      	sub	sp, #16
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  uint32_t pllfreq = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]

  /* Check different PLL parameters according to RM                          */
  /* The application software must set correctly the PLL multiplication factor to 
     be in the range 16-48MHz */
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency, UTILS_PLLInitStruct->PLLMul, UTILS_PLLInitStruct->PLLDiv);
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	220f      	movs	r2, #15
 8005b98:	4013      	ands	r3, r2
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	0019      	movs	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f7fa fac2 	bl	8000128 <__udivsi3>
 8005ba4:	0003      	movs	r3, r0
 8005ba6:	0019      	movs	r1, r3
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	0c9b      	lsrs	r3, r3, #18
 8005bae:	220f      	movs	r2, #15
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	3302      	adds	r3, #2
 8005bb4:	434b      	muls	r3, r1
 8005bb6:	60fb      	str	r3, [r7, #12]
#else
  pllfreq = __LL_RCC_CALC_PLLCLK_FREQ(PLL_InputFrequency / (UTILS_PLLInitStruct->Prediv + 1U), UTILS_PLLInitStruct->PLLMul);
#endif /*RCC_PLLSRC_PREDIV1_SUPPORT*/
  assert_param(IS_LL_UTILS_PLL_FREQUENCY(pllfreq));

  return pllfreq;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
}
 8005bba:	0018      	movs	r0, r3
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	b004      	add	sp, #16
 8005bc0:	bd80      	pop	{r7, pc}

08005bc2 <UTILS_PLL_IsBusy>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: PLL modification can be done
  *          - ERROR: PLL is busy
  */
static ErrorStatus UTILS_PLL_IsBusy(void)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b082      	sub	sp, #8
 8005bc6:	af00      	add	r7, sp, #0
  ErrorStatus status = SUCCESS;
 8005bc8:	1dfb      	adds	r3, r7, #7
 8005bca:	2201      	movs	r2, #1
 8005bcc:	701a      	strb	r2, [r3, #0]

  /* Check if PLL is busy*/
  if (LL_RCC_PLL_IsReady() != 0U)
 8005bce:	f7ff fe1f 	bl	8005810 <LL_RCC_PLL_IsReady>
 8005bd2:	1e03      	subs	r3, r0, #0
 8005bd4:	d002      	beq.n	8005bdc <UTILS_PLL_IsBusy+0x1a>
  {
    /* PLL configuration cannot be modified */
    status = ERROR;
 8005bd6:	1dfb      	adds	r3, r7, #7
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8005bdc:	1dfb      	adds	r3, r7, #7
 8005bde:	781b      	ldrb	r3, [r3, #0]
}
 8005be0:	0018      	movs	r0, r3
 8005be2:	46bd      	mov	sp, r7
 8005be4:	b002      	add	sp, #8
 8005be6:	bd80      	pop	{r7, pc}

08005be8 <UTILS_EnablePLLAndSwitchSystem>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: No problem to switch system to PLL
  *          - ERROR: Problem to switch system to PLL
  */
static ErrorStatus UTILS_EnablePLLAndSwitchSystem(uint32_t SYSCLK_Frequency, LL_UTILS_ClkInitTypeDef *UTILS_ClkInitStruct)
{
 8005be8:	b590      	push	{r4, r7, lr}
 8005bea:	b085      	sub	sp, #20
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
 8005bf0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8005bf2:	230f      	movs	r3, #15
 8005bf4:	18fb      	adds	r3, r7, r3
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	701a      	strb	r2, [r3, #0]
  uint32_t sysclk_frequency_current = 0U;
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	60bb      	str	r3, [r7, #8]

  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));

  /* Calculate current SYSCLK frequency */
  sysclk_frequency_current = (SystemCoreClock << AHBPrescTable[LL_RCC_GetAHBPrescaler() >> RCC_POSITION_HPRE]);
 8005bfe:	4b2e      	ldr	r3, [pc, #184]	; (8005cb8 <UTILS_EnablePLLAndSwitchSystem+0xd0>)
 8005c00:	681c      	ldr	r4, [r3, #0]
 8005c02:	f7ff fdeb 	bl	80057dc <LL_RCC_GetAHBPrescaler>
 8005c06:	0003      	movs	r3, r0
 8005c08:	091b      	lsrs	r3, r3, #4
 8005c0a:	4a2c      	ldr	r2, [pc, #176]	; (8005cbc <UTILS_EnablePLLAndSwitchSystem+0xd4>)
 8005c0c:	5cd3      	ldrb	r3, [r2, r3]
 8005c0e:	409c      	lsls	r4, r3
 8005c10:	0023      	movs	r3, r4
 8005c12:	60bb      	str	r3, [r7, #8]

  /* Increasing the number of wait states because of higher CPU frequency */
  if (sysclk_frequency_current < SYSCLK_Frequency)
 8005c14:	68ba      	ldr	r2, [r7, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d207      	bcs.n	8005c2c <UTILS_EnablePLLAndSwitchSystem+0x44>
  {
    /* Set FLASH latency to highest latency */
    status = UTILS_SetFlashLatency(SYSCLK_Frequency);
 8005c1c:	230f      	movs	r3, #15
 8005c1e:	18fc      	adds	r4, r7, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	0018      	movs	r0, r3
 8005c24:	f7ff ff7e 	bl	8005b24 <UTILS_SetFlashLatency>
 8005c28:	0003      	movs	r3, r0
 8005c2a:	7023      	strb	r3, [r4, #0]
  }

  /* Update system clock configuration */
  if (status == SUCCESS)
 8005c2c:	230f      	movs	r3, #15
 8005c2e:	18fb      	adds	r3, r7, r3
 8005c30:	781b      	ldrb	r3, [r3, #0]
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d11a      	bne.n	8005c6c <UTILS_EnablePLLAndSwitchSystem+0x84>
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
 8005c36:	f7ff fddd 	bl	80057f4 <LL_RCC_PLL_Enable>
    while (LL_RCC_PLL_IsReady() != 1U)
 8005c3a:	46c0      	nop			; (mov r8, r8)
 8005c3c:	f7ff fde8 	bl	8005810 <LL_RCC_PLL_IsReady>
 8005c40:	0003      	movs	r3, r0
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d1fa      	bne.n	8005c3c <UTILS_EnablePLLAndSwitchSystem+0x54>
    {
      /* Wait for PLL ready */
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	0018      	movs	r0, r3
 8005c4c:	f7ff fd9e 	bl	800578c <LL_RCC_SetAHBPrescaler>
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8005c50:	2002      	movs	r0, #2
 8005c52:	f7ff fd7b 	bl	800574c <LL_RCC_SetSysClkSource>
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005c56:	46c0      	nop			; (mov r8, r8)
 8005c58:	f7ff fd8c 	bl	8005774 <LL_RCC_GetSysClkSource>
 8005c5c:	0003      	movs	r3, r0
 8005c5e:	2b08      	cmp	r3, #8
 8005c60:	d1fa      	bne.n	8005c58 <UTILS_EnablePLLAndSwitchSystem+0x70>
    {
      /* Wait for system clock switch to PLL */
    }

    /* Set APB1 & APB2 prescaler*/
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	0018      	movs	r0, r3
 8005c68:	f7ff fda4 	bl	80057b4 <LL_RCC_SetAPB1Prescaler>
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (sysclk_frequency_current > SYSCLK_Frequency)
 8005c6c:	68ba      	ldr	r2, [r7, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d907      	bls.n	8005c84 <UTILS_EnablePLLAndSwitchSystem+0x9c>
  {
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(SYSCLK_Frequency);
 8005c74:	230f      	movs	r3, #15
 8005c76:	18fc      	adds	r4, r7, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	0018      	movs	r0, r3
 8005c7c:	f7ff ff52 	bl	8005b24 <UTILS_SetFlashLatency>
 8005c80:	0003      	movs	r3, r0
 8005c82:	7023      	strb	r3, [r4, #0]
  }

  /* Update SystemCoreClock variable */
  if (status == SUCCESS)
 8005c84:	230f      	movs	r3, #15
 8005c86:	18fb      	adds	r3, r7, r3
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d10c      	bne.n	8005ca8 <UTILS_EnablePLLAndSwitchSystem+0xc0>
  {
    LL_SetSystemCoreClock(__LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider));
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	091b      	lsrs	r3, r3, #4
 8005c94:	220f      	movs	r2, #15
 8005c96:	4013      	ands	r3, r2
 8005c98:	4a08      	ldr	r2, [pc, #32]	; (8005cbc <UTILS_EnablePLLAndSwitchSystem+0xd4>)
 8005c9a:	5cd3      	ldrb	r3, [r2, r3]
 8005c9c:	001a      	movs	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	40d3      	lsrs	r3, r2
 8005ca2:	0018      	movs	r0, r3
 8005ca4:	f7ff fe56 	bl	8005954 <LL_SetSystemCoreClock>
  }

  return status;
 8005ca8:	230f      	movs	r3, #15
 8005caa:	18fb      	adds	r3, r7, r3
 8005cac:	781b      	ldrb	r3, [r3, #0]
}
 8005cae:	0018      	movs	r0, r3
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	b005      	add	sp, #20
 8005cb4:	bd90      	pop	{r4, r7, pc}
 8005cb6:	46c0      	nop			; (mov r8, r8)
 8005cb8:	2000000c 	.word	0x2000000c
 8005cbc:	08006a70 	.word	0x08006a70

08005cc0 <main>:
  * @param  None
  * @retval None
  *
  * @note 	Uses simple delay for sample completion, consider use of polling for improved design
  */
int main(void) {
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	af00      	add	r7, sp, #0

	//Init Vars
	sample_num = 0;
 8005cc4:	4b25      	ldr	r3, [pc, #148]	; (8005d5c <main+0x9c>)
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	701a      	strb	r2, [r3, #0]

	//Boot
	HAL_Init();
 8005cca:	f7fa fe4f 	bl	800096c <HAL_Init>
	SystemClock_Config();													/* Configure the system clock to 48 MHz 				*/
 8005cce:	f000 f84d 	bl	8005d6c <SystemClock_Config>
	gpio_led2_init();														/* enable led2 gpio 									*/
 8005cd2:	f000 f897 	bl	8005e04 <gpio_led2_init>
	ADC_Config();															/* initialize the ADC 									*/
 8005cd6:	f000 f8bf 	bl	8005e58 <ADC_Config>

	result = HAL_ADCEx_Calibration_Start(&AdcHandle);						/* Run the ADC calibration 								*/
 8005cda:	4b21      	ldr	r3, [pc, #132]	; (8005d60 <main+0xa0>)
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f7fc f8ab 	bl	8001e38 <HAL_ADCEx_Calibration_Start>
 8005ce2:	0003      	movs	r3, r0
 8005ce4:	001a      	movs	r2, r3
 8005ce6:	4b1f      	ldr	r3, [pc, #124]	; (8005d64 <main+0xa4>)
 8005ce8:	701a      	strb	r2, [r3, #0]
	_check(result);
 8005cea:	4b1e      	ldr	r3, [pc, #120]	; (8005d64 <main+0xa4>)
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f000 f966 	bl	8005fc0 <_check>

	//Boot Delay
	HAL_Delay(100);															/* periodic instability observed w/o boot delay			*/
 8005cf4:	2064      	movs	r0, #100	; 0x64
 8005cf6:	f7fa fea9 	bl	8000a4c <HAL_Delay>

	//******************************************************************************************************************************//
	//														START DMA SEQUENCE														//
	// @brief 	Start ADC conversion on regular group with transfer by DMA 															//
	//******************************************************************************************************************************//
	result = HAL_ADC_Start_DMA(&AdcHandle, (uint32_t *)adc_vals, ADC_NUM_CHANNELS);
 8005cfa:	491b      	ldr	r1, [pc, #108]	; (8005d68 <main+0xa8>)
 8005cfc:	4b18      	ldr	r3, [pc, #96]	; (8005d60 <main+0xa0>)
 8005cfe:	2205      	movs	r2, #5
 8005d00:	0018      	movs	r0, r3
 8005d02:	f7fb fb67 	bl	80013d4 <HAL_ADC_Start_DMA>
 8005d06:	0003      	movs	r3, r0
 8005d08:	001a      	movs	r2, r3
 8005d0a:	4b16      	ldr	r3, [pc, #88]	; (8005d64 <main+0xa4>)
 8005d0c:	701a      	strb	r2, [r3, #0]
	_check(result);
 8005d0e:	4b15      	ldr	r3, [pc, #84]	; (8005d64 <main+0xa4>)
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	0018      	movs	r0, r3
 8005d14:	f000 f954 	bl	8005fc0 <_check>
		//**************************************************************************************************************************//
		//													SAMPLE NEXT CHANNEL														//
		//**************************************************************************************************************************//

		//Read ADC
		result = HAL_ADC_Start(&AdcHandle);
 8005d18:	4b11      	ldr	r3, [pc, #68]	; (8005d60 <main+0xa0>)
 8005d1a:	0018      	movs	r0, r3
 8005d1c:	f7fb f91e 	bl	8000f5c <HAL_ADC_Start>
 8005d20:	0003      	movs	r3, r0
 8005d22:	001a      	movs	r2, r3
 8005d24:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <main+0xa4>)
 8005d26:	701a      	strb	r2, [r3, #0]
		_check(result);
 8005d28:	4b0e      	ldr	r3, [pc, #56]	; (8005d64 <main+0xa4>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	0018      	movs	r0, r3
 8005d2e:	f000 f947 	bl	8005fc0 <_check>

		//Update Count
		sample_num = (sample_num+1)%ADC_NUM_CHANNELS;
 8005d32:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <main+0x9c>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	3301      	adds	r3, #1
 8005d38:	2105      	movs	r1, #5
 8005d3a:	0018      	movs	r0, r3
 8005d3c:	f7fa fb64 	bl	8000408 <__aeabi_idivmod>
 8005d40:	000b      	movs	r3, r1
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <main+0x9c>)
 8005d46:	701a      	strb	r2, [r3, #0]

		//Wait for Completion of Sample
		HAL_Delay(1);														/* Wait for conversion completion 						*/
 8005d48:	2001      	movs	r0, #1
 8005d4a:	f7fa fe7f 	bl	8000a4c <HAL_Delay>

		if(!sample_num) {
 8005d4e:	4b03      	ldr	r3, [pc, #12]	; (8005d5c <main+0x9c>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1e0      	bne.n	8005d18 <main+0x58>
			_nop();															/* User breakpoint loc									*/
 8005d56:	46c0      	nop			; (mov r8, r8)
		result = HAL_ADC_Start(&AdcHandle);
 8005d58:	e7de      	b.n	8005d18 <main+0x58>
 8005d5a:	46c0      	nop			; (mov r8, r8)
 8005d5c:	200000f0 	.word	0x200000f0
 8005d60:	20000100 	.word	0x20000100
 8005d64:	2000014c 	.word	0x2000014c
 8005d68:	200000f4 	.word	0x200000f4

08005d6c <SystemClock_Config>:
  *            PLLMUL                         = 2
  *            Flash Latency(WS)              = 1
  * @param  None
  * @retval None
  */
static void SystemClock_Config(void) {
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b092      	sub	sp, #72	; 0x48
 8005d70:	af00      	add	r7, sp, #0

  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;
  
  /* Select HSI48 Oscillator as PLL source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8005d72:	1d3b      	adds	r3, r7, #4
 8005d74:	2220      	movs	r2, #32
 8005d76:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005d78:	1d3b      	adds	r3, r7, #4
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d7e:	1d3b      	adds	r3, r7, #4
 8005d80:	2202      	movs	r2, #2
 8005d82:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI48;
 8005d84:	1d3b      	adds	r3, r7, #4
 8005d86:	22c0      	movs	r2, #192	; 0xc0
 8005d88:	0252      	lsls	r2, r2, #9
 8005d8a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8005d8c:	1d3b      	adds	r3, r7, #4
 8005d8e:	2201      	movs	r2, #1
 8005d90:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8005d92:	1d3b      	adds	r3, r7, #4
 8005d94:	2200      	movs	r2, #0
 8005d96:	62da      	str	r2, [r3, #44]	; 0x2c

  result = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8005d98:	1d3b      	adds	r3, r7, #4
 8005d9a:	0018      	movs	r0, r3
 8005d9c:	f7fe fa10 	bl	80041c0 <HAL_RCC_OscConfig>
 8005da0:	0003      	movs	r3, r0
 8005da2:	001a      	movs	r2, r3
 8005da4:	4b14      	ldr	r3, [pc, #80]	; (8005df8 <SystemClock_Config+0x8c>)
 8005da6:	701a      	strb	r2, [r3, #0]
  _check(result);
 8005da8:	4b13      	ldr	r3, [pc, #76]	; (8005df8 <SystemClock_Config+0x8c>)
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	0018      	movs	r0, r3
 8005dae:	f000 f907 	bl	8005fc0 <_check>

  /* Select PLL as system clock source and configure the HCLK and PCLK1 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1);
 8005db2:	2338      	movs	r3, #56	; 0x38
 8005db4:	18fb      	adds	r3, r7, r3
 8005db6:	2207      	movs	r2, #7
 8005db8:	601a      	str	r2, [r3, #0]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005dba:	2338      	movs	r3, #56	; 0x38
 8005dbc:	18fb      	adds	r3, r7, r3
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005dc2:	2338      	movs	r3, #56	; 0x38
 8005dc4:	18fb      	adds	r3, r7, r3
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005dca:	2338      	movs	r3, #56	; 0x38
 8005dcc:	18fb      	adds	r3, r7, r3
 8005dce:	2200      	movs	r2, #0
 8005dd0:	60da      	str	r2, [r3, #12]

  result = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1);
 8005dd2:	2338      	movs	r3, #56	; 0x38
 8005dd4:	18fb      	adds	r3, r7, r3
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	0018      	movs	r0, r3
 8005dda:	f7fe fd4f 	bl	800487c <HAL_RCC_ClockConfig>
 8005dde:	0003      	movs	r3, r0
 8005de0:	001a      	movs	r2, r3
 8005de2:	4b05      	ldr	r3, [pc, #20]	; (8005df8 <SystemClock_Config+0x8c>)
 8005de4:	701a      	strb	r2, [r3, #0]
  _check(result);
 8005de6:	4b04      	ldr	r3, [pc, #16]	; (8005df8 <SystemClock_Config+0x8c>)
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	0018      	movs	r0, r3
 8005dec:	f000 f8e8 	bl	8005fc0 <_check>
}
 8005df0:	46c0      	nop			; (mov r8, r8)
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b012      	add	sp, #72	; 0x48
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	2000014c 	.word	0x2000014c

08005dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
static void Error_Handler(void) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	af00      	add	r7, sp, #0
  for(;;);																	/* User may add here some code to deal with this error	*/
 8005e00:	e7fe      	b.n	8005e00 <Error_Handler+0x4>
	...

08005e04 <gpio_led2_init>:
  * @fcn 	void gpio_led2_init(void)
  * @brief  Initialize the LED2 GPIO pin
  * @param  None
  * @retval None
  */
void gpio_led2_init(void) {
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0

	//Locals
	GPIO_InitTypeDef  GPIO_InitStruct;

	//Init Clocks
	LED2_GPIO_CLK_ENABLE();													/* Enable each GPIO Clock 								*/
 8005e0a:	4b12      	ldr	r3, [pc, #72]	; (8005e54 <gpio_led2_init+0x50>)
 8005e0c:	4a11      	ldr	r2, [pc, #68]	; (8005e54 <gpio_led2_init+0x50>)
 8005e0e:	6952      	ldr	r2, [r2, #20]
 8005e10:	2180      	movs	r1, #128	; 0x80
 8005e12:	0289      	lsls	r1, r1, #10
 8005e14:	430a      	orrs	r2, r1
 8005e16:	615a      	str	r2, [r3, #20]
 8005e18:	4b0e      	ldr	r3, [pc, #56]	; (8005e54 <gpio_led2_init+0x50>)
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	2380      	movs	r3, #128	; 0x80
 8005e1e:	029b      	lsls	r3, r3, #10
 8005e20:	4013      	ands	r3, r2
 8005e22:	603b      	str	r3, [r7, #0]
 8005e24:	683b      	ldr	r3, [r7, #0]

	//Configure IO
	GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8005e26:	1d3b      	adds	r3, r7, #4
 8005e28:	2201      	movs	r2, #1
 8005e2a:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8005e2c:	1d3b      	adds	r3, r7, #4
 8005e2e:	2201      	movs	r2, #1
 8005e30:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005e32:	1d3b      	adds	r3, r7, #4
 8005e34:	2203      	movs	r2, #3
 8005e36:	60da      	str	r2, [r3, #12]

	//Init
	GPIO_InitStruct.Pin = LED2_PIN;
 8005e38:	1d3b      	adds	r3, r7, #4
 8005e3a:	2220      	movs	r2, #32
 8005e3c:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(LED2_GPIO_PORT, &GPIO_InitStruct);
 8005e3e:	1d3a      	adds	r2, r7, #4
 8005e40:	2390      	movs	r3, #144	; 0x90
 8005e42:	05db      	lsls	r3, r3, #23
 8005e44:	0011      	movs	r1, r2
 8005e46:	0018      	movs	r0, r3
 8005e48:	f7fd fe7a 	bl	8003b40 <HAL_GPIO_Init>

	return;
 8005e4c:	46c0      	nop			; (mov r8, r8)
}
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	b006      	add	sp, #24
 8005e52:	bd80      	pop	{r7, pc}
 8005e54:	40021000 	.word	0x40021000

08005e58 <ADC_Config>:
/**
  * @brief  ADC configuration
  * @param  None
  * @retval None
  */
void ADC_Config(void) {
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0

	//Locals
	ADC_ChannelConfTypeDef   sConfig;

	/* Configuration of AdcHandle init structure: ADC parameters and regular group */
	AdcHandle.Instance = ADCx;
 8005e5e:	4b55      	ldr	r3, [pc, #340]	; (8005fb4 <ADC_Config+0x15c>)
 8005e60:	4a55      	ldr	r2, [pc, #340]	; (8005fb8 <ADC_Config+0x160>)
 8005e62:	601a      	str	r2, [r3, #0]

	result = HAL_ADC_DeInit(&AdcHandle);
 8005e64:	4b53      	ldr	r3, [pc, #332]	; (8005fb4 <ADC_Config+0x15c>)
 8005e66:	0018      	movs	r0, r3
 8005e68:	f7fa ffdc 	bl	8000e24 <HAL_ADC_DeInit>
 8005e6c:	0003      	movs	r3, r0
 8005e6e:	001a      	movs	r2, r3
 8005e70:	4b52      	ldr	r3, [pc, #328]	; (8005fbc <ADC_Config+0x164>)
 8005e72:	701a      	strb	r2, [r3, #0]
	_check(result);
 8005e74:	4b51      	ldr	r3, [pc, #324]	; (8005fbc <ADC_Config+0x164>)
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f000 f8a1 	bl	8005fc0 <_check>

	AdcHandle.Init.ClockPrescaler        = ADC_CLOCK_ASYNC_DIV1;
 8005e7e:	4b4d      	ldr	r3, [pc, #308]	; (8005fb4 <ADC_Config+0x15c>)
 8005e80:	2200      	movs	r2, #0
 8005e82:	605a      	str	r2, [r3, #4]
	AdcHandle.Init.Resolution            = ADC_RESOLUTION_12B;
 8005e84:	4b4b      	ldr	r3, [pc, #300]	; (8005fb4 <ADC_Config+0x15c>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	609a      	str	r2, [r3, #8]
	AdcHandle.Init.DataAlign             = ADC_DATAALIGN_RIGHT;
 8005e8a:	4b4a      	ldr	r3, [pc, #296]	; (8005fb4 <ADC_Config+0x15c>)
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	60da      	str	r2, [r3, #12]
	AdcHandle.Init.ScanConvMode          = ADC_SCAN_DIRECTION_FORWARD;    /* Sequencer will convert the number of channels configured below, successively from the lowest to the highest channel number */
 8005e90:	4b48      	ldr	r3, [pc, #288]	; (8005fb4 <ADC_Config+0x15c>)
 8005e92:	2201      	movs	r2, #1
 8005e94:	611a      	str	r2, [r3, #16]
	AdcHandle.Init.EOCSelection          = ADC_EOC_SINGLE_CONV;
 8005e96:	4b47      	ldr	r3, [pc, #284]	; (8005fb4 <ADC_Config+0x15c>)
 8005e98:	2204      	movs	r2, #4
 8005e9a:	615a      	str	r2, [r3, #20]
	AdcHandle.Init.LowPowerAutoWait      = DISABLE;
 8005e9c:	4b45      	ldr	r3, [pc, #276]	; (8005fb4 <ADC_Config+0x15c>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	619a      	str	r2, [r3, #24]
	AdcHandle.Init.LowPowerAutoPowerOff  = DISABLE;
 8005ea2:	4b44      	ldr	r3, [pc, #272]	; (8005fb4 <ADC_Config+0x15c>)
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	61da      	str	r2, [r3, #28]
	AdcHandle.Init.ContinuousConvMode    = DISABLE;                       /* Continuous mode disabled to have only 1 rank converted at each conversion trig, and because discontinuous mode is enabled */
 8005ea8:	4b42      	ldr	r3, [pc, #264]	; (8005fb4 <ADC_Config+0x15c>)
 8005eaa:	2200      	movs	r2, #0
 8005eac:	621a      	str	r2, [r3, #32]
	AdcHandle.Init.DiscontinuousConvMode = ENABLE;                        /* Sequencer of regular group will convert the sequence in several sub-divided sequences */
 8005eae:	4b41      	ldr	r3, [pc, #260]	; (8005fb4 <ADC_Config+0x15c>)
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	625a      	str	r2, [r3, #36]	; 0x24
	AdcHandle.Init.ExternalTrigConv      = ADC_SOFTWARE_START;            /* Software start to trig the 1st conversion manually, without external event */
 8005eb4:	4b3f      	ldr	r3, [pc, #252]	; (8005fb4 <ADC_Config+0x15c>)
 8005eb6:	22c2      	movs	r2, #194	; 0xc2
 8005eb8:	32ff      	adds	r2, #255	; 0xff
 8005eba:	629a      	str	r2, [r3, #40]	; 0x28
	AdcHandle.Init.ExternalTrigConvEdge  = ADC_EXTERNALTRIGCONVEDGE_NONE; /* Parameter discarded because trig of conversion by software start (no external event) */
 8005ebc:	4b3d      	ldr	r3, [pc, #244]	; (8005fb4 <ADC_Config+0x15c>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	62da      	str	r2, [r3, #44]	; 0x2c
	AdcHandle.Init.DMAContinuousRequests = ENABLE;                        /* ADC-DMA continuous requests to match with DMA configured in circular mode */
 8005ec2:	4b3c      	ldr	r3, [pc, #240]	; (8005fb4 <ADC_Config+0x15c>)
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	631a      	str	r2, [r3, #48]	; 0x30
	AdcHandle.Init.Overrun               = ADC_OVR_DATA_OVERWRITTEN;
 8005ec8:	4b3a      	ldr	r3, [pc, #232]	; (8005fb4 <ADC_Config+0x15c>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	635a      	str	r2, [r3, #52]	; 0x34
	/* Note: Set long sampling time due to internal channels (VrefInt, temperature sensor) constraints. Refer to device datasheet	*/
	/* 		 for min/typ/max values.                                                												*/
	AdcHandle.Init.SamplingTimeCommon    = ADC_SAMPLETIME_239CYCLES_5;
 8005ece:	4b39      	ldr	r3, [pc, #228]	; (8005fb4 <ADC_Config+0x15c>)
 8005ed0:	2207      	movs	r2, #7
 8005ed2:	639a      	str	r2, [r3, #56]	; 0x38

	result = HAL_ADC_Init(&AdcHandle);
 8005ed4:	4b37      	ldr	r3, [pc, #220]	; (8005fb4 <ADC_Config+0x15c>)
 8005ed6:	0018      	movs	r0, r3
 8005ed8:	f7fa fe66 	bl	8000ba8 <HAL_ADC_Init>
 8005edc:	0003      	movs	r3, r0
 8005ede:	001a      	movs	r2, r3
 8005ee0:	4b36      	ldr	r3, [pc, #216]	; (8005fbc <ADC_Config+0x164>)
 8005ee2:	701a      	strb	r2, [r3, #0]
	_check(result);
 8005ee4:	4b35      	ldr	r3, [pc, #212]	; (8005fbc <ADC_Config+0x164>)
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	0018      	movs	r0, r3
 8005eea:	f000 f869 	bl	8005fc0 <_check>

	/* Configuration of channel on ADCx regular group on sequencer rank 1 */
	/* Note: Considering IT occurring after each ADC conversion (IT by DMA end of transfer), select sampling time and ADC clock		*/
	/* 		 with sufficient duration to not create an overhead situation in IRQHandler.        									*/
	sConfig.Channel      = ADCx_CHANNELa;
 8005eee:	1d3b      	adds	r3, r7, #4
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	601a      	str	r2, [r3, #0]
	sConfig.Rank         = ADC_RANK_CHANNEL_NUMBER;
 8005ef4:	1d3b      	adds	r3, r7, #4
 8005ef6:	2280      	movs	r2, #128	; 0x80
 8005ef8:	0152      	lsls	r2, r2, #5
 8005efa:	605a      	str	r2, [r3, #4]

	result = HAL_ADC_ConfigChannel(&AdcHandle, &sConfig);
 8005efc:	1d3a      	adds	r2, r7, #4
 8005efe:	4b2d      	ldr	r3, [pc, #180]	; (8005fb4 <ADC_Config+0x15c>)
 8005f00:	0011      	movs	r1, r2
 8005f02:	0018      	movs	r0, r3
 8005f04:	f7fb fc3a 	bl	800177c <HAL_ADC_ConfigChannel>
 8005f08:	0003      	movs	r3, r0
 8005f0a:	001a      	movs	r2, r3
 8005f0c:	4b2b      	ldr	r3, [pc, #172]	; (8005fbc <ADC_Config+0x164>)
 8005f0e:	701a      	strb	r2, [r3, #0]
	_check(result);
 8005f10:	4b2a      	ldr	r3, [pc, #168]	; (8005fbc <ADC_Config+0x164>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	0018      	movs	r0, r3
 8005f16:	f000 f853 	bl	8005fc0 <_check>

	/* Configuration of channel on ADCx regular group on sequencer rank 2 Replicate previous rank settings, change only channel 	*/
	/* Note: On STM32F0xx, rank is defined by channel number. ADC Channel ADC_CHANNEL_TEMPSENSOR is on ADC channel 16, there is 1 	*/
	/*		 other channel enabled with lower channel number. Therefore, ADC_CHANNEL_TEMPSENSOR will be converted by the sequencer	*/
	/*		 as the 2nd rank.                                                          												*/
	sConfig.Channel      = ADCx_CHANNELb;
 8005f1a:	1d3b      	adds	r3, r7, #4
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	601a      	str	r2, [r3, #0]

	result = HAL_ADC_ConfigChannel(&AdcHandle, &sConfig);
 8005f20:	1d3a      	adds	r2, r7, #4
 8005f22:	4b24      	ldr	r3, [pc, #144]	; (8005fb4 <ADC_Config+0x15c>)
 8005f24:	0011      	movs	r1, r2
 8005f26:	0018      	movs	r0, r3
 8005f28:	f7fb fc28 	bl	800177c <HAL_ADC_ConfigChannel>
 8005f2c:	0003      	movs	r3, r0
 8005f2e:	001a      	movs	r2, r3
 8005f30:	4b22      	ldr	r3, [pc, #136]	; (8005fbc <ADC_Config+0x164>)
 8005f32:	701a      	strb	r2, [r3, #0]
	_check(result);
 8005f34:	4b21      	ldr	r3, [pc, #132]	; (8005fbc <ADC_Config+0x164>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	0018      	movs	r0, r3
 8005f3a:	f000 f841 	bl	8005fc0 <_check>

	//Channel 3
	sConfig.Channel      = ADCx_CHANNELc;
 8005f3e:	1d3b      	adds	r3, r7, #4
 8005f40:	2208      	movs	r2, #8
 8005f42:	601a      	str	r2, [r3, #0]
	result = HAL_ADC_ConfigChannel(&AdcHandle, &sConfig);
 8005f44:	1d3a      	adds	r2, r7, #4
 8005f46:	4b1b      	ldr	r3, [pc, #108]	; (8005fb4 <ADC_Config+0x15c>)
 8005f48:	0011      	movs	r1, r2
 8005f4a:	0018      	movs	r0, r3
 8005f4c:	f7fb fc16 	bl	800177c <HAL_ADC_ConfigChannel>
 8005f50:	0003      	movs	r3, r0
 8005f52:	001a      	movs	r2, r3
 8005f54:	4b19      	ldr	r3, [pc, #100]	; (8005fbc <ADC_Config+0x164>)
 8005f56:	701a      	strb	r2, [r3, #0]
	_check(result);
 8005f58:	4b18      	ldr	r3, [pc, #96]	; (8005fbc <ADC_Config+0x164>)
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	0018      	movs	r0, r3
 8005f5e:	f000 f82f 	bl	8005fc0 <_check>

	//Channel 4
	sConfig.Channel      = ADCx_CHANNELd;
 8005f62:	1d3b      	adds	r3, r7, #4
 8005f64:	2209      	movs	r2, #9
 8005f66:	601a      	str	r2, [r3, #0]
	result = HAL_ADC_ConfigChannel(&AdcHandle, &sConfig);
 8005f68:	1d3a      	adds	r2, r7, #4
 8005f6a:	4b12      	ldr	r3, [pc, #72]	; (8005fb4 <ADC_Config+0x15c>)
 8005f6c:	0011      	movs	r1, r2
 8005f6e:	0018      	movs	r0, r3
 8005f70:	f7fb fc04 	bl	800177c <HAL_ADC_ConfigChannel>
 8005f74:	0003      	movs	r3, r0
 8005f76:	001a      	movs	r2, r3
 8005f78:	4b10      	ldr	r3, [pc, #64]	; (8005fbc <ADC_Config+0x164>)
 8005f7a:	701a      	strb	r2, [r3, #0]
	_check(result);
 8005f7c:	4b0f      	ldr	r3, [pc, #60]	; (8005fbc <ADC_Config+0x164>)
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	0018      	movs	r0, r3
 8005f82:	f000 f81d 	bl	8005fc0 <_check>

	//Channel 4
	sConfig.Channel      = ADCx_CHANNELe;
 8005f86:	1d3b      	adds	r3, r7, #4
 8005f88:	220e      	movs	r2, #14
 8005f8a:	601a      	str	r2, [r3, #0]
	result = HAL_ADC_ConfigChannel(&AdcHandle, &sConfig);
 8005f8c:	1d3a      	adds	r2, r7, #4
 8005f8e:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <ADC_Config+0x15c>)
 8005f90:	0011      	movs	r1, r2
 8005f92:	0018      	movs	r0, r3
 8005f94:	f7fb fbf2 	bl	800177c <HAL_ADC_ConfigChannel>
 8005f98:	0003      	movs	r3, r0
 8005f9a:	001a      	movs	r2, r3
 8005f9c:	4b07      	ldr	r3, [pc, #28]	; (8005fbc <ADC_Config+0x164>)
 8005f9e:	701a      	strb	r2, [r3, #0]
	_check(result);
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <ADC_Config+0x164>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f000 f80b 	bl	8005fc0 <_check>

	return;
 8005faa:	46c0      	nop			; (mov r8, r8)
}
 8005fac:	46bd      	mov	sp, r7
 8005fae:	b004      	add	sp, #16
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	20000100 	.word	0x20000100
 8005fb8:	40012400 	.word	0x40012400
 8005fbc:	2000014c 	.word	0x2000014c

08005fc0 <_check>:
  * @brief  Check for HAL errors
  * @param  None
  * @retval None
  * @warn 	Spins on !HAL_OK
  */
void _check(HAL_StatusTypeDef result) {
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	0002      	movs	r2, r0
 8005fc8:	1dfb      	adds	r3, r7, #7
 8005fca:	701a      	strb	r2, [r3, #0]

	//Check result
	if (result != HAL_OK) {
 8005fcc:	1dfb      	adds	r3, r7, #7
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <_check+0x1a>
		Error_Handler();    												/* Calibration Error 									*/
 8005fd4:	f7ff ff12 	bl	8005dfc <Error_Handler>
	}

	return;
 8005fd8:	46c0      	nop			; (mov r8, r8)
 8005fda:	46c0      	nop			; (mov r8, r8)
}
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	b002      	add	sp, #8
 8005fe0:	bd80      	pop	{r7, pc}
	...

08005fe4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005fe4:	480d      	ldr	r0, [pc, #52]	; (800601c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005fe6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8005fe8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8005fea:	e003      	b.n	8005ff4 <LoopCopyDataInit>

08005fec <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005fec:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8005fee:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005ff0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005ff2:	3104      	adds	r1, #4

08005ff4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005ff4:	480b      	ldr	r0, [pc, #44]	; (8006024 <LoopForever+0xa>)
  ldr r3, =_edata
 8005ff6:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <LoopForever+0xe>)
  adds r2, r0, r1
 8005ff8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8005ffa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005ffc:	d3f6      	bcc.n	8005fec <CopyDataInit>
  ldr r2, =_sbss
 8005ffe:	4a0b      	ldr	r2, [pc, #44]	; (800602c <LoopForever+0x12>)
  b LoopFillZerobss
 8006000:	e002      	b.n	8006008 <LoopFillZerobss>

08006002 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8006002:	2300      	movs	r3, #0
  str  r3, [r2]
 8006004:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006006:	3204      	adds	r2, #4

08006008 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8006008:	4b09      	ldr	r3, [pc, #36]	; (8006030 <LoopForever+0x16>)
  cmp r2, r3
 800600a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800600c:	d3f9      	bcc.n	8006002 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800600e:	f000 f977 	bl	8006300 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8006012:	f000 fcd1 	bl	80069b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8006016:	f7ff fe53 	bl	8005cc0 <main>

0800601a <LoopForever>:

LoopForever:
    b LoopForever
 800601a:	e7fe      	b.n	800601a <LoopForever>
  ldr   r0, =_estack
 800601c:	20008000 	.word	0x20008000
  ldr r3, =_sidata
 8006020:	08006b14 	.word	0x08006b14
  ldr r0, =_sdata
 8006024:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8006028:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800602c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8006030:	20000154 	.word	0x20000154

08006034 <CEC_CAN_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006034:	e7fe      	b.n	8006034 <CEC_CAN_IRQHandler>
	...

08006038 <HAL_ADC_MspInit>:
  *          - Configure the NVIC associated to the peripheral interruptions
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b098      	sub	sp, #96	; 0x60
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef  DmaHandle;
  RCC_OscInitTypeDef        RCC_OscInitStructure;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable clock of GPIO associated to the peripheral channels */
  ADCx_CHANNELa_GPIO_CLK_ENABLE();
 8006040:	4b75      	ldr	r3, [pc, #468]	; (8006218 <HAL_ADC_MspInit+0x1e0>)
 8006042:	4a75      	ldr	r2, [pc, #468]	; (8006218 <HAL_ADC_MspInit+0x1e0>)
 8006044:	6952      	ldr	r2, [r2, #20]
 8006046:	2180      	movs	r1, #128	; 0x80
 8006048:	0289      	lsls	r1, r1, #10
 800604a:	430a      	orrs	r2, r1
 800604c:	615a      	str	r2, [r3, #20]
 800604e:	4b72      	ldr	r3, [pc, #456]	; (8006218 <HAL_ADC_MspInit+0x1e0>)
 8006050:	695a      	ldr	r2, [r3, #20]
 8006052:	2380      	movs	r3, #128	; 0x80
 8006054:	029b      	lsls	r3, r3, #10
 8006056:	4013      	ands	r3, r2
 8006058:	617b      	str	r3, [r7, #20]
 800605a:	697b      	ldr	r3, [r7, #20]
  ADCx_CHANNELb_GPIO_CLK_ENABLE();
 800605c:	4b6e      	ldr	r3, [pc, #440]	; (8006218 <HAL_ADC_MspInit+0x1e0>)
 800605e:	4a6e      	ldr	r2, [pc, #440]	; (8006218 <HAL_ADC_MspInit+0x1e0>)
 8006060:	6952      	ldr	r2, [r2, #20]
 8006062:	2180      	movs	r1, #128	; 0x80
 8006064:	0289      	lsls	r1, r1, #10
 8006066:	430a      	orrs	r2, r1
 8006068:	615a      	str	r2, [r3, #20]
 800606a:	4b6b      	ldr	r3, [pc, #428]	; (8006218 <HAL_ADC_MspInit+0x1e0>)
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	2380      	movs	r3, #128	; 0x80
 8006070:	029b      	lsls	r3, r3, #10
 8006072:	4013      	ands	r3, r2
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	693b      	ldr	r3, [r7, #16]
  
  /* Enable clock of ADCx peripheral */
  ADCx_CLK_ENABLE();
 8006078:	4b67      	ldr	r3, [pc, #412]	; (8006218 <HAL_ADC_MspInit+0x1e0>)
 800607a:	4a67      	ldr	r2, [pc, #412]	; (8006218 <HAL_ADC_MspInit+0x1e0>)
 800607c:	6992      	ldr	r2, [r2, #24]
 800607e:	2180      	movs	r1, #128	; 0x80
 8006080:	0089      	lsls	r1, r1, #2
 8006082:	430a      	orrs	r2, r1
 8006084:	619a      	str	r2, [r3, #24]
 8006086:	4b64      	ldr	r3, [pc, #400]	; (8006218 <HAL_ADC_MspInit+0x1e0>)
 8006088:	699a      	ldr	r2, [r3, #24]
 800608a:	2380      	movs	r3, #128	; 0x80
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	4013      	ands	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	68fb      	ldr	r3, [r7, #12]
  /*       the clock source has to be enabled at RCC top level using function */
  /*       "HAL_RCC_OscConfig()" (see comments in stm32f0_hal_adc.c header)   */

  /* Enable asynchronous clock source of ADCx */
  /* (place oscillator HSI14 under control of the ADC) */
  HAL_RCC_GetOscConfig(&RCC_OscInitStructure);
 8006094:	2318      	movs	r3, #24
 8006096:	18fb      	adds	r3, r7, r3
 8006098:	0018      	movs	r0, r3
 800609a:	f7fe fdf7 	bl	8004c8c <HAL_RCC_GetOscConfig>
  RCC_OscInitStructure.OscillatorType = RCC_OSCILLATORTYPE_HSI14;
 800609e:	2318      	movs	r3, #24
 80060a0:	18fb      	adds	r3, r7, r3
 80060a2:	2210      	movs	r2, #16
 80060a4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStructure.HSI14CalibrationValue = RCC_HSI14CALIBRATION_DEFAULT;
 80060a6:	2318      	movs	r3, #24
 80060a8:	18fb      	adds	r3, r7, r3
 80060aa:	2210      	movs	r2, #16
 80060ac:	619a      	str	r2, [r3, #24]
  RCC_OscInitStructure.HSI14State = RCC_HSI14_ADC_CONTROL;
 80060ae:	2318      	movs	r3, #24
 80060b0:	18fb      	adds	r3, r7, r3
 80060b2:	2205      	movs	r2, #5
 80060b4:	4252      	negs	r2, r2
 80060b6:	615a      	str	r2, [r3, #20]
  HAL_RCC_OscConfig(&RCC_OscInitStructure);
 80060b8:	2318      	movs	r3, #24
 80060ba:	18fb      	adds	r3, r7, r3
 80060bc:	0018      	movs	r0, r3
 80060be:	f7fe f87f 	bl	80041c0 <HAL_RCC_OscConfig>
  
  /* Enable clock of DMA associated to the peripheral */
  ADCx_DMA_CLK_ENABLE();
 80060c2:	4b55      	ldr	r3, [pc, #340]	; (8006218 <HAL_ADC_MspInit+0x1e0>)
 80060c4:	4a54      	ldr	r2, [pc, #336]	; (8006218 <HAL_ADC_MspInit+0x1e0>)
 80060c6:	6952      	ldr	r2, [r2, #20]
 80060c8:	2101      	movs	r1, #1
 80060ca:	430a      	orrs	r2, r1
 80060cc:	615a      	str	r2, [r3, #20]
 80060ce:	4b52      	ldr	r3, [pc, #328]	; (8006218 <HAL_ADC_MspInit+0x1e0>)
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	2201      	movs	r2, #1
 80060d4:	4013      	ands	r3, r2
 80060d6:	60bb      	str	r3, [r7, #8]
 80060d8:	68bb      	ldr	r3, [r7, #8]
  
  /*##-2- Configure peripheral GPIO ##########################################*/
  /* Configure GPIO pin of the selected ADC channel */
  GPIO_InitStruct.Pin = ADCx_CHANNELa_PIN;
 80060da:	234c      	movs	r3, #76	; 0x4c
 80060dc:	18fb      	adds	r3, r7, r3
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060e2:	234c      	movs	r3, #76	; 0x4c
 80060e4:	18fb      	adds	r3, r7, r3
 80060e6:	2203      	movs	r2, #3
 80060e8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060ea:	234c      	movs	r3, #76	; 0x4c
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	2200      	movs	r2, #0
 80060f0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADCx_CHANNELa_GPIO_PORT, &GPIO_InitStruct);
 80060f2:	234c      	movs	r3, #76	; 0x4c
 80060f4:	18fa      	adds	r2, r7, r3
 80060f6:	2390      	movs	r3, #144	; 0x90
 80060f8:	05db      	lsls	r3, r3, #23
 80060fa:	0011      	movs	r1, r2
 80060fc:	0018      	movs	r0, r3
 80060fe:	f7fd fd1f 	bl	8003b40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ADCx_CHANNELb_PIN;
 8006102:	234c      	movs	r3, #76	; 0x4c
 8006104:	18fb      	adds	r3, r7, r3
 8006106:	2202      	movs	r2, #2
 8006108:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800610a:	234c      	movs	r3, #76	; 0x4c
 800610c:	18fb      	adds	r3, r7, r3
 800610e:	2203      	movs	r2, #3
 8006110:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006112:	234c      	movs	r3, #76	; 0x4c
 8006114:	18fb      	adds	r3, r7, r3
 8006116:	2200      	movs	r2, #0
 8006118:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADCx_CHANNELb_GPIO_PORT, &GPIO_InitStruct);
 800611a:	234c      	movs	r3, #76	; 0x4c
 800611c:	18fa      	adds	r2, r7, r3
 800611e:	2390      	movs	r3, #144	; 0x90
 8006120:	05db      	lsls	r3, r3, #23
 8006122:	0011      	movs	r1, r2
 8006124:	0018      	movs	r0, r3
 8006126:	f7fd fd0b 	bl	8003b40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ADCx_CHANNELc_PIN;
 800612a:	234c      	movs	r3, #76	; 0x4c
 800612c:	18fb      	adds	r3, r7, r3
 800612e:	2201      	movs	r2, #1
 8006130:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006132:	234c      	movs	r3, #76	; 0x4c
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	2203      	movs	r2, #3
 8006138:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800613a:	234c      	movs	r3, #76	; 0x4c
 800613c:	18fb      	adds	r3, r7, r3
 800613e:	2200      	movs	r2, #0
 8006140:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADCx_CHANNELc_GPIO_PORT, &GPIO_InitStruct);
 8006142:	234c      	movs	r3, #76	; 0x4c
 8006144:	18fb      	adds	r3, r7, r3
 8006146:	4a35      	ldr	r2, [pc, #212]	; (800621c <HAL_ADC_MspInit+0x1e4>)
 8006148:	0019      	movs	r1, r3
 800614a:	0010      	movs	r0, r2
 800614c:	f7fd fcf8 	bl	8003b40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ADCx_CHANNELd_PIN;
 8006150:	234c      	movs	r3, #76	; 0x4c
 8006152:	18fb      	adds	r3, r7, r3
 8006154:	2202      	movs	r2, #2
 8006156:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006158:	234c      	movs	r3, #76	; 0x4c
 800615a:	18fb      	adds	r3, r7, r3
 800615c:	2203      	movs	r2, #3
 800615e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006160:	234c      	movs	r3, #76	; 0x4c
 8006162:	18fb      	adds	r3, r7, r3
 8006164:	2200      	movs	r2, #0
 8006166:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADCx_CHANNELd_GPIO_PORT, &GPIO_InitStruct);
 8006168:	234c      	movs	r3, #76	; 0x4c
 800616a:	18fb      	adds	r3, r7, r3
 800616c:	4a2b      	ldr	r2, [pc, #172]	; (800621c <HAL_ADC_MspInit+0x1e4>)
 800616e:	0019      	movs	r1, r3
 8006170:	0010      	movs	r0, r2
 8006172:	f7fd fce5 	bl	8003b40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = ADCx_CHANNELe_PIN;
 8006176:	234c      	movs	r3, #76	; 0x4c
 8006178:	18fb      	adds	r3, r7, r3
 800617a:	2210      	movs	r2, #16
 800617c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800617e:	234c      	movs	r3, #76	; 0x4c
 8006180:	18fb      	adds	r3, r7, r3
 8006182:	2203      	movs	r2, #3
 8006184:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006186:	234c      	movs	r3, #76	; 0x4c
 8006188:	18fb      	adds	r3, r7, r3
 800618a:	2200      	movs	r2, #0
 800618c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ADCx_CHANNELe_GPIO_PORT, &GPIO_InitStruct);
 800618e:	234c      	movs	r3, #76	; 0x4c
 8006190:	18fb      	adds	r3, r7, r3
 8006192:	4a23      	ldr	r2, [pc, #140]	; (8006220 <HAL_ADC_MspInit+0x1e8>)
 8006194:	0019      	movs	r1, r3
 8006196:	0010      	movs	r0, r2
 8006198:	f7fd fcd2 	bl	8003b40 <HAL_GPIO_Init>
	
  /*##-3- Configure the DMA ##################################################*/
  /* Configure DMA parameters */
  DmaHandle.Instance = ADCx_DMA;
 800619c:	4b21      	ldr	r3, [pc, #132]	; (8006224 <HAL_ADC_MspInit+0x1ec>)
 800619e:	4a22      	ldr	r2, [pc, #136]	; (8006228 <HAL_ADC_MspInit+0x1f0>)
 80061a0:	601a      	str	r2, [r3, #0]

  DmaHandle.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80061a2:	4b20      	ldr	r3, [pc, #128]	; (8006224 <HAL_ADC_MspInit+0x1ec>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	605a      	str	r2, [r3, #4]
  DmaHandle.Init.PeriphInc           = DMA_PINC_DISABLE;
 80061a8:	4b1e      	ldr	r3, [pc, #120]	; (8006224 <HAL_ADC_MspInit+0x1ec>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	609a      	str	r2, [r3, #8]
  DmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80061ae:	4b1d      	ldr	r3, [pc, #116]	; (8006224 <HAL_ADC_MspInit+0x1ec>)
 80061b0:	2280      	movs	r2, #128	; 0x80
 80061b2:	60da      	str	r2, [r3, #12]
  DmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;   /* Transfer from ADC by half-word to match with ADC configuration: ADC resolution 10 or 12 bits */
 80061b4:	4b1b      	ldr	r3, [pc, #108]	; (8006224 <HAL_ADC_MspInit+0x1ec>)
 80061b6:	2280      	movs	r2, #128	; 0x80
 80061b8:	0052      	lsls	r2, r2, #1
 80061ba:	611a      	str	r2, [r3, #16]
  DmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;   /* Transfer to memory by half-word to match with buffer variable type: half-word */
 80061bc:	4b19      	ldr	r3, [pc, #100]	; (8006224 <HAL_ADC_MspInit+0x1ec>)
 80061be:	2280      	movs	r2, #128	; 0x80
 80061c0:	00d2      	lsls	r2, r2, #3
 80061c2:	615a      	str	r2, [r3, #20]
  DmaHandle.Init.Mode                = DMA_CIRCULAR;              /* DMA in circular mode to match with ADC configuration: DMA continuous requests */
 80061c4:	4b17      	ldr	r3, [pc, #92]	; (8006224 <HAL_ADC_MspInit+0x1ec>)
 80061c6:	2220      	movs	r2, #32
 80061c8:	619a      	str	r2, [r3, #24]
  DmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 80061ca:	4b16      	ldr	r3, [pc, #88]	; (8006224 <HAL_ADC_MspInit+0x1ec>)
 80061cc:	2280      	movs	r2, #128	; 0x80
 80061ce:	0192      	lsls	r2, r2, #6
 80061d0:	61da      	str	r2, [r3, #28]
  
  /* Deinitialize  & Initialize the DMA for new transfer */
  HAL_DMA_DeInit(&DmaHandle);
 80061d2:	4b14      	ldr	r3, [pc, #80]	; (8006224 <HAL_ADC_MspInit+0x1ec>)
 80061d4:	0018      	movs	r0, r3
 80061d6:	f7fc f927 	bl	8002428 <HAL_DMA_DeInit>
  HAL_DMA_Init(&DmaHandle);
 80061da:	4b12      	ldr	r3, [pc, #72]	; (8006224 <HAL_ADC_MspInit+0x1ec>)
 80061dc:	0018      	movs	r0, r3
 80061de:	f7fc f8cf 	bl	8002380 <HAL_DMA_Init>

  /* Associate the initialized DMA handle to the ADC handle */
  __HAL_LINKDMA(hadc, DMA_Handle, DmaHandle);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a0f      	ldr	r2, [pc, #60]	; (8006224 <HAL_ADC_MspInit+0x1ec>)
 80061e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80061e8:	4b0e      	ldr	r3, [pc, #56]	; (8006224 <HAL_ADC_MspInit+0x1ec>)
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	625a      	str	r2, [r3, #36]	; 0x24
  
  /*##-4- Configure the NVIC #################################################*/

  /* NVIC configuration for DMA interrupt (transfer completion or error) */
  /* Priority: high-priority */
  HAL_NVIC_SetPriority(ADCx_DMA_IRQn, 1, 0);
 80061ee:	2200      	movs	r2, #0
 80061f0:	2101      	movs	r1, #1
 80061f2:	2009      	movs	r0, #9
 80061f4:	f7fc f812 	bl	800221c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_DMA_IRQn);
 80061f8:	2009      	movs	r0, #9
 80061fa:	f7fc f825 	bl	8002248 <HAL_NVIC_EnableIRQ>
  

  /* NVIC configuration for ADC interrupt */
  /* Priority: high-priority */
  HAL_NVIC_SetPriority(ADCx_IRQn, 0, 0);
 80061fe:	2200      	movs	r2, #0
 8006200:	2100      	movs	r1, #0
 8006202:	200c      	movs	r0, #12
 8006204:	f7fc f80a 	bl	800221c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADCx_IRQn);
 8006208:	200c      	movs	r0, #12
 800620a:	f7fc f81d 	bl	8002248 <HAL_NVIC_EnableIRQ>
}
 800620e:	46c0      	nop			; (mov r8, r8)
 8006210:	46bd      	mov	sp, r7
 8006212:	b018      	add	sp, #96	; 0x60
 8006214:	bd80      	pop	{r7, pc}
 8006216:	46c0      	nop			; (mov r8, r8)
 8006218:	40021000 	.word	0x40021000
 800621c:	48000400 	.word	0x48000400
 8006220:	48000800 	.word	0x48000800
 8006224:	20000084 	.word	0x20000084
 8006228:	40020008 	.word	0x40020008

0800622c <HAL_ADC_MspDeInit>:
  *          - Revert NVIC associated to the peripheral interruptions to its default state
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspDeInit(ADC_HandleTypeDef *hadc)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b082      	sub	sp, #8
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /*##-1- Reset peripherals ##################################################*/
  ADCx_FORCE_RESET();
 8006234:	4b12      	ldr	r3, [pc, #72]	; (8006280 <HAL_ADC_MspDeInit+0x54>)
 8006236:	4a12      	ldr	r2, [pc, #72]	; (8006280 <HAL_ADC_MspDeInit+0x54>)
 8006238:	68d2      	ldr	r2, [r2, #12]
 800623a:	2180      	movs	r1, #128	; 0x80
 800623c:	0089      	lsls	r1, r1, #2
 800623e:	430a      	orrs	r2, r1
 8006240:	60da      	str	r2, [r3, #12]
  ADCx_RELEASE_RESET();
 8006242:	4b0f      	ldr	r3, [pc, #60]	; (8006280 <HAL_ADC_MspDeInit+0x54>)
 8006244:	4a0e      	ldr	r2, [pc, #56]	; (8006280 <HAL_ADC_MspDeInit+0x54>)
 8006246:	68d2      	ldr	r2, [r2, #12]
 8006248:	490e      	ldr	r1, [pc, #56]	; (8006284 <HAL_ADC_MspDeInit+0x58>)
 800624a:	400a      	ands	r2, r1
 800624c:	60da      	str	r2, [r3, #12]

  /*##-2- Disable peripherals and GPIO Clocks ################################*/
  /* De-initialize GPIO pin of the selected ADC channel */
  HAL_GPIO_DeInit(ADCx_CHANNELa_GPIO_PORT, ADCx_CHANNELa_PIN);
 800624e:	2390      	movs	r3, #144	; 0x90
 8006250:	05db      	lsls	r3, r3, #23
 8006252:	2101      	movs	r1, #1
 8006254:	0018      	movs	r0, r3
 8006256:	f7fd fdef 	bl	8003e38 <HAL_GPIO_DeInit>

  /*##-3- Disable the DMA ####################################################*/
  /* De-Initialize the DMA associated to the peripheral */
  if(hadc->DMA_Handle != NULL)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800625e:	2b00      	cmp	r3, #0
 8006260:	d004      	beq.n	800626c <HAL_ADC_MspDeInit+0x40>
  {
    HAL_DMA_DeInit(hadc->DMA_Handle);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006266:	0018      	movs	r0, r3
 8006268:	f7fc f8de 	bl	8002428 <HAL_DMA_DeInit>
  }

  /*##-4- Disable the NVIC ###################################################*/
  /* Disable the NVIC configuration for DMA interrupt */
  HAL_NVIC_DisableIRQ(ADCx_DMA_IRQn);
 800626c:	2009      	movs	r0, #9
 800626e:	f7fb fffb 	bl	8002268 <HAL_NVIC_DisableIRQ>
  
  /* Disable the NVIC configuration for ADC interrupt */
  HAL_NVIC_DisableIRQ(ADCx_IRQn);
 8006272:	200c      	movs	r0, #12
 8006274:	f7fb fff8 	bl	8002268 <HAL_NVIC_DisableIRQ>
}
 8006278:	46c0      	nop			; (mov r8, r8)
 800627a:	46bd      	mov	sp, r7
 800627c:	b002      	add	sp, #8
 800627e:	bd80      	pop	{r7, pc}
 8006280:	40021000 	.word	0x40021000
 8006284:	fffffdff 	.word	0xfffffdff

08006288 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	af00      	add	r7, sp, #0
}
 800628c:	46c0      	nop			; (mov r8, r8)
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}

08006292 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8006296:	e7fe      	b.n	8006296 <HardFault_Handler+0x4>

08006298 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
}
 800629c:	46c0      	nop			; (mov r8, r8)
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	af00      	add	r7, sp, #0
}
 80062a6:	46c0      	nop			; (mov r8, r8)
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bd80      	pop	{r7, pc}

080062ac <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
  HAL_IncTick();
 80062b0:	f7fa fbb6 	bl	8000a20 <HAL_IncTick>
}
 80062b4:	46c0      	nop			; (mov r8, r8)
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <EXTI4_15_IRQHandler>:
  * @brief  This function handles external line 4_15 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI4_15_IRQHandler(void)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(USER_BUTTON_PIN);
 80062be:	2380      	movs	r3, #128	; 0x80
 80062c0:	019b      	lsls	r3, r3, #6
 80062c2:	0018      	movs	r0, r3
 80062c4:	f7fd ff0a 	bl	80040dc <HAL_GPIO_EXTI_IRQHandler>
}
 80062c8:	46c0      	nop			; (mov r8, r8)
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <ADC1_COMP_IRQHandler>:
  * @brief  This function handles ADC interrupt request.
  * @param  None
  * @retval None
  */
void ADCx_IRQHandler(void)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	af00      	add	r7, sp, #0
  HAL_ADC_IRQHandler(&AdcHandle);
 80062d4:	4b03      	ldr	r3, [pc, #12]	; (80062e4 <ADC1_COMP_IRQHandler+0x14>)
 80062d6:	0018      	movs	r0, r3
 80062d8:	f7fb f97a 	bl	80015d0 <HAL_ADC_IRQHandler>
}
 80062dc:	46c0      	nop			; (mov r8, r8)
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	46c0      	nop			; (mov r8, r8)
 80062e4:	20000100 	.word	0x20000100

080062e8 <DMA1_Ch1_IRQHandler>:
* @brief  This function handles DMA interrupt request.
* @param  None
* @retval None
*/
void ADCx_DMA_IRQHandler(void)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(AdcHandle.DMA_Handle);
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <DMA1_Ch1_IRQHandler+0x14>)
 80062ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f0:	0018      	movs	r0, r3
 80062f2:	f7fc fa8d 	bl	8002810 <HAL_DMA_IRQHandler>
}
 80062f6:	46c0      	nop			; (mov r8, r8)
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}
 80062fc:	20000100 	.word	0x20000100

08006300 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8006304:	4b1a      	ldr	r3, [pc, #104]	; (8006370 <SystemInit+0x70>)
 8006306:	4a1a      	ldr	r2, [pc, #104]	; (8006370 <SystemInit+0x70>)
 8006308:	6812      	ldr	r2, [r2, #0]
 800630a:	2101      	movs	r1, #1
 800630c:	430a      	orrs	r2, r1
 800630e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8006310:	4b17      	ldr	r3, [pc, #92]	; (8006370 <SystemInit+0x70>)
 8006312:	4a17      	ldr	r2, [pc, #92]	; (8006370 <SystemInit+0x70>)
 8006314:	6852      	ldr	r2, [r2, #4]
 8006316:	4917      	ldr	r1, [pc, #92]	; (8006374 <SystemInit+0x74>)
 8006318:	400a      	ands	r2, r1
 800631a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800631c:	4b14      	ldr	r3, [pc, #80]	; (8006370 <SystemInit+0x70>)
 800631e:	4a14      	ldr	r2, [pc, #80]	; (8006370 <SystemInit+0x70>)
 8006320:	6812      	ldr	r2, [r2, #0]
 8006322:	4915      	ldr	r1, [pc, #84]	; (8006378 <SystemInit+0x78>)
 8006324:	400a      	ands	r2, r1
 8006326:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8006328:	4b11      	ldr	r3, [pc, #68]	; (8006370 <SystemInit+0x70>)
 800632a:	4a11      	ldr	r2, [pc, #68]	; (8006370 <SystemInit+0x70>)
 800632c:	6812      	ldr	r2, [r2, #0]
 800632e:	4913      	ldr	r1, [pc, #76]	; (800637c <SystemInit+0x7c>)
 8006330:	400a      	ands	r2, r1
 8006332:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8006334:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <SystemInit+0x70>)
 8006336:	4a0e      	ldr	r2, [pc, #56]	; (8006370 <SystemInit+0x70>)
 8006338:	6852      	ldr	r2, [r2, #4]
 800633a:	4911      	ldr	r1, [pc, #68]	; (8006380 <SystemInit+0x80>)
 800633c:	400a      	ands	r2, r1
 800633e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8006340:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <SystemInit+0x70>)
 8006342:	4a0b      	ldr	r2, [pc, #44]	; (8006370 <SystemInit+0x70>)
 8006344:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006346:	210f      	movs	r1, #15
 8006348:	438a      	bics	r2, r1
 800634a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 800634c:	4b08      	ldr	r3, [pc, #32]	; (8006370 <SystemInit+0x70>)
 800634e:	4a08      	ldr	r2, [pc, #32]	; (8006370 <SystemInit+0x70>)
 8006350:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006352:	490c      	ldr	r1, [pc, #48]	; (8006384 <SystemInit+0x84>)
 8006354:	400a      	ands	r2, r1
 8006356:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8006358:	4b05      	ldr	r3, [pc, #20]	; (8006370 <SystemInit+0x70>)
 800635a:	4a05      	ldr	r2, [pc, #20]	; (8006370 <SystemInit+0x70>)
 800635c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800635e:	2101      	movs	r1, #1
 8006360:	438a      	bics	r2, r1
 8006362:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8006364:	4b02      	ldr	r3, [pc, #8]	; (8006370 <SystemInit+0x70>)
 8006366:	2200      	movs	r2, #0
 8006368:	609a      	str	r2, [r3, #8]

}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	46bd      	mov	sp, r7
 800636e:	bd80      	pop	{r7, pc}
 8006370:	40021000 	.word	0x40021000
 8006374:	08ffb80c 	.word	0x08ffb80c
 8006378:	fef6ffff 	.word	0xfef6ffff
 800637c:	fffbffff 	.word	0xfffbffff
 8006380:	ffc0ffff 	.word	0xffc0ffff
 8006384:	fff0feac 	.word	0xfff0feac

08006388 <SystemCoreClockUpdate>:
  *
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, predivfactor = 0;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	2300      	movs	r3, #0
 8006394:	60bb      	str	r3, [r7, #8]
 8006396:	2300      	movs	r3, #0
 8006398:	607b      	str	r3, [r7, #4]
 800639a:	2300      	movs	r3, #0
 800639c:	603b      	str	r3, [r7, #0]

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800639e:	4b35      	ldr	r3, [pc, #212]	; (8006474 <SystemCoreClockUpdate+0xec>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	220c      	movs	r2, #12
 80063a4:	4013      	ands	r3, r2
 80063a6:	60fb      	str	r3, [r7, #12]

  switch (tmp)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d007      	beq.n	80063be <SystemCoreClockUpdate+0x36>
 80063ae:	2b08      	cmp	r3, #8
 80063b0:	d009      	beq.n	80063c6 <SystemCoreClockUpdate+0x3e>
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d148      	bne.n	8006448 <SystemCoreClockUpdate+0xc0>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 80063b6:	4b30      	ldr	r3, [pc, #192]	; (8006478 <SystemCoreClockUpdate+0xf0>)
 80063b8:	4a30      	ldr	r2, [pc, #192]	; (800647c <SystemCoreClockUpdate+0xf4>)
 80063ba:	601a      	str	r2, [r3, #0]
      break;
 80063bc:	e048      	b.n	8006450 <SystemCoreClockUpdate+0xc8>
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 80063be:	4b2e      	ldr	r3, [pc, #184]	; (8006478 <SystemCoreClockUpdate+0xf0>)
 80063c0:	4a2e      	ldr	r2, [pc, #184]	; (800647c <SystemCoreClockUpdate+0xf4>)
 80063c2:	601a      	str	r2, [r3, #0]
      break;
 80063c4:	e044      	b.n	8006450 <SystemCoreClockUpdate+0xc8>
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMUL;
 80063c6:	4b2b      	ldr	r3, [pc, #172]	; (8006474 <SystemCoreClockUpdate+0xec>)
 80063c8:	685a      	ldr	r2, [r3, #4]
 80063ca:	23f0      	movs	r3, #240	; 0xf0
 80063cc:	039b      	lsls	r3, r3, #14
 80063ce:	4013      	ands	r3, r2
 80063d0:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80063d2:	4b28      	ldr	r3, [pc, #160]	; (8006474 <SystemCoreClockUpdate+0xec>)
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	23c0      	movs	r3, #192	; 0xc0
 80063d8:	025b      	lsls	r3, r3, #9
 80063da:	4013      	ands	r3, r2
 80063dc:	607b      	str	r3, [r7, #4]
      pllmull = ( pllmull >> 18) + 2;
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	0c9b      	lsrs	r3, r3, #18
 80063e2:	3302      	adds	r3, #2
 80063e4:	60bb      	str	r3, [r7, #8]
      predivfactor = (RCC->CFGR2 & RCC_CFGR2_PREDIV) + 1;
 80063e6:	4b23      	ldr	r3, [pc, #140]	; (8006474 <SystemCoreClockUpdate+0xec>)
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	220f      	movs	r2, #15
 80063ec:	4013      	ands	r3, r2
 80063ee:	3301      	adds	r3, #1
 80063f0:	603b      	str	r3, [r7, #0]

      if (pllsource == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	2380      	movs	r3, #128	; 0x80
 80063f6:	025b      	lsls	r3, r3, #9
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d10a      	bne.n	8006412 <SystemCoreClockUpdate+0x8a>
      {
        /* HSE used as PLL clock source : SystemCoreClock = HSE/PREDIV * PLLMUL */
        SystemCoreClock = (HSE_VALUE/predivfactor) * pllmull;
 80063fc:	6839      	ldr	r1, [r7, #0]
 80063fe:	481f      	ldr	r0, [pc, #124]	; (800647c <SystemCoreClockUpdate+0xf4>)
 8006400:	f7f9 fe92 	bl	8000128 <__udivsi3>
 8006404:	0003      	movs	r3, r0
 8006406:	001a      	movs	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	435a      	muls	r2, r3
 800640c:	4b1a      	ldr	r3, [pc, #104]	; (8006478 <SystemCoreClockUpdate+0xf0>)
 800640e:	601a      	str	r2, [r3, #0]
        SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
#endif /* STM32F042x6 || STM32F048xx || STM32F070x6 || 
          STM32F071xB || STM32F072xB || STM32F078xx || STM32F070xB ||
          STM32F091xC || STM32F098xx || STM32F030xC */
      }
      break;
 8006410:	e01e      	b.n	8006450 <SystemCoreClockUpdate+0xc8>
      else if (pllsource == RCC_CFGR_PLLSRC_HSI48_PREDIV)
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	23c0      	movs	r3, #192	; 0xc0
 8006416:	025b      	lsls	r3, r3, #9
 8006418:	429a      	cmp	r2, r3
 800641a:	d10a      	bne.n	8006432 <SystemCoreClockUpdate+0xaa>
        SystemCoreClock = (HSI48_VALUE/predivfactor) * pllmull;
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	4818      	ldr	r0, [pc, #96]	; (8006480 <SystemCoreClockUpdate+0xf8>)
 8006420:	f7f9 fe82 	bl	8000128 <__udivsi3>
 8006424:	0003      	movs	r3, r0
 8006426:	001a      	movs	r2, r3
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	435a      	muls	r2, r3
 800642c:	4b12      	ldr	r3, [pc, #72]	; (8006478 <SystemCoreClockUpdate+0xf0>)
 800642e:	601a      	str	r2, [r3, #0]
      break;
 8006430:	e00e      	b.n	8006450 <SystemCoreClockUpdate+0xc8>
        SystemCoreClock = (HSI_VALUE/predivfactor) * pllmull;
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	4811      	ldr	r0, [pc, #68]	; (800647c <SystemCoreClockUpdate+0xf4>)
 8006436:	f7f9 fe77 	bl	8000128 <__udivsi3>
 800643a:	0003      	movs	r3, r0
 800643c:	001a      	movs	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	435a      	muls	r2, r3
 8006442:	4b0d      	ldr	r3, [pc, #52]	; (8006478 <SystemCoreClockUpdate+0xf0>)
 8006444:	601a      	str	r2, [r3, #0]
      break;
 8006446:	e003      	b.n	8006450 <SystemCoreClockUpdate+0xc8>
    default: /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8006448:	4b0b      	ldr	r3, [pc, #44]	; (8006478 <SystemCoreClockUpdate+0xf0>)
 800644a:	4a0c      	ldr	r2, [pc, #48]	; (800647c <SystemCoreClockUpdate+0xf4>)
 800644c:	601a      	str	r2, [r3, #0]
      break;
 800644e:	46c0      	nop			; (mov r8, r8)
  }
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8006450:	4b08      	ldr	r3, [pc, #32]	; (8006474 <SystemCoreClockUpdate+0xec>)
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	091b      	lsrs	r3, r3, #4
 8006456:	220f      	movs	r2, #15
 8006458:	4013      	ands	r3, r2
 800645a:	4a0a      	ldr	r2, [pc, #40]	; (8006484 <SystemCoreClockUpdate+0xfc>)
 800645c:	5cd3      	ldrb	r3, [r2, r3]
 800645e:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8006460:	4b05      	ldr	r3, [pc, #20]	; (8006478 <SystemCoreClockUpdate+0xf0>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	40da      	lsrs	r2, r3
 8006468:	4b03      	ldr	r3, [pc, #12]	; (8006478 <SystemCoreClockUpdate+0xf0>)
 800646a:	601a      	str	r2, [r3, #0]
}
 800646c:	46c0      	nop			; (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	b004      	add	sp, #16
 8006472:	bd80      	pop	{r7, pc}
 8006474:	40021000 	.word	0x40021000
 8006478:	2000000c 	.word	0x2000000c
 800647c:	007a1200 	.word	0x007a1200
 8006480:	02dc6c00 	.word	0x02dc6c00
 8006484:	08006a70 	.word	0x08006a70

08006488 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b086      	sub	sp, #24
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
	int div = 1;
 8006494:	2301      	movs	r3, #1
 8006496:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8006498:	e003      	b.n	80064a2 <ts_itoa+0x1a>
		div *= base;
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	4353      	muls	r3, r2
 80064a0:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	0019      	movs	r1, r3
 80064a6:	68b8      	ldr	r0, [r7, #8]
 80064a8:	f7f9 fe3e 	bl	8000128 <__udivsi3>
 80064ac:	0003      	movs	r3, r0
 80064ae:	001a      	movs	r2, r3
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d2f1      	bcs.n	800649a <ts_itoa+0x12>

	while (div != 0)
 80064b6:	e02c      	b.n	8006512 <ts_itoa+0x8a>
	{
		int num = d/div;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	0019      	movs	r1, r3
 80064bc:	68b8      	ldr	r0, [r7, #8]
 80064be:	f7f9 fe33 	bl	8000128 <__udivsi3>
 80064c2:	0003      	movs	r3, r0
 80064c4:	613b      	str	r3, [r7, #16]
		d = d%div;
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	0011      	movs	r1, r2
 80064cc:	0018      	movs	r0, r3
 80064ce:	f7f9 feb1 	bl	8000234 <__aeabi_uidivmod>
 80064d2:	000b      	movs	r3, r1
 80064d4:	60bb      	str	r3, [r7, #8]
		div /= base;
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	6978      	ldr	r0, [r7, #20]
 80064da:	f7f9 feaf 	bl	800023c <__divsi3>
 80064de:	0003      	movs	r3, r0
 80064e0:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	2b09      	cmp	r3, #9
 80064e6:	dd0a      	ble.n	80064fe <ts_itoa+0x76>
			*((*buf)++) = (num-10) + 'A';
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	1c59      	adds	r1, r3, #1
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	6011      	str	r1, [r2, #0]
 80064f2:	693a      	ldr	r2, [r7, #16]
 80064f4:	b2d2      	uxtb	r2, r2
 80064f6:	3237      	adds	r2, #55	; 0x37
 80064f8:	b2d2      	uxtb	r2, r2
 80064fa:	701a      	strb	r2, [r3, #0]
 80064fc:	e009      	b.n	8006512 <ts_itoa+0x8a>
		else
			*((*buf)++) = num + '0';
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	1c59      	adds	r1, r3, #1
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	6011      	str	r1, [r2, #0]
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	3230      	adds	r2, #48	; 0x30
 800650e:	b2d2      	uxtb	r2, r2
 8006510:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d1cf      	bne.n	80064b8 <ts_itoa+0x30>
	}
}
 8006518:	46c0      	nop			; (mov r8, r8)
 800651a:	46bd      	mov	sp, r7
 800651c:	b006      	add	sp, #24
 800651e:	bd80      	pop	{r7, pc}

08006520 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b088      	sub	sp, #32
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8006530:	e07c      	b.n	800662c <ts_formatstring+0x10c>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	2b25      	cmp	r3, #37	; 0x25
 8006538:	d000      	beq.n	800653c <ts_formatstring+0x1c>
 800653a:	e06f      	b.n	800661c <ts_formatstring+0xfc>
		{
			switch (*(++fmt))
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	3301      	adds	r3, #1
 8006540:	60bb      	str	r3, [r7, #8]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b64      	cmp	r3, #100	; 0x64
 8006548:	d01c      	beq.n	8006584 <ts_formatstring+0x64>
 800654a:	dc06      	bgt.n	800655a <ts_formatstring+0x3a>
 800654c:	2b58      	cmp	r3, #88	; 0x58
 800654e:	d04f      	beq.n	80065f0 <ts_formatstring+0xd0>
 8006550:	2b63      	cmp	r3, #99	; 0x63
 8006552:	d00d      	beq.n	8006570 <ts_formatstring+0x50>
 8006554:	2b25      	cmp	r3, #37	; 0x25
 8006556:	d057      	beq.n	8006608 <ts_formatstring+0xe8>
 8006558:	e05c      	b.n	8006614 <ts_formatstring+0xf4>
 800655a:	2b73      	cmp	r3, #115	; 0x73
 800655c:	d02a      	beq.n	80065b4 <ts_formatstring+0x94>
 800655e:	dc02      	bgt.n	8006566 <ts_formatstring+0x46>
 8006560:	2b69      	cmp	r3, #105	; 0x69
 8006562:	d00f      	beq.n	8006584 <ts_formatstring+0x64>
 8006564:	e056      	b.n	8006614 <ts_formatstring+0xf4>
 8006566:	2b75      	cmp	r3, #117	; 0x75
 8006568:	d037      	beq.n	80065da <ts_formatstring+0xba>
 800656a:	2b78      	cmp	r3, #120	; 0x78
 800656c:	d040      	beq.n	80065f0 <ts_formatstring+0xd0>
 800656e:	e051      	b.n	8006614 <ts_formatstring+0xf4>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	1c53      	adds	r3, r2, #1
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	1d19      	adds	r1, r3, #4
 800657a:	6079      	str	r1, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	7013      	strb	r3, [r2, #0]
				break;
 8006582:	e047      	b.n	8006614 <ts_formatstring+0xf4>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	1d1a      	adds	r2, r3, #4
 8006588:	607a      	str	r2, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	2b00      	cmp	r3, #0
 8006592:	da07      	bge.n	80065a4 <ts_formatstring+0x84>
					{
						val *= -1;
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	425b      	negs	r3, r3
 8006598:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	1c5a      	adds	r2, r3, #1
 800659e:	60fa      	str	r2, [r7, #12]
 80065a0:	222d      	movs	r2, #45	; 0x2d
 80065a2:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80065a4:	69f9      	ldr	r1, [r7, #28]
 80065a6:	230c      	movs	r3, #12
 80065a8:	18fb      	adds	r3, r7, r3
 80065aa:	220a      	movs	r2, #10
 80065ac:	0018      	movs	r0, r3
 80065ae:	f7ff ff6b 	bl	8006488 <ts_itoa>
				}
				break;
 80065b2:	e02f      	b.n	8006614 <ts_formatstring+0xf4>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	1d1a      	adds	r2, r3, #4
 80065b8:	607a      	str	r2, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80065be:	e007      	b.n	80065d0 <ts_formatstring+0xb0>
					{
						*buf++ = *arg++;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	1c5a      	adds	r2, r3, #1
 80065c4:	60fa      	str	r2, [r7, #12]
 80065c6:	69ba      	ldr	r2, [r7, #24]
 80065c8:	1c51      	adds	r1, r2, #1
 80065ca:	61b9      	str	r1, [r7, #24]
 80065cc:	7812      	ldrb	r2, [r2, #0]
 80065ce:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d1f3      	bne.n	80065c0 <ts_formatstring+0xa0>
					}
				}
				break;
 80065d8:	e01c      	b.n	8006614 <ts_formatstring+0xf4>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	1d1a      	adds	r2, r3, #4
 80065de:	607a      	str	r2, [r7, #4]
 80065e0:	6819      	ldr	r1, [r3, #0]
 80065e2:	230c      	movs	r3, #12
 80065e4:	18fb      	adds	r3, r7, r3
 80065e6:	220a      	movs	r2, #10
 80065e8:	0018      	movs	r0, r3
 80065ea:	f7ff ff4d 	bl	8006488 <ts_itoa>
				break;
 80065ee:	e011      	b.n	8006614 <ts_formatstring+0xf4>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	1d1a      	adds	r2, r3, #4
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	0019      	movs	r1, r3
 80065fa:	230c      	movs	r3, #12
 80065fc:	18fb      	adds	r3, r7, r3
 80065fe:	2210      	movs	r2, #16
 8006600:	0018      	movs	r0, r3
 8006602:	f7ff ff41 	bl	8006488 <ts_itoa>
				break;
 8006606:	e005      	b.n	8006614 <ts_formatstring+0xf4>
			  case '%':
				  *buf++ = '%';
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	60fa      	str	r2, [r7, #12]
 800660e:	2225      	movs	r2, #37	; 0x25
 8006610:	701a      	strb	r2, [r3, #0]
				  break;
 8006612:	46c0      	nop			; (mov r8, r8)
			}
			fmt++;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	3301      	adds	r3, #1
 8006618:	60bb      	str	r3, [r7, #8]
 800661a:	e007      	b.n	800662c <ts_formatstring+0x10c>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	1c5a      	adds	r2, r3, #1
 8006620:	60fa      	str	r2, [r7, #12]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	1c51      	adds	r1, r2, #1
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	7812      	ldrb	r2, [r2, #0]
 800662a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d000      	beq.n	8006636 <ts_formatstring+0x116>
 8006634:	e77d      	b.n	8006532 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	001a      	movs	r2, r3
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	1ad3      	subs	r3, r2, r3
}
 8006644:	0018      	movs	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	b008      	add	sp, #32
 800664a:	bd80      	pop	{r7, pc}

0800664c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b084      	sub	sp, #16
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
	int length = 0;
 8006656:	2300      	movs	r3, #0
 8006658:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800665a:	e040      	b.n	80066de <ts_formatlength+0x92>
	{
		if (*fmt == '%')
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b25      	cmp	r3, #37	; 0x25
 8006662:	d136      	bne.n	80066d2 <ts_formatlength+0x86>
		{
			++fmt;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3301      	adds	r3, #1
 8006668:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	3b58      	subs	r3, #88	; 0x58
 8006670:	2b20      	cmp	r3, #32
 8006672:	d829      	bhi.n	80066c8 <ts_formatlength+0x7c>
 8006674:	009a      	lsls	r2, r3, #2
 8006676:	4b1e      	ldr	r3, [pc, #120]	; (80066f0 <ts_formatlength+0xa4>)
 8006678:	18d3      	adds	r3, r2, r3
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	469f      	mov	pc, r3
			{
			  case 'c':
		  		  va_arg(va, int);
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	3304      	adds	r3, #4
 8006682:	603b      	str	r3, [r7, #0]
				  ++length;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3301      	adds	r3, #1
 8006688:	60fb      	str	r3, [r7, #12]
				  break;
 800668a:	e025      	b.n	80066d8 <ts_formatlength+0x8c>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	330b      	adds	r3, #11
 8006690:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	3304      	adds	r3, #4
 8006696:	603b      	str	r3, [r7, #0]
				  break;
 8006698:	e01e      	b.n	80066d8 <ts_formatlength+0x8c>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	1d1a      	adds	r2, r3, #4
 800669e:	603a      	str	r2, [r7, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 80066a4:	e002      	b.n	80066ac <ts_formatlength+0x60>
			  			  ++length;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3301      	adds	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	1c5a      	adds	r2, r3, #1
 80066b0:	60ba      	str	r2, [r7, #8]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d1f6      	bne.n	80066a6 <ts_formatlength+0x5a>
			  	  }
				  break;
 80066b8:	e00e      	b.n	80066d8 <ts_formatlength+0x8c>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	3308      	adds	r3, #8
 80066be:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	3304      	adds	r3, #4
 80066c4:	603b      	str	r3, [r7, #0]
				  break;
 80066c6:	e007      	b.n	80066d8 <ts_formatlength+0x8c>
			  default:
				  ++length;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3301      	adds	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]
				  break;
 80066ce:	46c0      	nop			; (mov r8, r8)
 80066d0:	e002      	b.n	80066d8 <ts_formatlength+0x8c>
			}
		}
		else
		{
			++length;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	3301      	adds	r3, #1
 80066d6:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	3301      	adds	r3, #1
 80066dc:	607b      	str	r3, [r7, #4]
	while (*fmt)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1ba      	bne.n	800665c <ts_formatlength+0x10>
	}
	return length;
 80066e6:	68fb      	ldr	r3, [r7, #12]
}
 80066e8:	0018      	movs	r0, r3
 80066ea:	46bd      	mov	sp, r7
 80066ec:	b004      	add	sp, #16
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	08006a88 	.word	0x08006a88

080066f4 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 80066f4:	b40e      	push	{r1, r2, r3}
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b085      	sub	sp, #20
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 80066fe:	2320      	movs	r3, #32
 8006700:	18fb      	adds	r3, r7, r3
 8006702:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8006704:	68ba      	ldr	r2, [r7, #8]
 8006706:	69f9      	ldr	r1, [r7, #28]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	0018      	movs	r0, r3
 800670c:	f7ff ff08 	bl	8006520 <ts_formatstring>
 8006710:	0003      	movs	r3, r0
 8006712:	60fb      	str	r3, [r7, #12]
	va_end(va);
	return length;
 8006714:	68fb      	ldr	r3, [r7, #12]
}
 8006716:	0018      	movs	r0, r3
 8006718:	46bd      	mov	sp, r7
 800671a:	b005      	add	sp, #20
 800671c:	bc80      	pop	{r7}
 800671e:	bc08      	pop	{r3}
 8006720:	b003      	add	sp, #12
 8006722:	4718      	bx	r3

08006724 <fiprintf>:
**            given file stream according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int fiprintf(FILE * stream, const char *fmt, ...)
{
 8006724:	b40e      	push	{r1, r2, r3}
 8006726:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006728:	b08c      	sub	sp, #48	; 0x30
 800672a:	af00      	add	r7, sp, #0
 800672c:	61f8      	str	r0, [r7, #28]
	int length = 0;
 800672e:	2300      	movs	r3, #0
 8006730:	62fb      	str	r3, [r7, #44]	; 0x2c
	va_list va;
	va_start(va, fmt);
 8006732:	2330      	movs	r3, #48	; 0x30
 8006734:	2218      	movs	r2, #24
 8006736:	4694      	mov	ip, r2
 8006738:	44bc      	add	ip, r7
 800673a:	4463      	add	r3, ip
 800673c:	623b      	str	r3, [r7, #32]
	length = ts_formatlength(fmt, va);
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006742:	0011      	movs	r1, r2
 8006744:	0018      	movs	r0, r3
 8006746:	f7ff ff81 	bl	800664c <ts_formatlength>
 800674a:	0003      	movs	r3, r0
 800674c:	62fb      	str	r3, [r7, #44]	; 0x2c
	va_end(va);
	{
 800674e:	466b      	mov	r3, sp
 8006750:	61bb      	str	r3, [r7, #24]
		char buf[length];
 8006752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006754:	1e5a      	subs	r2, r3, #1
 8006756:	62ba      	str	r2, [r7, #40]	; 0x28
 8006758:	001a      	movs	r2, r3
 800675a:	60ba      	str	r2, [r7, #8]
 800675c:	2200      	movs	r2, #0
 800675e:	60fa      	str	r2, [r7, #12]
 8006760:	68b8      	ldr	r0, [r7, #8]
 8006762:	68f9      	ldr	r1, [r7, #12]
 8006764:	0002      	movs	r2, r0
 8006766:	0f52      	lsrs	r2, r2, #29
 8006768:	000e      	movs	r6, r1
 800676a:	00f6      	lsls	r6, r6, #3
 800676c:	617e      	str	r6, [r7, #20]
 800676e:	697e      	ldr	r6, [r7, #20]
 8006770:	4316      	orrs	r6, r2
 8006772:	617e      	str	r6, [r7, #20]
 8006774:	0002      	movs	r2, r0
 8006776:	00d2      	lsls	r2, r2, #3
 8006778:	613a      	str	r2, [r7, #16]
 800677a:	001a      	movs	r2, r3
 800677c:	603a      	str	r2, [r7, #0]
 800677e:	2200      	movs	r2, #0
 8006780:	607a      	str	r2, [r7, #4]
 8006782:	6838      	ldr	r0, [r7, #0]
 8006784:	6879      	ldr	r1, [r7, #4]
 8006786:	0002      	movs	r2, r0
 8006788:	0f52      	lsrs	r2, r2, #29
 800678a:	000e      	movs	r6, r1
 800678c:	00f5      	lsls	r5, r6, #3
 800678e:	4315      	orrs	r5, r2
 8006790:	0002      	movs	r2, r0
 8006792:	00d4      	lsls	r4, r2, #3
 8006794:	3307      	adds	r3, #7
 8006796:	08db      	lsrs	r3, r3, #3
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	466a      	mov	r2, sp
 800679c:	1ad3      	subs	r3, r2, r3
 800679e:	469d      	mov	sp, r3
 80067a0:	466b      	mov	r3, sp
 80067a2:	3300      	adds	r3, #0
 80067a4:	627b      	str	r3, [r7, #36]	; 0x24
		va_start(va, fmt);
 80067a6:	2330      	movs	r3, #48	; 0x30
 80067a8:	2218      	movs	r2, #24
 80067aa:	4694      	mov	ip, r2
 80067ac:	44bc      	add	ip, r7
 80067ae:	4463      	add	r3, ip
 80067b0:	623b      	str	r3, [r7, #32]
		length = ts_formatstring(buf, fmt, va);
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	6a3a      	ldr	r2, [r7, #32]
 80067b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067b8:	0018      	movs	r0, r3
 80067ba:	f7ff feb1 	bl	8006520 <ts_formatstring>
 80067be:	0003      	movs	r3, r0
 80067c0:	62fb      	str	r3, [r7, #44]	; 0x2c
		length = _write(stream->_file, buf, length);
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	220e      	movs	r2, #14
 80067c6:	5e9b      	ldrsh	r3, [r3, r2]
 80067c8:	0018      	movs	r0, r3
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067ce:	0019      	movs	r1, r3
 80067d0:	f000 f916 	bl	8006a00 <_write>
 80067d4:	0003      	movs	r3, r0
 80067d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	469d      	mov	sp, r3
		va_end(va);
	}
	return length;
 80067dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80067de:	0018      	movs	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	b00c      	add	sp, #48	; 0x30
 80067e4:	bcf0      	pop	{r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	b003      	add	sp, #12
 80067ea:	4718      	bx	r3

080067ec <iprintf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int iprintf(const char *fmt, ...)
{
 80067ec:	b40f      	push	{r0, r1, r2, r3}
 80067ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f0:	b08d      	sub	sp, #52	; 0x34
 80067f2:	af00      	add	r7, sp, #0
	int length = 0;
 80067f4:	2300      	movs	r3, #0
 80067f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	va_list va;
	va_start(va, fmt);
 80067f8:	232c      	movs	r3, #44	; 0x2c
 80067fa:	2220      	movs	r2, #32
 80067fc:	4694      	mov	ip, r2
 80067fe:	44bc      	add	ip, r7
 8006800:	4463      	add	r3, ip
 8006802:	623b      	str	r3, [r7, #32]
	length = ts_formatlength(fmt, va);
 8006804:	6a3a      	ldr	r2, [r7, #32]
 8006806:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006808:	0011      	movs	r1, r2
 800680a:	0018      	movs	r0, r3
 800680c:	f7ff ff1e 	bl	800664c <ts_formatlength>
 8006810:	0003      	movs	r3, r0
 8006812:	62fb      	str	r3, [r7, #44]	; 0x2c
	va_end(va);
	{
 8006814:	466b      	mov	r3, sp
 8006816:	607b      	str	r3, [r7, #4]
		char buf[length];
 8006818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681a:	1e5a      	subs	r2, r3, #1
 800681c:	62ba      	str	r2, [r7, #40]	; 0x28
 800681e:	001a      	movs	r2, r3
 8006820:	613a      	str	r2, [r7, #16]
 8006822:	2200      	movs	r2, #0
 8006824:	617a      	str	r2, [r7, #20]
 8006826:	6938      	ldr	r0, [r7, #16]
 8006828:	6979      	ldr	r1, [r7, #20]
 800682a:	0002      	movs	r2, r0
 800682c:	0f52      	lsrs	r2, r2, #29
 800682e:	000e      	movs	r6, r1
 8006830:	00f6      	lsls	r6, r6, #3
 8006832:	61fe      	str	r6, [r7, #28]
 8006834:	69fe      	ldr	r6, [r7, #28]
 8006836:	4316      	orrs	r6, r2
 8006838:	61fe      	str	r6, [r7, #28]
 800683a:	0002      	movs	r2, r0
 800683c:	00d2      	lsls	r2, r2, #3
 800683e:	61ba      	str	r2, [r7, #24]
 8006840:	001a      	movs	r2, r3
 8006842:	60ba      	str	r2, [r7, #8]
 8006844:	2200      	movs	r2, #0
 8006846:	60fa      	str	r2, [r7, #12]
 8006848:	68b8      	ldr	r0, [r7, #8]
 800684a:	68f9      	ldr	r1, [r7, #12]
 800684c:	0002      	movs	r2, r0
 800684e:	0f52      	lsrs	r2, r2, #29
 8006850:	000e      	movs	r6, r1
 8006852:	00f5      	lsls	r5, r6, #3
 8006854:	4315      	orrs	r5, r2
 8006856:	0002      	movs	r2, r0
 8006858:	00d4      	lsls	r4, r2, #3
 800685a:	3307      	adds	r3, #7
 800685c:	08db      	lsrs	r3, r3, #3
 800685e:	00db      	lsls	r3, r3, #3
 8006860:	466a      	mov	r2, sp
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	469d      	mov	sp, r3
 8006866:	466b      	mov	r3, sp
 8006868:	3300      	adds	r3, #0
 800686a:	627b      	str	r3, [r7, #36]	; 0x24
		va_start(va, fmt);
 800686c:	232c      	movs	r3, #44	; 0x2c
 800686e:	2220      	movs	r2, #32
 8006870:	4694      	mov	ip, r2
 8006872:	44bc      	add	ip, r7
 8006874:	4463      	add	r3, ip
 8006876:	623b      	str	r3, [r7, #32]
		length = ts_formatstring(buf, fmt, va);
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	6a3a      	ldr	r2, [r7, #32]
 800687c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800687e:	0018      	movs	r0, r3
 8006880:	f7ff fe4e 	bl	8006520 <ts_formatstring>
 8006884:	0003      	movs	r3, r0
 8006886:	62fb      	str	r3, [r7, #44]	; 0x2c
		length = _write(1, buf, length);
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800688c:	0019      	movs	r1, r3
 800688e:	2001      	movs	r0, #1
 8006890:	f000 f8b6 	bl	8006a00 <_write>
 8006894:	0003      	movs	r3, r0
 8006896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	469d      	mov	sp, r3
		va_end(va);
	}
	return length;
 800689c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800689e:	0018      	movs	r0, r3
 80068a0:	46bd      	mov	sp, r7
 80068a2:	b00d      	add	sp, #52	; 0x34
 80068a4:	bcf0      	pop	{r4, r5, r6, r7}
 80068a6:	bc08      	pop	{r3}
 80068a8:	b004      	add	sp, #16
 80068aa:	4718      	bx	r3

080068ac <fputs>:
**  Returns:  If successful, the result is 0; otherwise, the result is EOF.
**
**===========================================================================
*/
int fputs(const char *s, FILE *fp)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
	int length = strlen(s);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	0018      	movs	r0, r3
 80068ba:	f7f9 fc2d 	bl	8000118 <strlen>
 80068be:	0003      	movs	r3, r0
 80068c0:	613b      	str	r3, [r7, #16]
	int wlen = 0;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60fb      	str	r3, [r7, #12]
	int res;

	wlen = _write((fp->_file), (char*)s, length);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	220e      	movs	r2, #14
 80068ca:	5e9b      	ldrsh	r3, [r3, r2]
 80068cc:	0018      	movs	r0, r3
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	0019      	movs	r1, r3
 80068d4:	f000 f894 	bl	8006a00 <_write>
 80068d8:	0003      	movs	r3, r0
 80068da:	60fb      	str	r3, [r7, #12]
	wlen += _write((fp->_file), "\n", 1);
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	220e      	movs	r2, #14
 80068e0:	5e9b      	ldrsh	r3, [r3, r2]
 80068e2:	0018      	movs	r0, r3
 80068e4:	4b0c      	ldr	r3, [pc, #48]	; (8006918 <fputs+0x6c>)
 80068e6:	2201      	movs	r2, #1
 80068e8:	0019      	movs	r1, r3
 80068ea:	f000 f889 	bl	8006a00 <_write>
 80068ee:	0002      	movs	r2, r0
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	189b      	adds	r3, r3, r2
 80068f4:	60fb      	str	r3, [r7, #12]

	if (wlen == (length+1))
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	1c5a      	adds	r2, r3, #1
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d102      	bne.n	8006906 <fputs+0x5a>
	{
		res = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	617b      	str	r3, [r7, #20]
 8006904:	e002      	b.n	800690c <fputs+0x60>
	}
	else
	{
		res = EOF;
 8006906:	2301      	movs	r3, #1
 8006908:	425b      	negs	r3, r3
 800690a:	617b      	str	r3, [r7, #20]
	}

	return res;
 800690c:	697b      	ldr	r3, [r7, #20]
}
 800690e:	0018      	movs	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	b006      	add	sp, #24
 8006914:	bd80      	pop	{r7, pc}
 8006916:	46c0      	nop			; (mov r8, r8)
 8006918:	08006a4c 	.word	0x08006a4c

0800691c <puts>:
**  the result is EOF.
**
**===========================================================================
*/
int puts(const char *s)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b086      	sub	sp, #24
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
	int length = strlen(s);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	0018      	movs	r0, r3
 8006928:	f7f9 fbf6 	bl	8000118 <strlen>
 800692c:	0003      	movs	r3, r0
 800692e:	613b      	str	r3, [r7, #16]
	int numbytes = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	60fb      	str	r3, [r7, #12]
	int res;

	numbytes = _write(1, (char*)s, length);
 8006934:	693a      	ldr	r2, [r7, #16]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	0019      	movs	r1, r3
 800693a:	2001      	movs	r0, #1
 800693c:	f000 f860 	bl	8006a00 <_write>
 8006940:	0003      	movs	r3, r0
 8006942:	60fb      	str	r3, [r7, #12]
	numbytes += _write(1, "\n", 1);
 8006944:	4b0c      	ldr	r3, [pc, #48]	; (8006978 <puts+0x5c>)
 8006946:	2201      	movs	r2, #1
 8006948:	0019      	movs	r1, r3
 800694a:	2001      	movs	r0, #1
 800694c:	f000 f858 	bl	8006a00 <_write>
 8006950:	0002      	movs	r2, r0
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	189b      	adds	r3, r3, r2
 8006956:	60fb      	str	r3, [r7, #12]

	if (numbytes == (length+1))
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	1c5a      	adds	r2, r3, #1
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	429a      	cmp	r2, r3
 8006960:	d102      	bne.n	8006968 <puts+0x4c>
	{
		res = 0;
 8006962:	2300      	movs	r3, #0
 8006964:	617b      	str	r3, [r7, #20]
 8006966:	e002      	b.n	800696e <puts+0x52>
	}
	else
	{
		res = EOF;
 8006968:	2301      	movs	r3, #1
 800696a:	425b      	negs	r3, r3
 800696c:	617b      	str	r3, [r7, #20]
	}

	return res;
 800696e:	697b      	ldr	r3, [r7, #20]
}
 8006970:	0018      	movs	r0, r3
 8006972:	46bd      	mov	sp, r7
 8006974:	b006      	add	sp, #24
 8006976:	bd80      	pop	{r7, pc}
 8006978:	08006a4c 	.word	0x08006a4c

0800697c <fwrite>:
**  Returns:  Number of elements written
**
**===========================================================================
*/
size_t fwrite(const void * buf, size_t size, size_t count, FILE * fp)
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b084      	sub	sp, #16
 8006980:	af00      	add	r7, sp, #0
 8006982:	60f8      	str	r0, [r7, #12]
 8006984:	60b9      	str	r1, [r7, #8]
 8006986:	607a      	str	r2, [r7, #4]
 8006988:	603b      	str	r3, [r7, #0]
	return (_write((fp->_file), (char*)buf, size * count) / size);
 800698a:	683b      	ldr	r3, [r7, #0]
 800698c:	220e      	movs	r2, #14
 800698e:	5e9b      	ldrsh	r3, [r3, r2]
 8006990:	0018      	movs	r0, r3
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	687a      	ldr	r2, [r7, #4]
 8006996:	4353      	muls	r3, r2
 8006998:	001a      	movs	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	0019      	movs	r1, r3
 800699e:	f000 f82f 	bl	8006a00 <_write>
 80069a2:	0003      	movs	r3, r0
 80069a4:	68b9      	ldr	r1, [r7, #8]
 80069a6:	0018      	movs	r0, r3
 80069a8:	f7f9 fbbe 	bl	8000128 <__udivsi3>
 80069ac:	0003      	movs	r3, r0
}
 80069ae:	0018      	movs	r0, r3
 80069b0:	46bd      	mov	sp, r7
 80069b2:	b004      	add	sp, #16
 80069b4:	bd80      	pop	{r7, pc}
	...

080069b8 <__libc_init_array>:
 80069b8:	b570      	push	{r4, r5, r6, lr}
 80069ba:	2600      	movs	r6, #0
 80069bc:	4d0c      	ldr	r5, [pc, #48]	; (80069f0 <__libc_init_array+0x38>)
 80069be:	4c0d      	ldr	r4, [pc, #52]	; (80069f4 <__libc_init_array+0x3c>)
 80069c0:	1b64      	subs	r4, r4, r5
 80069c2:	10a4      	asrs	r4, r4, #2
 80069c4:	42a6      	cmp	r6, r4
 80069c6:	d109      	bne.n	80069dc <__libc_init_array+0x24>
 80069c8:	2600      	movs	r6, #0
 80069ca:	f000 f823 	bl	8006a14 <_init>
 80069ce:	4d0a      	ldr	r5, [pc, #40]	; (80069f8 <__libc_init_array+0x40>)
 80069d0:	4c0a      	ldr	r4, [pc, #40]	; (80069fc <__libc_init_array+0x44>)
 80069d2:	1b64      	subs	r4, r4, r5
 80069d4:	10a4      	asrs	r4, r4, #2
 80069d6:	42a6      	cmp	r6, r4
 80069d8:	d105      	bne.n	80069e6 <__libc_init_array+0x2e>
 80069da:	bd70      	pop	{r4, r5, r6, pc}
 80069dc:	00b3      	lsls	r3, r6, #2
 80069de:	58eb      	ldr	r3, [r5, r3]
 80069e0:	4798      	blx	r3
 80069e2:	3601      	adds	r6, #1
 80069e4:	e7ee      	b.n	80069c4 <__libc_init_array+0xc>
 80069e6:	00b3      	lsls	r3, r6, #2
 80069e8:	58eb      	ldr	r3, [r5, r3]
 80069ea:	4798      	blx	r3
 80069ec:	3601      	adds	r6, #1
 80069ee:	e7f2      	b.n	80069d6 <__libc_init_array+0x1e>
 80069f0:	08006b0c 	.word	0x08006b0c
 80069f4:	08006b0c 	.word	0x08006b0c
 80069f8:	08006b0c 	.word	0x08006b0c
 80069fc:	08006b10 	.word	0x08006b10

08006a00 <_write>:
 8006a00:	2258      	movs	r2, #88	; 0x58
 8006a02:	2001      	movs	r0, #1
 8006a04:	4b01      	ldr	r3, [pc, #4]	; (8006a0c <_write+0xc>)
 8006a06:	4240      	negs	r0, r0
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	4770      	bx	lr
 8006a0c:	20000150 	.word	0x20000150

08006a10 <__EH_FRAME_BEGIN__>:
 8006a10:	00000000                                ....

08006a14 <_init>:
 8006a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a16:	46c0      	nop			; (mov r8, r8)
 8006a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a1a:	bc08      	pop	{r3}
 8006a1c:	469e      	mov	lr, r3
 8006a1e:	4770      	bx	lr

08006a20 <_fini>:
 8006a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a22:	46c0      	nop			; (mov r8, r8)
 8006a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a26:	bc08      	pop	{r3}
 8006a28:	469e      	mov	lr, r3
 8006a2a:	4770      	bx	lr
