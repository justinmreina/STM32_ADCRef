
STM32_ADCRef.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028a0  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800295c  0800295c  0001295c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002994  08002994  00012994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002998  08002998  00012998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  0800299c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000e0  20000004  080029a0  00020004  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000e4  080029a0  000200e4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000af48  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001863  00000000  00000000  0002af74  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000006b0  00000000  00000000  0002c7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005f8  00000000  00000000  0002ce88  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000368a  00000000  00000000  0002d480  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000023ed  00000000  00000000  00030b0a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00032ef7  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000167c  00000000  00000000  00032f74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000004 	.word	0x20000004
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08002944 	.word	0x08002944

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000008 	.word	0x20000008
 8000100:	08002944 	.word	0x08002944

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000220:	4b07      	ldr	r3, [pc, #28]	; (8000240 <HAL_Init+0x24>)
 8000222:	4a07      	ldr	r2, [pc, #28]	; (8000240 <HAL_Init+0x24>)
 8000224:	6812      	ldr	r2, [r2, #0]
 8000226:	2110      	movs	r1, #16
 8000228:	430a      	orrs	r2, r1
 800022a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 800022c:	2000      	movs	r0, #0
 800022e:	f000 f809 	bl	8000244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000232:	f002 fa13 	bl	800265c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000236:	2300      	movs	r3, #0
}
 8000238:	0018      	movs	r0, r3
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	46c0      	nop			; (mov r8, r8)
 8000240:	40022000 	.word	0x40022000

08000244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 800024c:	f001 fb6c 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8000250:	0002      	movs	r2, r0
 8000252:	23fa      	movs	r3, #250	; 0xfa
 8000254:	0099      	lsls	r1, r3, #2
 8000256:	0010      	movs	r0, r2
 8000258:	f7ff ff54 	bl	8000104 <__udivsi3>
 800025c:	0003      	movs	r3, r0
 800025e:	0018      	movs	r0, r3
 8000260:	f000 fcd6 	bl	8000c10 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000264:	6879      	ldr	r1, [r7, #4]
 8000266:	2301      	movs	r3, #1
 8000268:	425b      	negs	r3, r3
 800026a:	2200      	movs	r2, #0
 800026c:	0018      	movs	r0, r3
 800026e:	f000 fcb9 	bl	8000be4 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000272:	2300      	movs	r3, #0
}
 8000274:	0018      	movs	r0, r3
 8000276:	46bd      	mov	sp, r7
 8000278:	b002      	add	sp, #8
 800027a:	bd80      	pop	{r7, pc}

0800027c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	af00      	add	r7, sp, #0
  uwTick++;
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_IncTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	1c5a      	adds	r2, r3, #1
 8000286:	4b02      	ldr	r3, [pc, #8]	; (8000290 <HAL_IncTick+0x14>)
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	46c0      	nop			; (mov r8, r8)
 800028c:	46bd      	mov	sp, r7
 800028e:	bd80      	pop	{r7, pc}
 8000290:	20000020 	.word	0x20000020

08000294 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  return uwTick;
 8000298:	4b02      	ldr	r3, [pc, #8]	; (80002a4 <HAL_GetTick+0x10>)
 800029a:	681b      	ldr	r3, [r3, #0]
}
 800029c:	0018      	movs	r0, r3
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	46c0      	nop			; (mov r8, r8)
 80002a4:	20000020 	.word	0x20000020

080002a8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80002a8:	b580      	push	{r7, lr}
 80002aa:	b084      	sub	sp, #16
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80002b0:	230f      	movs	r3, #15
 80002b2:	18fb      	adds	r3, r7, r3
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d101      	bne.n	80002c6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80002c2:	2301      	movs	r3, #1
 80002c4:	e124      	b.n	8000510 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d10a      	bne.n	80002e4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2200      	movs	r2, #0
 80002d2:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2240      	movs	r2, #64	; 0x40
 80002d8:	2100      	movs	r1, #0
 80002da:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	0018      	movs	r0, r3
 80002e0:	f002 f9e0 	bl	80026a4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002e8:	2210      	movs	r2, #16
 80002ea:	4013      	ands	r3, r2
 80002ec:	d000      	beq.n	80002f0 <HAL_ADC_Init+0x48>
 80002ee:	e102      	b.n	80004f6 <HAL_ADC_Init+0x24e>
 80002f0:	230f      	movs	r3, #15
 80002f2:	18fb      	adds	r3, r7, r3
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d000      	beq.n	80002fc <HAL_ADC_Init+0x54>
 80002fa:	e0fc      	b.n	80004f6 <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	2204      	movs	r2, #4
 8000304:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000306:	d000      	beq.n	800030a <HAL_ADC_Init+0x62>
 8000308:	e0f5      	b.n	80004f6 <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800030e:	4a82      	ldr	r2, [pc, #520]	; (8000518 <HAL_ADC_Init+0x270>)
 8000310:	4013      	ands	r3, r2
 8000312:	2202      	movs	r2, #2
 8000314:	431a      	orrs	r2, r3
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	689b      	ldr	r3, [r3, #8]
 8000320:	2203      	movs	r2, #3
 8000322:	4013      	ands	r3, r2
 8000324:	2b01      	cmp	r3, #1
 8000326:	d112      	bne.n	800034e <HAL_ADC_Init+0xa6>
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	2201      	movs	r2, #1
 8000330:	4013      	ands	r3, r2
 8000332:	2b01      	cmp	r3, #1
 8000334:	d009      	beq.n	800034a <HAL_ADC_Init+0xa2>
 8000336:	687b      	ldr	r3, [r7, #4]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	68da      	ldr	r2, [r3, #12]
 800033c:	2380      	movs	r3, #128	; 0x80
 800033e:	021b      	lsls	r3, r3, #8
 8000340:	401a      	ands	r2, r3
 8000342:	2380      	movs	r3, #128	; 0x80
 8000344:	021b      	lsls	r3, r3, #8
 8000346:	429a      	cmp	r2, r3
 8000348:	d101      	bne.n	800034e <HAL_ADC_Init+0xa6>
 800034a:	2301      	movs	r3, #1
 800034c:	e000      	b.n	8000350 <HAL_ADC_Init+0xa8>
 800034e:	2300      	movs	r3, #0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d116      	bne.n	8000382 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000354:	687b      	ldr	r3, [r7, #4]
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	687a      	ldr	r2, [r7, #4]
 800035a:	6812      	ldr	r2, [r2, #0]
 800035c:	68d2      	ldr	r2, [r2, #12]
 800035e:	2118      	movs	r1, #24
 8000360:	438a      	bics	r2, r1
 8000362:	0011      	movs	r1, r2
 8000364:	687a      	ldr	r2, [r7, #4]
 8000366:	6892      	ldr	r2, [r2, #8]
 8000368:	430a      	orrs	r2, r1
 800036a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	687a      	ldr	r2, [r7, #4]
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	6912      	ldr	r2, [r2, #16]
 8000376:	0092      	lsls	r2, r2, #2
 8000378:	0891      	lsrs	r1, r2, #2
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	6852      	ldr	r2, [r2, #4]
 800037e:	430a      	orrs	r2, r1
 8000380:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000382:	687b      	ldr	r3, [r7, #4]
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	6812      	ldr	r2, [r2, #0]
 800038a:	68d2      	ldr	r2, [r2, #12]
 800038c:	4963      	ldr	r1, [pc, #396]	; (800051c <HAL_ADC_Init+0x274>)
 800038e:	400a      	ands	r2, r1
 8000390:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	699b      	ldr	r3, [r3, #24]
 8000396:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	69db      	ldr	r3, [r3, #28]
 800039c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 800039e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 80003a6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003ac:	2b01      	cmp	r3, #1
 80003ae:	d002      	beq.n	80003b6 <HAL_ADC_Init+0x10e>
 80003b0:	2380      	movs	r3, #128	; 0x80
 80003b2:	015b      	lsls	r3, r3, #5
 80003b4:	e000      	b.n	80003b8 <HAL_ADC_Init+0x110>
 80003b6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 80003b8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 80003be:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	691b      	ldr	r3, [r3, #16]
 80003c4:	2b02      	cmp	r3, #2
 80003c6:	d101      	bne.n	80003cc <HAL_ADC_Init+0x124>
 80003c8:	2304      	movs	r3, #4
 80003ca:	e000      	b.n	80003ce <HAL_ADC_Init+0x126>
 80003cc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 80003ce:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 80003d6:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 80003d8:	68ba      	ldr	r2, [r7, #8]
 80003da:	4313      	orrs	r3, r2
 80003dc:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003e2:	2b01      	cmp	r3, #1
 80003e4:	d115      	bne.n	8000412 <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	6a1b      	ldr	r3, [r3, #32]
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d105      	bne.n	80003fa <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80003ee:	68bb      	ldr	r3, [r7, #8]
 80003f0:	2280      	movs	r2, #128	; 0x80
 80003f2:	0252      	lsls	r2, r2, #9
 80003f4:	4313      	orrs	r3, r2
 80003f6:	60bb      	str	r3, [r7, #8]
 80003f8:	e00b      	b.n	8000412 <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003fe:	2220      	movs	r2, #32
 8000400:	431a      	orrs	r2, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800040a:	2201      	movs	r2, #1
 800040c:	431a      	orrs	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000416:	23c2      	movs	r3, #194	; 0xc2
 8000418:	33ff      	adds	r3, #255	; 0xff
 800041a:	429a      	cmp	r2, r3
 800041c:	d007      	beq.n	800042e <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000426:	4313      	orrs	r3, r2
 8000428:	68ba      	ldr	r2, [r7, #8]
 800042a:	4313      	orrs	r3, r2
 800042c:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	687a      	ldr	r2, [r7, #4]
 8000434:	6812      	ldr	r2, [r2, #0]
 8000436:	68d1      	ldr	r1, [r2, #12]
 8000438:	68ba      	ldr	r2, [r7, #8]
 800043a:	430a      	orrs	r2, r1
 800043c:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000442:	2380      	movs	r3, #128	; 0x80
 8000444:	055b      	lsls	r3, r3, #21
 8000446:	429a      	cmp	r2, r3
 8000448:	d01b      	beq.n	8000482 <HAL_ADC_Init+0x1da>
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800044e:	2b01      	cmp	r3, #1
 8000450:	d017      	beq.n	8000482 <HAL_ADC_Init+0x1da>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000456:	2b02      	cmp	r3, #2
 8000458:	d013      	beq.n	8000482 <HAL_ADC_Init+0x1da>
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800045e:	2b03      	cmp	r3, #3
 8000460:	d00f      	beq.n	8000482 <HAL_ADC_Init+0x1da>
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000466:	2b04      	cmp	r3, #4
 8000468:	d00b      	beq.n	8000482 <HAL_ADC_Init+0x1da>
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800046e:	2b05      	cmp	r3, #5
 8000470:	d007      	beq.n	8000482 <HAL_ADC_Init+0x1da>
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000476:	2b06      	cmp	r3, #6
 8000478:	d003      	beq.n	8000482 <HAL_ADC_Init+0x1da>
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800047e:	2b07      	cmp	r3, #7
 8000480:	d112      	bne.n	80004a8 <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	687a      	ldr	r2, [r7, #4]
 8000488:	6812      	ldr	r2, [r2, #0]
 800048a:	6952      	ldr	r2, [r2, #20]
 800048c:	2107      	movs	r1, #7
 800048e:	438a      	bics	r2, r1
 8000490:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	681b      	ldr	r3, [r3, #0]
 8000496:	687a      	ldr	r2, [r7, #4]
 8000498:	6812      	ldr	r2, [r2, #0]
 800049a:	6951      	ldr	r1, [r2, #20]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80004a0:	2007      	movs	r0, #7
 80004a2:	4002      	ands	r2, r0
 80004a4:	430a      	orrs	r2, r1
 80004a6:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	68db      	ldr	r3, [r3, #12]
 80004ae:	4a1c      	ldr	r2, [pc, #112]	; (8000520 <HAL_ADC_Init+0x278>)
 80004b0:	401a      	ands	r2, r3
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d10b      	bne.n	80004d0 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	2200      	movs	r2, #0
 80004bc:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004c2:	2203      	movs	r2, #3
 80004c4:	4393      	bics	r3, r2
 80004c6:	2201      	movs	r2, #1
 80004c8:	431a      	orrs	r2, r3
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004ce:	e01c      	b.n	800050a <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d4:	2212      	movs	r2, #18
 80004d6:	4393      	bics	r3, r2
 80004d8:	2210      	movs	r2, #16
 80004da:	431a      	orrs	r2, r3
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80004e4:	2201      	movs	r2, #1
 80004e6:	431a      	orrs	r2, r3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 80004ec:	230f      	movs	r3, #15
 80004ee:	18fb      	adds	r3, r7, r3
 80004f0:	2201      	movs	r2, #1
 80004f2:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80004f4:	e009      	b.n	800050a <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004fa:	2210      	movs	r2, #16
 80004fc:	431a      	orrs	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8000502:	230f      	movs	r3, #15
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	2201      	movs	r2, #1
 8000508:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800050a:	230f      	movs	r3, #15
 800050c:	18fb      	adds	r3, r7, r3
 800050e:	781b      	ldrb	r3, [r3, #0]
}
 8000510:	0018      	movs	r0, r3
 8000512:	46bd      	mov	sp, r7
 8000514:	b004      	add	sp, #16
 8000516:	bd80      	pop	{r7, pc}
 8000518:	fffffefd 	.word	0xfffffefd
 800051c:	fffe0219 	.word	0xfffe0219
 8000520:	833fffe7 	.word	0x833fffe7

08000524 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000524:	b590      	push	{r4, r7, lr}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800052c:	230f      	movs	r3, #15
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	689b      	ldr	r3, [r3, #8]
 800053a:	2204      	movs	r2, #4
 800053c:	4013      	ands	r3, r2
 800053e:	d138      	bne.n	80005b2 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2240      	movs	r2, #64	; 0x40
 8000544:	5c9b      	ldrb	r3, [r3, r2]
 8000546:	2b01      	cmp	r3, #1
 8000548:	d101      	bne.n	800054e <HAL_ADC_Start+0x2a>
 800054a:	2302      	movs	r3, #2
 800054c:	e038      	b.n	80005c0 <HAL_ADC_Start+0x9c>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	2240      	movs	r2, #64	; 0x40
 8000552:	2101      	movs	r1, #1
 8000554:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	69db      	ldr	r3, [r3, #28]
 800055a:	2b01      	cmp	r3, #1
 800055c:	d007      	beq.n	800056e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800055e:	230f      	movs	r3, #15
 8000560:	18fc      	adds	r4, r7, r3
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	0018      	movs	r0, r3
 8000566:	f000 f981 	bl	800086c <ADC_Enable>
 800056a:	0003      	movs	r3, r0
 800056c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800056e:	230f      	movs	r3, #15
 8000570:	18fb      	adds	r3, r7, r3
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d120      	bne.n	80005ba <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800057c:	4a12      	ldr	r2, [pc, #72]	; (80005c8 <HAL_ADC_Start+0xa4>)
 800057e:	4013      	ands	r3, r2
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	0052      	lsls	r2, r2, #1
 8000584:	431a      	orrs	r2, r3
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	2200      	movs	r2, #0
 800058e:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2240      	movs	r2, #64	; 0x40
 8000594:	2100      	movs	r1, #0
 8000596:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	221c      	movs	r2, #28
 800059e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	687a      	ldr	r2, [r7, #4]
 80005a6:	6812      	ldr	r2, [r2, #0]
 80005a8:	6892      	ldr	r2, [r2, #8]
 80005aa:	2104      	movs	r1, #4
 80005ac:	430a      	orrs	r2, r1
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	e003      	b.n	80005ba <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80005b2:	230f      	movs	r3, #15
 80005b4:	18fb      	adds	r3, r7, r3
 80005b6:	2202      	movs	r2, #2
 80005b8:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80005ba:	230f      	movs	r3, #15
 80005bc:	18fb      	adds	r3, r7, r3
 80005be:	781b      	ldrb	r3, [r3, #0]
}
 80005c0:	0018      	movs	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b005      	add	sp, #20
 80005c6:	bd90      	pop	{r4, r7, pc}
 80005c8:	fffff0fe 	.word	0xfffff0fe

080005cc <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005d4:	230f      	movs	r3, #15
 80005d6:	18fb      	adds	r3, r7, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2240      	movs	r2, #64	; 0x40
 80005e0:	5c9b      	ldrb	r3, [r3, r2]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d101      	bne.n	80005ea <HAL_ADC_Stop+0x1e>
 80005e6:	2302      	movs	r3, #2
 80005e8:	e02c      	b.n	8000644 <HAL_ADC_Stop+0x78>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	2240      	movs	r2, #64	; 0x40
 80005ee:	2101      	movs	r1, #1
 80005f0:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80005f2:	230f      	movs	r3, #15
 80005f4:	18fc      	adds	r4, r7, r3
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	0018      	movs	r0, r3
 80005fa:	f000 fa1c 	bl	8000a36 <ADC_ConversionStop>
 80005fe:	0003      	movs	r3, r0
 8000600:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8000602:	230f      	movs	r3, #15
 8000604:	18fb      	adds	r3, r7, r3
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d114      	bne.n	8000636 <HAL_ADC_Stop+0x6a>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800060c:	230f      	movs	r3, #15
 800060e:	18fc      	adds	r4, r7, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	0018      	movs	r0, r3
 8000614:	f000 f9a6 	bl	8000964 <ADC_Disable>
 8000618:	0003      	movs	r3, r0
 800061a:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800061c:	230f      	movs	r3, #15
 800061e:	18fb      	adds	r3, r7, r3
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d107      	bne.n	8000636 <HAL_ADC_Stop+0x6a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800062a:	4a08      	ldr	r2, [pc, #32]	; (800064c <HAL_ADC_Stop+0x80>)
 800062c:	4013      	ands	r3, r2
 800062e:	2201      	movs	r2, #1
 8000630:	431a      	orrs	r2, r3
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2240      	movs	r2, #64	; 0x40
 800063a:	2100      	movs	r1, #0
 800063c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800063e:	230f      	movs	r3, #15
 8000640:	18fb      	adds	r3, r7, r3
 8000642:	781b      	ldrb	r3, [r3, #0]
}
 8000644:	0018      	movs	r0, r3
 8000646:	46bd      	mov	sp, r7
 8000648:	b005      	add	sp, #20
 800064a:	bd90      	pop	{r4, r7, pc}
 800064c:	fffffefe 	.word	0xfffffefe

08000650 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800065a:	230f      	movs	r3, #15
 800065c:	18fb      	adds	r3, r7, r3
 800065e:	2200      	movs	r2, #0
 8000660:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	055b      	lsls	r3, r3, #21
 800066e:	429a      	cmp	r2, r3
 8000670:	d011      	beq.n	8000696 <HAL_ADC_ConfigChannel+0x46>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000676:	2b01      	cmp	r3, #1
 8000678:	d00d      	beq.n	8000696 <HAL_ADC_ConfigChannel+0x46>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800067e:	2b02      	cmp	r3, #2
 8000680:	d009      	beq.n	8000696 <HAL_ADC_ConfigChannel+0x46>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000686:	2b03      	cmp	r3, #3
 8000688:	d005      	beq.n	8000696 <HAL_ADC_ConfigChannel+0x46>
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800068e:	2b04      	cmp	r3, #4
 8000690:	d001      	beq.n	8000696 <HAL_ADC_ConfigChannel+0x46>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	2240      	movs	r2, #64	; 0x40
 800069a:	5c9b      	ldrb	r3, [r3, r2]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d101      	bne.n	80006a4 <HAL_ADC_ConfigChannel+0x54>
 80006a0:	2302      	movs	r3, #2
 80006a2:	e0d1      	b.n	8000848 <HAL_ADC_ConfigChannel+0x1f8>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	2240      	movs	r2, #64	; 0x40
 80006a8:	2101      	movs	r1, #1
 80006aa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	689b      	ldr	r3, [r3, #8]
 80006b2:	2204      	movs	r2, #4
 80006b4:	4013      	ands	r3, r2
 80006b6:	d000      	beq.n	80006ba <HAL_ADC_ConfigChannel+0x6a>
 80006b8:	e0b5      	b.n	8000826 <HAL_ADC_ConfigChannel+0x1d6>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	4a64      	ldr	r2, [pc, #400]	; (8000850 <HAL_ADC_ConfigChannel+0x200>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d100      	bne.n	80006c6 <HAL_ADC_ConfigChannel+0x76>
 80006c4:	e083      	b.n	80007ce <HAL_ADC_ConfigChannel+0x17e>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	6812      	ldr	r2, [r2, #0]
 80006ce:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80006d0:	683a      	ldr	r2, [r7, #0]
 80006d2:	6812      	ldr	r2, [r2, #0]
 80006d4:	2001      	movs	r0, #1
 80006d6:	4090      	lsls	r0, r2
 80006d8:	0002      	movs	r2, r0
 80006da:	430a      	orrs	r2, r1
 80006dc:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	055b      	lsls	r3, r3, #21
 80006e6:	429a      	cmp	r2, r3
 80006e8:	d037      	beq.n	800075a <HAL_ADC_ConfigChannel+0x10a>
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006ee:	2b01      	cmp	r3, #1
 80006f0:	d033      	beq.n	800075a <HAL_ADC_ConfigChannel+0x10a>
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f6:	2b02      	cmp	r3, #2
 80006f8:	d02f      	beq.n	800075a <HAL_ADC_ConfigChannel+0x10a>
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006fe:	2b03      	cmp	r3, #3
 8000700:	d02b      	beq.n	800075a <HAL_ADC_ConfigChannel+0x10a>
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000706:	2b04      	cmp	r3, #4
 8000708:	d027      	beq.n	800075a <HAL_ADC_ConfigChannel+0x10a>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800070e:	2b05      	cmp	r3, #5
 8000710:	d023      	beq.n	800075a <HAL_ADC_ConfigChannel+0x10a>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000716:	2b06      	cmp	r3, #6
 8000718:	d01f      	beq.n	800075a <HAL_ADC_ConfigChannel+0x10a>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800071e:	2b07      	cmp	r3, #7
 8000720:	d01b      	beq.n	800075a <HAL_ADC_ConfigChannel+0x10a>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	689a      	ldr	r2, [r3, #8]
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	2107      	movs	r1, #7
 800072e:	400b      	ands	r3, r1
 8000730:	429a      	cmp	r2, r3
 8000732:	d012      	beq.n	800075a <HAL_ADC_ConfigChannel+0x10a>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	6812      	ldr	r2, [r2, #0]
 800073c:	6952      	ldr	r2, [r2, #20]
 800073e:	2107      	movs	r1, #7
 8000740:	438a      	bics	r2, r1
 8000742:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	687a      	ldr	r2, [r7, #4]
 800074a:	6812      	ldr	r2, [r2, #0]
 800074c:	6951      	ldr	r1, [r2, #20]
 800074e:	683a      	ldr	r2, [r7, #0]
 8000750:	6892      	ldr	r2, [r2, #8]
 8000752:	2007      	movs	r0, #7
 8000754:	4002      	ands	r2, r0
 8000756:	430a      	orrs	r2, r1
 8000758:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	2b10      	cmp	r3, #16
 8000760:	d007      	beq.n	8000772 <HAL_ADC_ConfigChannel+0x122>
 8000762:	683b      	ldr	r3, [r7, #0]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	2b11      	cmp	r3, #17
 8000768:	d003      	beq.n	8000772 <HAL_ADC_ConfigChannel+0x122>
 800076a:	683b      	ldr	r3, [r7, #0]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	2b12      	cmp	r3, #18
 8000770:	d163      	bne.n	800083a <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000772:	4a38      	ldr	r2, [pc, #224]	; (8000854 <HAL_ADC_ConfigChannel+0x204>)
 8000774:	4b37      	ldr	r3, [pc, #220]	; (8000854 <HAL_ADC_ConfigChannel+0x204>)
 8000776:	6819      	ldr	r1, [r3, #0]
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b10      	cmp	r3, #16
 800077e:	d009      	beq.n	8000794 <HAL_ADC_ConfigChannel+0x144>
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	2b11      	cmp	r3, #17
 8000786:	d102      	bne.n	800078e <HAL_ADC_ConfigChannel+0x13e>
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	03db      	lsls	r3, r3, #15
 800078c:	e004      	b.n	8000798 <HAL_ADC_ConfigChannel+0x148>
 800078e:	2380      	movs	r3, #128	; 0x80
 8000790:	045b      	lsls	r3, r3, #17
 8000792:	e001      	b.n	8000798 <HAL_ADC_ConfigChannel+0x148>
 8000794:	2380      	movs	r3, #128	; 0x80
 8000796:	041b      	lsls	r3, r3, #16
 8000798:	430b      	orrs	r3, r1
 800079a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b10      	cmp	r3, #16
 80007a2:	d14a      	bne.n	800083a <HAL_ADC_ConfigChannel+0x1ea>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80007a4:	4b2c      	ldr	r3, [pc, #176]	; (8000858 <HAL_ADC_ConfigChannel+0x208>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	492c      	ldr	r1, [pc, #176]	; (800085c <HAL_ADC_ConfigChannel+0x20c>)
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff fcaa 	bl	8000104 <__udivsi3>
 80007b0:	0003      	movs	r3, r0
 80007b2:	001a      	movs	r2, r3
 80007b4:	0013      	movs	r3, r2
 80007b6:	009b      	lsls	r3, r3, #2
 80007b8:	189b      	adds	r3, r3, r2
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80007be:	e002      	b.n	80007c6 <HAL_ADC_ConfigChannel+0x176>
          {
            wait_loop_index--;
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80007c6:	68bb      	ldr	r3, [r7, #8]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d1f9      	bne.n	80007c0 <HAL_ADC_ConfigChannel+0x170>
 80007cc:	e035      	b.n	800083a <HAL_ADC_ConfigChannel+0x1ea>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	6812      	ldr	r2, [r2, #0]
 80007d6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80007d8:	683a      	ldr	r2, [r7, #0]
 80007da:	6812      	ldr	r2, [r2, #0]
 80007dc:	2001      	movs	r0, #1
 80007de:	4090      	lsls	r0, r2
 80007e0:	0002      	movs	r2, r0
 80007e2:	43d2      	mvns	r2, r2
 80007e4:	400a      	ands	r2, r1
 80007e6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2b10      	cmp	r3, #16
 80007ee:	d007      	beq.n	8000800 <HAL_ADC_ConfigChannel+0x1b0>
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b11      	cmp	r3, #17
 80007f6:	d003      	beq.n	8000800 <HAL_ADC_ConfigChannel+0x1b0>
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	2b12      	cmp	r3, #18
 80007fe:	d11c      	bne.n	800083a <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8000800:	4a14      	ldr	r2, [pc, #80]	; (8000854 <HAL_ADC_ConfigChannel+0x204>)
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <HAL_ADC_ConfigChannel+0x204>)
 8000804:	6819      	ldr	r1, [r3, #0]
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b10      	cmp	r3, #16
 800080c:	d007      	beq.n	800081e <HAL_ADC_ConfigChannel+0x1ce>
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	2b11      	cmp	r3, #17
 8000814:	d101      	bne.n	800081a <HAL_ADC_ConfigChannel+0x1ca>
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_ADC_ConfigChannel+0x210>)
 8000818:	e002      	b.n	8000820 <HAL_ADC_ConfigChannel+0x1d0>
 800081a:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_ADC_ConfigChannel+0x214>)
 800081c:	e000      	b.n	8000820 <HAL_ADC_ConfigChannel+0x1d0>
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <HAL_ADC_ConfigChannel+0x218>)
 8000820:	400b      	ands	r3, r1
 8000822:	6013      	str	r3, [r2, #0]
 8000824:	e009      	b.n	800083a <HAL_ADC_ConfigChannel+0x1ea>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082a:	2220      	movs	r2, #32
 800082c:	431a      	orrs	r2, r3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8000832:	230f      	movs	r3, #15
 8000834:	18fb      	adds	r3, r7, r3
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	2240      	movs	r2, #64	; 0x40
 800083e:	2100      	movs	r1, #0
 8000840:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8000842:	230f      	movs	r3, #15
 8000844:	18fb      	adds	r3, r7, r3
 8000846:	781b      	ldrb	r3, [r3, #0]
}
 8000848:	0018      	movs	r0, r3
 800084a:	46bd      	mov	sp, r7
 800084c:	b004      	add	sp, #16
 800084e:	bd80      	pop	{r7, pc}
 8000850:	00001001 	.word	0x00001001
 8000854:	40012708 	.word	0x40012708
 8000858:	20000000 	.word	0x20000000
 800085c:	000f4240 	.word	0x000f4240
 8000860:	ffbfffff 	.word	0xffbfffff
 8000864:	feffffff 	.word	0xfeffffff
 8000868:	ff7fffff 	.word	0xff7fffff

0800086c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	689b      	ldr	r3, [r3, #8]
 8000882:	2203      	movs	r2, #3
 8000884:	4013      	ands	r3, r2
 8000886:	2b01      	cmp	r3, #1
 8000888:	d112      	bne.n	80008b0 <ADC_Enable+0x44>
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	2201      	movs	r2, #1
 8000892:	4013      	ands	r3, r2
 8000894:	2b01      	cmp	r3, #1
 8000896:	d009      	beq.n	80008ac <ADC_Enable+0x40>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	68da      	ldr	r2, [r3, #12]
 800089e:	2380      	movs	r3, #128	; 0x80
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	401a      	ands	r2, r3
 80008a4:	2380      	movs	r3, #128	; 0x80
 80008a6:	021b      	lsls	r3, r3, #8
 80008a8:	429a      	cmp	r2, r3
 80008aa:	d101      	bne.n	80008b0 <ADC_Enable+0x44>
 80008ac:	2301      	movs	r3, #1
 80008ae:	e000      	b.n	80008b2 <ADC_Enable+0x46>
 80008b0:	2300      	movs	r3, #0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d14b      	bne.n	800094e <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	689b      	ldr	r3, [r3, #8]
 80008bc:	4a26      	ldr	r2, [pc, #152]	; (8000958 <ADC_Enable+0xec>)
 80008be:	4013      	ands	r3, r2
 80008c0:	d00d      	beq.n	80008de <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008c6:	2210      	movs	r2, #16
 80008c8:	431a      	orrs	r2, r3
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008d2:	2201      	movs	r2, #1
 80008d4:	431a      	orrs	r2, r3
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 80008da:	2301      	movs	r3, #1
 80008dc:	e038      	b.n	8000950 <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	6812      	ldr	r2, [r2, #0]
 80008e6:	6892      	ldr	r2, [r2, #8]
 80008e8:	2101      	movs	r1, #1
 80008ea:	430a      	orrs	r2, r1
 80008ec:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <ADC_Enable+0xf0>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	491b      	ldr	r1, [pc, #108]	; (8000960 <ADC_Enable+0xf4>)
 80008f4:	0018      	movs	r0, r3
 80008f6:	f7ff fc05 	bl	8000104 <__udivsi3>
 80008fa:	0003      	movs	r3, r0
 80008fc:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80008fe:	e002      	b.n	8000906 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	3b01      	subs	r3, #1
 8000904:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d1f9      	bne.n	8000900 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 800090c:	f7ff fcc2 	bl	8000294 <HAL_GetTick>
 8000910:	0003      	movs	r3, r0
 8000912:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000914:	e014      	b.n	8000940 <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000916:	f7ff fcbd 	bl	8000294 <HAL_GetTick>
 800091a:	0002      	movs	r2, r0
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	1ad3      	subs	r3, r2, r3
 8000920:	2b02      	cmp	r3, #2
 8000922:	d90d      	bls.n	8000940 <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000928:	2210      	movs	r2, #16
 800092a:	431a      	orrs	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000934:	2201      	movs	r2, #1
 8000936:	431a      	orrs	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 800093c:	2301      	movs	r3, #1
 800093e:	e007      	b.n	8000950 <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2201      	movs	r2, #1
 8000948:	4013      	ands	r3, r2
 800094a:	2b01      	cmp	r3, #1
 800094c:	d1e3      	bne.n	8000916 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800094e:	2300      	movs	r3, #0
}
 8000950:	0018      	movs	r0, r3
 8000952:	46bd      	mov	sp, r7
 8000954:	b004      	add	sp, #16
 8000956:	bd80      	pop	{r7, pc}
 8000958:	80000017 	.word	0x80000017
 800095c:	20000000 	.word	0x20000000
 8000960:	000f4240 	.word	0x000f4240

08000964 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800096c:	2300      	movs	r3, #0
 800096e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	689b      	ldr	r3, [r3, #8]
 8000976:	2203      	movs	r2, #3
 8000978:	4013      	ands	r3, r2
 800097a:	2b01      	cmp	r3, #1
 800097c:	d112      	bne.n	80009a4 <ADC_Disable+0x40>
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2201      	movs	r2, #1
 8000986:	4013      	ands	r3, r2
 8000988:	2b01      	cmp	r3, #1
 800098a:	d009      	beq.n	80009a0 <ADC_Disable+0x3c>
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	68da      	ldr	r2, [r3, #12]
 8000992:	2380      	movs	r3, #128	; 0x80
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	401a      	ands	r2, r3
 8000998:	2380      	movs	r3, #128	; 0x80
 800099a:	021b      	lsls	r3, r3, #8
 800099c:	429a      	cmp	r2, r3
 800099e:	d101      	bne.n	80009a4 <ADC_Disable+0x40>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e000      	b.n	80009a6 <ADC_Disable+0x42>
 80009a4:	2300      	movs	r3, #0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d040      	beq.n	8000a2c <ADC_Disable+0xc8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	689b      	ldr	r3, [r3, #8]
 80009b0:	2205      	movs	r2, #5
 80009b2:	4013      	ands	r3, r2
 80009b4:	2b01      	cmp	r3, #1
 80009b6:	d110      	bne.n	80009da <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	6812      	ldr	r2, [r2, #0]
 80009c0:	6892      	ldr	r2, [r2, #8]
 80009c2:	2102      	movs	r1, #2
 80009c4:	430a      	orrs	r2, r1
 80009c6:	609a      	str	r2, [r3, #8]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2203      	movs	r2, #3
 80009ce:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80009d0:	f7ff fc60 	bl	8000294 <HAL_GetTick>
 80009d4:	0003      	movs	r3, r0
 80009d6:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80009d8:	e022      	b.n	8000a20 <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009de:	2210      	movs	r2, #16
 80009e0:	431a      	orrs	r2, r3
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009ea:	2201      	movs	r2, #1
 80009ec:	431a      	orrs	r2, r3
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	e01b      	b.n	8000a2e <ADC_Disable+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80009f6:	f7ff fc4d 	bl	8000294 <HAL_GetTick>
 80009fa:	0002      	movs	r2, r0
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	1ad3      	subs	r3, r2, r3
 8000a00:	2b02      	cmp	r3, #2
 8000a02:	d90d      	bls.n	8000a20 <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a08:	2210      	movs	r2, #16
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a14:	2201      	movs	r2, #1
 8000a16:	431a      	orrs	r2, r3
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	e006      	b.n	8000a2e <ADC_Disable+0xca>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	2201      	movs	r2, #1
 8000a28:	4013      	ands	r3, r2
 8000a2a:	d1e4      	bne.n	80009f6 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	0018      	movs	r0, r3
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b004      	add	sp, #16
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b084      	sub	sp, #16
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	689b      	ldr	r3, [r3, #8]
 8000a48:	2204      	movs	r2, #4
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	d033      	beq.n	8000ab6 <ADC_ConversionStop+0x80>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	2204      	movs	r2, #4
 8000a56:	4013      	ands	r3, r2
 8000a58:	d00d      	beq.n	8000a76 <ADC_ConversionStop+0x40>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	689b      	ldr	r3, [r3, #8]
 8000a60:	2202      	movs	r2, #2
 8000a62:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8000a64:	d107      	bne.n	8000a76 <ADC_ConversionStop+0x40>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	6812      	ldr	r2, [r2, #0]
 8000a6e:	6892      	ldr	r2, [r2, #8]
 8000a70:	2110      	movs	r1, #16
 8000a72:	430a      	orrs	r2, r1
 8000a74:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000a76:	f7ff fc0d 	bl	8000294 <HAL_GetTick>
 8000a7a:	0003      	movs	r3, r0
 8000a7c:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000a7e:	e014      	b.n	8000aaa <ADC_ConversionStop+0x74>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000a80:	f7ff fc08 	bl	8000294 <HAL_GetTick>
 8000a84:	0002      	movs	r2, r0
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d90d      	bls.n	8000aaa <ADC_ConversionStop+0x74>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	2210      	movs	r2, #16
 8000a94:	431a      	orrs	r2, r3
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a9e:	2201      	movs	r2, #1
 8000aa0:	431a      	orrs	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e006      	b.n	8000ab8 <ADC_ConversionStop+0x82>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	689b      	ldr	r3, [r3, #8]
 8000ab0:	2204      	movs	r2, #4
 8000ab2:	4013      	ands	r3, r2
 8000ab4:	d1e4      	bne.n	8000a80 <ADC_ConversionStop+0x4a>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000ab6:	2300      	movs	r3, #0
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b004      	add	sp, #16
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b5b0      	push	{r4, r5, r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	0002      	movs	r2, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b7f      	cmp	r3, #127	; 0x7f
 8000ad4:	d932      	bls.n	8000b3c <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad6:	4c2f      	ldr	r4, [pc, #188]	; (8000b94 <NVIC_SetPriority+0xd4>)
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	001a      	movs	r2, r3
 8000ade:	230f      	movs	r3, #15
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	3b08      	subs	r3, #8
 8000ae4:	0899      	lsrs	r1, r3, #2
 8000ae6:	4a2b      	ldr	r2, [pc, #172]	; (8000b94 <NVIC_SetPriority+0xd4>)
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	0018      	movs	r0, r3
 8000aee:	230f      	movs	r3, #15
 8000af0:	4003      	ands	r3, r0
 8000af2:	3b08      	subs	r3, #8
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3306      	adds	r3, #6
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	18d3      	adds	r3, r2, r3
 8000afc:	3304      	adds	r3, #4
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	1dfa      	adds	r2, r7, #7
 8000b02:	7812      	ldrb	r2, [r2, #0]
 8000b04:	0010      	movs	r0, r2
 8000b06:	2203      	movs	r2, #3
 8000b08:	4002      	ands	r2, r0
 8000b0a:	00d2      	lsls	r2, r2, #3
 8000b0c:	20ff      	movs	r0, #255	; 0xff
 8000b0e:	4090      	lsls	r0, r2
 8000b10:	0002      	movs	r2, r0
 8000b12:	43d2      	mvns	r2, r2
 8000b14:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	019b      	lsls	r3, r3, #6
 8000b1a:	20ff      	movs	r0, #255	; 0xff
 8000b1c:	4018      	ands	r0, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	001d      	movs	r5, r3
 8000b24:	2303      	movs	r3, #3
 8000b26:	402b      	ands	r3, r5
 8000b28:	00db      	lsls	r3, r3, #3
 8000b2a:	4098      	lsls	r0, r3
 8000b2c:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	1d8b      	adds	r3, r1, #6
 8000b32:	009b      	lsls	r3, r3, #2
 8000b34:	18e3      	adds	r3, r4, r3
 8000b36:	3304      	adds	r3, #4
 8000b38:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b3a:	e027      	b.n	8000b8c <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b3c:	4c16      	ldr	r4, [pc, #88]	; (8000b98 <NVIC_SetPriority+0xd8>)
 8000b3e:	1dfb      	adds	r3, r7, #7
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	089b      	lsrs	r3, r3, #2
 8000b46:	4914      	ldr	r1, [pc, #80]	; (8000b98 <NVIC_SetPriority+0xd8>)
 8000b48:	1dfa      	adds	r2, r7, #7
 8000b4a:	7812      	ldrb	r2, [r2, #0]
 8000b4c:	b252      	sxtb	r2, r2
 8000b4e:	0892      	lsrs	r2, r2, #2
 8000b50:	32c0      	adds	r2, #192	; 0xc0
 8000b52:	0092      	lsls	r2, r2, #2
 8000b54:	5852      	ldr	r2, [r2, r1]
 8000b56:	1df9      	adds	r1, r7, #7
 8000b58:	7809      	ldrb	r1, [r1, #0]
 8000b5a:	0008      	movs	r0, r1
 8000b5c:	2103      	movs	r1, #3
 8000b5e:	4001      	ands	r1, r0
 8000b60:	00c9      	lsls	r1, r1, #3
 8000b62:	20ff      	movs	r0, #255	; 0xff
 8000b64:	4088      	lsls	r0, r1
 8000b66:	0001      	movs	r1, r0
 8000b68:	43c9      	mvns	r1, r1
 8000b6a:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b6c:	683a      	ldr	r2, [r7, #0]
 8000b6e:	0192      	lsls	r2, r2, #6
 8000b70:	20ff      	movs	r0, #255	; 0xff
 8000b72:	4010      	ands	r0, r2
 8000b74:	1dfa      	adds	r2, r7, #7
 8000b76:	7812      	ldrb	r2, [r2, #0]
 8000b78:	0015      	movs	r5, r2
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	402a      	ands	r2, r5
 8000b7e:	00d2      	lsls	r2, r2, #3
 8000b80:	4090      	lsls	r0, r2
 8000b82:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b84:	430a      	orrs	r2, r1
 8000b86:	33c0      	adds	r3, #192	; 0xc0
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	511a      	str	r2, [r3, r4]
}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bdb0      	pop	{r4, r5, r7, pc}
 8000b94:	e000ed00 	.word	0xe000ed00
 8000b98:	e000e100 	.word	0xe000e100

08000b9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	3b01      	subs	r3, #1
 8000ba8:	4a0c      	ldr	r2, [pc, #48]	; (8000bdc <SysTick_Config+0x40>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d901      	bls.n	8000bb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e010      	b.n	8000bd4 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <SysTick_Config+0x44>)
 8000bb4:	687a      	ldr	r2, [r7, #4]
 8000bb6:	3a01      	subs	r2, #1
 8000bb8:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bba:	2301      	movs	r3, #1
 8000bbc:	425b      	negs	r3, r3
 8000bbe:	2103      	movs	r1, #3
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f7ff ff7d 	bl	8000ac0 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <SysTick_Config+0x44>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bcc:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SysTick_Config+0x44>)
 8000bce:	2207      	movs	r2, #7
 8000bd0:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bd2:	2300      	movs	r3, #0
}
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	b002      	add	sp, #8
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	00ffffff 	.word	0x00ffffff
 8000be0:	e000e010 	.word	0xe000e010

08000be4 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	230f      	movs	r3, #15
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	1c02      	adds	r2, r0, #0
 8000bf4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	b25b      	sxtb	r3, r3
 8000c00:	0011      	movs	r1, r2
 8000c02:	0018      	movs	r0, r3
 8000c04:	f7ff ff5c 	bl	8000ac0 <NVIC_SetPriority>
}
 8000c08:	46c0      	nop			; (mov r8, r8)
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	b004      	add	sp, #16
 8000c0e:	bd80      	pop	{r7, pc}

08000c10 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	f7ff ffbe 	bl	8000b9c <SysTick_Config>
 8000c20:	0003      	movs	r3, r0
}
 8000c22:	0018      	movs	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	b002      	add	sp, #8
 8000c28:	bd80      	pop	{r7, pc}
	...

08000c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
 8000c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000c42:	e155      	b.n	8000ef0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	000a      	movs	r2, r1
 8000c50:	4013      	ands	r3, r2
 8000c52:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d100      	bne.n	8000c5c <HAL_GPIO_Init+0x30>
 8000c5a:	e146      	b.n	8000eea <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x40>
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	2b12      	cmp	r3, #18
 8000c6a:	d123      	bne.n	8000cb4 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	08da      	lsrs	r2, r3, #3
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	3208      	adds	r2, #8
 8000c74:	0092      	lsls	r2, r2, #2
 8000c76:	58d3      	ldr	r3, [r2, r3]
 8000c78:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	4013      	ands	r3, r2
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	220f      	movs	r2, #15
 8000c84:	409a      	lsls	r2, r3
 8000c86:	0013      	movs	r3, r2
 8000c88:	43da      	mvns	r2, r3
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	691a      	ldr	r2, [r3, #16]
 8000c94:	697b      	ldr	r3, [r7, #20]
 8000c96:	2107      	movs	r1, #7
 8000c98:	400b      	ands	r3, r1
 8000c9a:	009b      	lsls	r3, r3, #2
 8000c9c:	409a      	lsls	r2, r3
 8000c9e:	0013      	movs	r3, r2
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	08da      	lsrs	r2, r3, #3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	3208      	adds	r2, #8
 8000cae:	0092      	lsls	r2, r2, #2
 8000cb0:	6939      	ldr	r1, [r7, #16]
 8000cb2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8000cba:	697b      	ldr	r3, [r7, #20]
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	2203      	movs	r2, #3
 8000cc0:	409a      	lsls	r2, r3
 8000cc2:	0013      	movs	r3, r2
 8000cc4:	43da      	mvns	r2, r3
 8000cc6:	693b      	ldr	r3, [r7, #16]
 8000cc8:	4013      	ands	r3, r2
 8000cca:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	401a      	ands	r2, r3
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	005b      	lsls	r3, r3, #1
 8000cd8:	409a      	lsls	r2, r3
 8000cda:	0013      	movs	r3, r2
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	693a      	ldr	r2, [r7, #16]
 8000ce6:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d00b      	beq.n	8000d08 <HAL_GPIO_Init+0xdc>
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d007      	beq.n	8000d08 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cfc:	2b11      	cmp	r3, #17
 8000cfe:	d003      	beq.n	8000d08 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b12      	cmp	r3, #18
 8000d06:	d130      	bne.n	8000d6a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	689b      	ldr	r3, [r3, #8]
 8000d0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d0e:	697b      	ldr	r3, [r7, #20]
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	2203      	movs	r2, #3
 8000d14:	409a      	lsls	r2, r3
 8000d16:	0013      	movs	r3, r2
 8000d18:	43da      	mvns	r2, r3
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	68da      	ldr	r2, [r3, #12]
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	005b      	lsls	r3, r3, #1
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	693a      	ldr	r2, [r7, #16]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000d3e:	2201      	movs	r2, #1
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	409a      	lsls	r2, r3
 8000d44:	0013      	movs	r3, r2
 8000d46:	43da      	mvns	r2, r3
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	4013      	ands	r3, r2
 8000d4c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	091b      	lsrs	r3, r3, #4
 8000d54:	2201      	movs	r2, #1
 8000d56:	401a      	ands	r2, r3
 8000d58:	697b      	ldr	r3, [r7, #20]
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	0013      	movs	r3, r2
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4313      	orrs	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	2203      	movs	r2, #3
 8000d76:	409a      	lsls	r2, r3
 8000d78:	0013      	movs	r3, r2
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4013      	ands	r3, r2
 8000d80:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	409a      	lsls	r2, r3
 8000d8c:	0013      	movs	r3, r2
 8000d8e:	693a      	ldr	r2, [r7, #16]
 8000d90:	4313      	orrs	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	2380      	movs	r3, #128	; 0x80
 8000da0:	055b      	lsls	r3, r3, #21
 8000da2:	4013      	ands	r3, r2
 8000da4:	d100      	bne.n	8000da8 <HAL_GPIO_Init+0x17c>
 8000da6:	e0a0      	b.n	8000eea <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da8:	4b57      	ldr	r3, [pc, #348]	; (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000daa:	4a57      	ldr	r2, [pc, #348]	; (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000dac:	6992      	ldr	r2, [r2, #24]
 8000dae:	2101      	movs	r1, #1
 8000db0:	430a      	orrs	r2, r1
 8000db2:	619a      	str	r2, [r3, #24]
 8000db4:	4b54      	ldr	r3, [pc, #336]	; (8000f08 <HAL_GPIO_Init+0x2dc>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	2201      	movs	r2, #1
 8000dba:	4013      	ands	r3, r2
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8000dc0:	4a52      	ldr	r2, [pc, #328]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	089b      	lsrs	r3, r3, #2
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	009b      	lsls	r3, r3, #2
 8000dca:	589b      	ldr	r3, [r3, r2]
 8000dcc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	2203      	movs	r2, #3
 8000dd2:	4013      	ands	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	220f      	movs	r2, #15
 8000dd8:	409a      	lsls	r2, r3
 8000dda:	0013      	movs	r3, r2
 8000ddc:	43da      	mvns	r2, r3
 8000dde:	693b      	ldr	r3, [r7, #16]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	2390      	movs	r3, #144	; 0x90
 8000de8:	05db      	lsls	r3, r3, #23
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d019      	beq.n	8000e22 <HAL_GPIO_Init+0x1f6>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a47      	ldr	r2, [pc, #284]	; (8000f10 <HAL_GPIO_Init+0x2e4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d013      	beq.n	8000e1e <HAL_GPIO_Init+0x1f2>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a46      	ldr	r2, [pc, #280]	; (8000f14 <HAL_GPIO_Init+0x2e8>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d00d      	beq.n	8000e1a <HAL_GPIO_Init+0x1ee>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a45      	ldr	r2, [pc, #276]	; (8000f18 <HAL_GPIO_Init+0x2ec>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d007      	beq.n	8000e16 <HAL_GPIO_Init+0x1ea>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a44      	ldr	r2, [pc, #272]	; (8000f1c <HAL_GPIO_Init+0x2f0>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d101      	bne.n	8000e12 <HAL_GPIO_Init+0x1e6>
 8000e0e:	2304      	movs	r3, #4
 8000e10:	e008      	b.n	8000e24 <HAL_GPIO_Init+0x1f8>
 8000e12:	2305      	movs	r3, #5
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x1f8>
 8000e16:	2303      	movs	r3, #3
 8000e18:	e004      	b.n	8000e24 <HAL_GPIO_Init+0x1f8>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_Init+0x1f8>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <HAL_GPIO_Init+0x1f8>
 8000e22:	2300      	movs	r3, #0
 8000e24:	697a      	ldr	r2, [r7, #20]
 8000e26:	2103      	movs	r1, #3
 8000e28:	400a      	ands	r2, r1
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	4093      	lsls	r3, r2
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e34:	4935      	ldr	r1, [pc, #212]	; (8000f0c <HAL_GPIO_Init+0x2e0>)
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e42:	4b37      	ldr	r3, [pc, #220]	; (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	43da      	mvns	r2, r3
 8000e4c:	693b      	ldr	r3, [r7, #16]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	2380      	movs	r3, #128	; 0x80
 8000e58:	025b      	lsls	r3, r3, #9
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e66:	4b2e      	ldr	r3, [pc, #184]	; (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000e6c:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	43da      	mvns	r2, r3
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685a      	ldr	r2, [r3, #4]
 8000e80:	2380      	movs	r3, #128	; 0x80
 8000e82:	029b      	lsls	r3, r3, #10
 8000e84:	4013      	ands	r3, r2
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e90:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e96:	4b22      	ldr	r3, [pc, #136]	; (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000e98:	689b      	ldr	r3, [r3, #8]
 8000e9a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	43da      	mvns	r2, r3
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685a      	ldr	r2, [r3, #4]
 8000eaa:	2380      	movs	r3, #128	; 0x80
 8000eac:	035b      	lsls	r3, r3, #13
 8000eae:	4013      	ands	r3, r2
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8000eb2:	693a      	ldr	r2, [r7, #16]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000eba:	4b19      	ldr	r3, [pc, #100]	; (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000ebc:	693a      	ldr	r2, [r7, #16]
 8000ebe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	43da      	mvns	r2, r3
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685a      	ldr	r2, [r3, #4]
 8000ed4:	2380      	movs	r3, #128	; 0x80
 8000ed6:	039b      	lsls	r3, r3, #14
 8000ed8:	4013      	ands	r3, r2
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8000edc:	693a      	ldr	r2, [r7, #16]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	; (8000f20 <HAL_GPIO_Init+0x2f4>)
 8000ee6:	693a      	ldr	r2, [r7, #16]
 8000ee8:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	681a      	ldr	r2, [r3, #0]
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	40da      	lsrs	r2, r3
 8000ef8:	1e13      	subs	r3, r2, #0
 8000efa:	d000      	beq.n	8000efe <HAL_GPIO_Init+0x2d2>
 8000efc:	e6a2      	b.n	8000c44 <HAL_GPIO_Init+0x18>
  } 
}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b006      	add	sp, #24
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	40021000 	.word	0x40021000
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	48000400 	.word	0x48000400
 8000f14:	48000800 	.word	0x48000800
 8000f18:	48000c00 	.word	0x48000c00
 8000f1c:	48001000 	.word	0x48001000
 8000f20:	40010400 	.word	0x40010400

08000f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	0008      	movs	r0, r1
 8000f2e:	0011      	movs	r1, r2
 8000f30:	1cbb      	adds	r3, r7, #2
 8000f32:	1c02      	adds	r2, r0, #0
 8000f34:	801a      	strh	r2, [r3, #0]
 8000f36:	1c7b      	adds	r3, r7, #1
 8000f38:	1c0a      	adds	r2, r1, #0
 8000f3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f3c:	1c7b      	adds	r3, r7, #1
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d004      	beq.n	8000f4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f44:	1cbb      	adds	r3, r7, #2
 8000f46:	881a      	ldrh	r2, [r3, #0]
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f4c:	e003      	b.n	8000f56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f4e:	1cbb      	adds	r3, r7, #2
 8000f50:	881a      	ldrh	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd80      	pop	{r7, pc}
	...

08000f60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4013      	ands	r3, r2
 8000f74:	d100      	bne.n	8000f78 <HAL_RCC_OscConfig+0x18>
 8000f76:	e08d      	b.n	8001094 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f78:	4bc5      	ldr	r3, [pc, #788]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	220c      	movs	r2, #12
 8000f7e:	4013      	ands	r3, r2
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	d00e      	beq.n	8000fa2 <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f84:	4bc2      	ldr	r3, [pc, #776]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	220c      	movs	r2, #12
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	2b08      	cmp	r3, #8
 8000f8e:	d116      	bne.n	8000fbe <HAL_RCC_OscConfig+0x5e>
 8000f90:	4bbf      	ldr	r3, [pc, #764]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	23c0      	movs	r3, #192	; 0xc0
 8000f96:	025b      	lsls	r3, r3, #9
 8000f98:	401a      	ands	r2, r3
 8000f9a:	2380      	movs	r3, #128	; 0x80
 8000f9c:	025b      	lsls	r3, r3, #9
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d10d      	bne.n	8000fbe <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa2:	4bbb      	ldr	r3, [pc, #748]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	2380      	movs	r3, #128	; 0x80
 8000fa8:	029b      	lsls	r3, r3, #10
 8000faa:	4013      	ands	r3, r2
 8000fac:	d100      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x50>
 8000fae:	e070      	b.n	8001092 <HAL_RCC_OscConfig+0x132>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d000      	beq.n	8000fba <HAL_RCC_OscConfig+0x5a>
 8000fb8:	e06b      	b.n	8001092 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e327      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d107      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x76>
 8000fc6:	4bb2      	ldr	r3, [pc, #712]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8000fc8:	4ab1      	ldr	r2, [pc, #708]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8000fca:	6812      	ldr	r2, [r2, #0]
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	0249      	lsls	r1, r1, #9
 8000fd0:	430a      	orrs	r2, r1
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	e02f      	b.n	8001036 <HAL_RCC_OscConfig+0xd6>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x98>
 8000fde:	4bac      	ldr	r3, [pc, #688]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8000fe0:	4aab      	ldr	r2, [pc, #684]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8000fe2:	6812      	ldr	r2, [r2, #0]
 8000fe4:	49ab      	ldr	r1, [pc, #684]	; (8001294 <HAL_RCC_OscConfig+0x334>)
 8000fe6:	400a      	ands	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	4ba9      	ldr	r3, [pc, #676]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8000fec:	4aa8      	ldr	r2, [pc, #672]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8000fee:	6812      	ldr	r2, [r2, #0]
 8000ff0:	49a9      	ldr	r1, [pc, #676]	; (8001298 <HAL_RCC_OscConfig+0x338>)
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	e01e      	b.n	8001036 <HAL_RCC_OscConfig+0xd6>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b05      	cmp	r3, #5
 8000ffe:	d10e      	bne.n	800101e <HAL_RCC_OscConfig+0xbe>
 8001000:	4ba3      	ldr	r3, [pc, #652]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001002:	4aa3      	ldr	r2, [pc, #652]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001004:	6812      	ldr	r2, [r2, #0]
 8001006:	2180      	movs	r1, #128	; 0x80
 8001008:	02c9      	lsls	r1, r1, #11
 800100a:	430a      	orrs	r2, r1
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	4ba0      	ldr	r3, [pc, #640]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001010:	4a9f      	ldr	r2, [pc, #636]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	2180      	movs	r1, #128	; 0x80
 8001016:	0249      	lsls	r1, r1, #9
 8001018:	430a      	orrs	r2, r1
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	e00b      	b.n	8001036 <HAL_RCC_OscConfig+0xd6>
 800101e:	4b9c      	ldr	r3, [pc, #624]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001020:	4a9b      	ldr	r2, [pc, #620]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001022:	6812      	ldr	r2, [r2, #0]
 8001024:	499b      	ldr	r1, [pc, #620]	; (8001294 <HAL_RCC_OscConfig+0x334>)
 8001026:	400a      	ands	r2, r1
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	4b99      	ldr	r3, [pc, #612]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 800102c:	4a98      	ldr	r2, [pc, #608]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 800102e:	6812      	ldr	r2, [r2, #0]
 8001030:	4999      	ldr	r1, [pc, #612]	; (8001298 <HAL_RCC_OscConfig+0x338>)
 8001032:	400a      	ands	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d014      	beq.n	8001068 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103e:	f7ff f929 	bl	8000294 <HAL_GetTick>
 8001042:	0003      	movs	r3, r0
 8001044:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff f924 	bl	8000294 <HAL_GetTick>
 800104c:	0002      	movs	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e2d9      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800105a:	4b8d      	ldr	r3, [pc, #564]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	2380      	movs	r3, #128	; 0x80
 8001060:	029b      	lsls	r3, r3, #10
 8001062:	4013      	ands	r3, r2
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0xe8>
 8001066:	e015      	b.n	8001094 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001068:	f7ff f914 	bl	8000294 <HAL_GetTick>
 800106c:	0003      	movs	r3, r0
 800106e:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001070:	e008      	b.n	8001084 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001072:	f7ff f90f 	bl	8000294 <HAL_GetTick>
 8001076:	0002      	movs	r2, r0
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	2b64      	cmp	r3, #100	; 0x64
 800107e:	d901      	bls.n	8001084 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001080:	2303      	movs	r3, #3
 8001082:	e2c4      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001084:	4b82      	ldr	r3, [pc, #520]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	029b      	lsls	r3, r3, #10
 800108c:	4013      	ands	r3, r2
 800108e:	d1f0      	bne.n	8001072 <HAL_RCC_OscConfig+0x112>
 8001090:	e000      	b.n	8001094 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001092:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2202      	movs	r2, #2
 800109a:	4013      	ands	r3, r2
 800109c:	d100      	bne.n	80010a0 <HAL_RCC_OscConfig+0x140>
 800109e:	e06c      	b.n	800117a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010a0:	4b7b      	ldr	r3, [pc, #492]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	220c      	movs	r2, #12
 80010a6:	4013      	ands	r3, r2
 80010a8:	d00e      	beq.n	80010c8 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010aa:	4b79      	ldr	r3, [pc, #484]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	220c      	movs	r2, #12
 80010b0:	4013      	ands	r3, r2
 80010b2:	2b08      	cmp	r3, #8
 80010b4:	d11f      	bne.n	80010f6 <HAL_RCC_OscConfig+0x196>
 80010b6:	4b76      	ldr	r3, [pc, #472]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 80010b8:	685a      	ldr	r2, [r3, #4]
 80010ba:	23c0      	movs	r3, #192	; 0xc0
 80010bc:	025b      	lsls	r3, r3, #9
 80010be:	401a      	ands	r2, r3
 80010c0:	2380      	movs	r3, #128	; 0x80
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d116      	bne.n	80010f6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c8:	4b71      	ldr	r3, [pc, #452]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2202      	movs	r2, #2
 80010ce:	4013      	ands	r3, r2
 80010d0:	d005      	beq.n	80010de <HAL_RCC_OscConfig+0x17e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d001      	beq.n	80010de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	e297      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010de:	4a6c      	ldr	r2, [pc, #432]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 80010e0:	4b6b      	ldr	r3, [pc, #428]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	21f8      	movs	r1, #248	; 0xf8
 80010e6:	438b      	bics	r3, r1
 80010e8:	0019      	movs	r1, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	430b      	orrs	r3, r1
 80010f2:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f4:	e041      	b.n	800117a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d024      	beq.n	8001148 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010fe:	4b64      	ldr	r3, [pc, #400]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001100:	4a63      	ldr	r2, [pc, #396]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001102:	6812      	ldr	r2, [r2, #0]
 8001104:	2101      	movs	r1, #1
 8001106:	430a      	orrs	r2, r1
 8001108:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800110a:	f7ff f8c3 	bl	8000294 <HAL_GetTick>
 800110e:	0003      	movs	r3, r0
 8001110:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001112:	e008      	b.n	8001126 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001114:	f7ff f8be 	bl	8000294 <HAL_GetTick>
 8001118:	0002      	movs	r2, r0
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	1ad3      	subs	r3, r2, r3
 800111e:	2b02      	cmp	r3, #2
 8001120:	d901      	bls.n	8001126 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001122:	2303      	movs	r3, #3
 8001124:	e273      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001126:	4b5a      	ldr	r3, [pc, #360]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2202      	movs	r2, #2
 800112c:	4013      	ands	r3, r2
 800112e:	d0f1      	beq.n	8001114 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001130:	4a57      	ldr	r2, [pc, #348]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001132:	4b57      	ldr	r3, [pc, #348]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	21f8      	movs	r1, #248	; 0xf8
 8001138:	438b      	bics	r3, r1
 800113a:	0019      	movs	r1, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	00db      	lsls	r3, r3, #3
 8001142:	430b      	orrs	r3, r1
 8001144:	6013      	str	r3, [r2, #0]
 8001146:	e018      	b.n	800117a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001148:	4b51      	ldr	r3, [pc, #324]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 800114a:	4a51      	ldr	r2, [pc, #324]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	2101      	movs	r1, #1
 8001150:	438a      	bics	r2, r1
 8001152:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff f89e 	bl	8000294 <HAL_GetTick>
 8001158:	0003      	movs	r3, r0
 800115a:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800115c:	e008      	b.n	8001170 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800115e:	f7ff f899 	bl	8000294 <HAL_GetTick>
 8001162:	0002      	movs	r2, r0
 8001164:	693b      	ldr	r3, [r7, #16]
 8001166:	1ad3      	subs	r3, r2, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d901      	bls.n	8001170 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800116c:	2303      	movs	r3, #3
 800116e:	e24e      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001170:	4b47      	ldr	r3, [pc, #284]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2202      	movs	r2, #2
 8001176:	4013      	ands	r3, r2
 8001178:	d1f1      	bne.n	800115e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2208      	movs	r2, #8
 8001180:	4013      	ands	r3, r2
 8001182:	d036      	beq.n	80011f2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	69db      	ldr	r3, [r3, #28]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d019      	beq.n	80011c0 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800118c:	4b40      	ldr	r3, [pc, #256]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 800118e:	4a40      	ldr	r2, [pc, #256]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001190:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001192:	2101      	movs	r1, #1
 8001194:	430a      	orrs	r2, r1
 8001196:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001198:	f7ff f87c 	bl	8000294 <HAL_GetTick>
 800119c:	0003      	movs	r3, r0
 800119e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a0:	e008      	b.n	80011b4 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011a2:	f7ff f877 	bl	8000294 <HAL_GetTick>
 80011a6:	0002      	movs	r2, r0
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d901      	bls.n	80011b4 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80011b0:	2303      	movs	r3, #3
 80011b2:	e22c      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011b4:	4b36      	ldr	r3, [pc, #216]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	2202      	movs	r2, #2
 80011ba:	4013      	ands	r3, r2
 80011bc:	d0f1      	beq.n	80011a2 <HAL_RCC_OscConfig+0x242>
 80011be:	e018      	b.n	80011f2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011c0:	4b33      	ldr	r3, [pc, #204]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 80011c2:	4a33      	ldr	r2, [pc, #204]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 80011c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011c6:	2101      	movs	r1, #1
 80011c8:	438a      	bics	r2, r1
 80011ca:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011cc:	f7ff f862 	bl	8000294 <HAL_GetTick>
 80011d0:	0003      	movs	r3, r0
 80011d2:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d4:	e008      	b.n	80011e8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011d6:	f7ff f85d 	bl	8000294 <HAL_GetTick>
 80011da:	0002      	movs	r2, r0
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	1ad3      	subs	r3, r2, r3
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d901      	bls.n	80011e8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e212      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011e8:	4b29      	ldr	r3, [pc, #164]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	2202      	movs	r2, #2
 80011ee:	4013      	ands	r3, r2
 80011f0:	d1f1      	bne.n	80011d6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	2204      	movs	r2, #4
 80011f8:	4013      	ands	r3, r2
 80011fa:	d100      	bne.n	80011fe <HAL_RCC_OscConfig+0x29e>
 80011fc:	e0b6      	b.n	800136c <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011fe:	2317      	movs	r3, #23
 8001200:	18fb      	adds	r3, r7, r3
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001206:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001208:	69da      	ldr	r2, [r3, #28]
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	055b      	lsls	r3, r3, #21
 800120e:	4013      	ands	r3, r2
 8001210:	d111      	bne.n	8001236 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001214:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001216:	69d2      	ldr	r2, [r2, #28]
 8001218:	2180      	movs	r1, #128	; 0x80
 800121a:	0549      	lsls	r1, r1, #21
 800121c:	430a      	orrs	r2, r1
 800121e:	61da      	str	r2, [r3, #28]
 8001220:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001222:	69da      	ldr	r2, [r3, #28]
 8001224:	2380      	movs	r3, #128	; 0x80
 8001226:	055b      	lsls	r3, r3, #21
 8001228:	4013      	ands	r3, r2
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800122e:	2317      	movs	r3, #23
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	2201      	movs	r2, #1
 8001234:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_RCC_OscConfig+0x33c>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	2380      	movs	r3, #128	; 0x80
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	4013      	ands	r3, r2
 8001240:	d11a      	bne.n	8001278 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_RCC_OscConfig+0x33c>)
 8001244:	4a15      	ldr	r2, [pc, #84]	; (800129c <HAL_RCC_OscConfig+0x33c>)
 8001246:	6812      	ldr	r2, [r2, #0]
 8001248:	2180      	movs	r1, #128	; 0x80
 800124a:	0049      	lsls	r1, r1, #1
 800124c:	430a      	orrs	r2, r1
 800124e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001250:	f7ff f820 	bl	8000294 <HAL_GetTick>
 8001254:	0003      	movs	r3, r0
 8001256:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001258:	e008      	b.n	800126c <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800125a:	f7ff f81b 	bl	8000294 <HAL_GetTick>
 800125e:	0002      	movs	r2, r0
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	1ad3      	subs	r3, r2, r3
 8001264:	2b64      	cmp	r3, #100	; 0x64
 8001266:	d901      	bls.n	800126c <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001268:	2303      	movs	r3, #3
 800126a:	e1d0      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_RCC_OscConfig+0x33c>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2380      	movs	r3, #128	; 0x80
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4013      	ands	r3, r2
 8001276:	d0f0      	beq.n	800125a <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	2b01      	cmp	r3, #1
 800127e:	d10f      	bne.n	80012a0 <HAL_RCC_OscConfig+0x340>
 8001280:	4b03      	ldr	r3, [pc, #12]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001282:	4a03      	ldr	r2, [pc, #12]	; (8001290 <HAL_RCC_OscConfig+0x330>)
 8001284:	6a12      	ldr	r2, [r2, #32]
 8001286:	2101      	movs	r1, #1
 8001288:	430a      	orrs	r2, r1
 800128a:	621a      	str	r2, [r3, #32]
 800128c:	e036      	b.n	80012fc <HAL_RCC_OscConfig+0x39c>
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	40021000 	.word	0x40021000
 8001294:	fffeffff 	.word	0xfffeffff
 8001298:	fffbffff 	.word	0xfffbffff
 800129c:	40007000 	.word	0x40007000
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d10c      	bne.n	80012c2 <HAL_RCC_OscConfig+0x362>
 80012a8:	4bc9      	ldr	r3, [pc, #804]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80012aa:	4ac9      	ldr	r2, [pc, #804]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80012ac:	6a12      	ldr	r2, [r2, #32]
 80012ae:	2101      	movs	r1, #1
 80012b0:	438a      	bics	r2, r1
 80012b2:	621a      	str	r2, [r3, #32]
 80012b4:	4bc6      	ldr	r3, [pc, #792]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80012b6:	4ac6      	ldr	r2, [pc, #792]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80012b8:	6a12      	ldr	r2, [r2, #32]
 80012ba:	2104      	movs	r1, #4
 80012bc:	438a      	bics	r2, r1
 80012be:	621a      	str	r2, [r3, #32]
 80012c0:	e01c      	b.n	80012fc <HAL_RCC_OscConfig+0x39c>
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	689b      	ldr	r3, [r3, #8]
 80012c6:	2b05      	cmp	r3, #5
 80012c8:	d10c      	bne.n	80012e4 <HAL_RCC_OscConfig+0x384>
 80012ca:	4bc1      	ldr	r3, [pc, #772]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80012cc:	4ac0      	ldr	r2, [pc, #768]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80012ce:	6a12      	ldr	r2, [r2, #32]
 80012d0:	2104      	movs	r1, #4
 80012d2:	430a      	orrs	r2, r1
 80012d4:	621a      	str	r2, [r3, #32]
 80012d6:	4bbe      	ldr	r3, [pc, #760]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80012d8:	4abd      	ldr	r2, [pc, #756]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80012da:	6a12      	ldr	r2, [r2, #32]
 80012dc:	2101      	movs	r1, #1
 80012de:	430a      	orrs	r2, r1
 80012e0:	621a      	str	r2, [r3, #32]
 80012e2:	e00b      	b.n	80012fc <HAL_RCC_OscConfig+0x39c>
 80012e4:	4bba      	ldr	r3, [pc, #744]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80012e6:	4aba      	ldr	r2, [pc, #744]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80012e8:	6a12      	ldr	r2, [r2, #32]
 80012ea:	2101      	movs	r1, #1
 80012ec:	438a      	bics	r2, r1
 80012ee:	621a      	str	r2, [r3, #32]
 80012f0:	4bb7      	ldr	r3, [pc, #732]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80012f2:	4ab7      	ldr	r2, [pc, #732]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80012f4:	6a12      	ldr	r2, [r2, #32]
 80012f6:	2104      	movs	r1, #4
 80012f8:	438a      	bics	r2, r1
 80012fa:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b00      	cmp	r3, #0
 8001302:	d014      	beq.n	800132e <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001304:	f7fe ffc6 	bl	8000294 <HAL_GetTick>
 8001308:	0003      	movs	r3, r0
 800130a:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800130c:	e009      	b.n	8001322 <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800130e:	f7fe ffc1 	bl	8000294 <HAL_GetTick>
 8001312:	0002      	movs	r2, r0
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	4aae      	ldr	r2, [pc, #696]	; (80015d4 <HAL_RCC_OscConfig+0x674>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e175      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001322:	4bab      	ldr	r3, [pc, #684]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	2202      	movs	r2, #2
 8001328:	4013      	ands	r3, r2
 800132a:	d0f0      	beq.n	800130e <HAL_RCC_OscConfig+0x3ae>
 800132c:	e013      	b.n	8001356 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800132e:	f7fe ffb1 	bl	8000294 <HAL_GetTick>
 8001332:	0003      	movs	r3, r0
 8001334:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001336:	e009      	b.n	800134c <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f7fe ffac 	bl	8000294 <HAL_GetTick>
 800133c:	0002      	movs	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	4aa4      	ldr	r2, [pc, #656]	; (80015d4 <HAL_RCC_OscConfig+0x674>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d901      	bls.n	800134c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001348:	2303      	movs	r3, #3
 800134a:	e160      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800134c:	4ba0      	ldr	r3, [pc, #640]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	2202      	movs	r2, #2
 8001352:	4013      	ands	r3, r2
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001356:	2317      	movs	r3, #23
 8001358:	18fb      	adds	r3, r7, r3
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d105      	bne.n	800136c <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001360:	4b9b      	ldr	r3, [pc, #620]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001362:	4a9b      	ldr	r2, [pc, #620]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001364:	69d2      	ldr	r2, [r2, #28]
 8001366:	499c      	ldr	r1, [pc, #624]	; (80015d8 <HAL_RCC_OscConfig+0x678>)
 8001368:	400a      	ands	r2, r1
 800136a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	2210      	movs	r2, #16
 8001372:	4013      	ands	r3, r2
 8001374:	d063      	beq.n	800143e <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	2b01      	cmp	r3, #1
 800137c:	d12a      	bne.n	80013d4 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800137e:	4b94      	ldr	r3, [pc, #592]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001380:	4a93      	ldr	r2, [pc, #588]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001382:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001384:	2104      	movs	r1, #4
 8001386:	430a      	orrs	r2, r1
 8001388:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800138a:	4b91      	ldr	r3, [pc, #580]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 800138c:	4a90      	ldr	r2, [pc, #576]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 800138e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001390:	2101      	movs	r1, #1
 8001392:	430a      	orrs	r2, r1
 8001394:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7fe ff7d 	bl	8000294 <HAL_GetTick>
 800139a:	0003      	movs	r3, r0
 800139c:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80013a0:	f7fe ff78 	bl	8000294 <HAL_GetTick>
 80013a4:	0002      	movs	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e12d      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80013b2:	4b87      	ldr	r3, [pc, #540]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80013b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013b6:	2202      	movs	r2, #2
 80013b8:	4013      	ands	r3, r2
 80013ba:	d0f1      	beq.n	80013a0 <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013bc:	4a84      	ldr	r2, [pc, #528]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80013be:	4b84      	ldr	r3, [pc, #528]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80013c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013c2:	21f8      	movs	r1, #248	; 0xf8
 80013c4:	438b      	bics	r3, r1
 80013c6:	0019      	movs	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	00db      	lsls	r3, r3, #3
 80013ce:	430b      	orrs	r3, r1
 80013d0:	6353      	str	r3, [r2, #52]	; 0x34
 80013d2:	e034      	b.n	800143e <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	3305      	adds	r3, #5
 80013da:	d111      	bne.n	8001400 <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80013dc:	4b7c      	ldr	r3, [pc, #496]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80013de:	4a7c      	ldr	r2, [pc, #496]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80013e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013e2:	2104      	movs	r1, #4
 80013e4:	438a      	bics	r2, r1
 80013e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80013e8:	4a79      	ldr	r2, [pc, #484]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80013ea:	4b79      	ldr	r3, [pc, #484]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80013ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013ee:	21f8      	movs	r1, #248	; 0xf8
 80013f0:	438b      	bics	r3, r1
 80013f2:	0019      	movs	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	00db      	lsls	r3, r3, #3
 80013fa:	430b      	orrs	r3, r1
 80013fc:	6353      	str	r3, [r2, #52]	; 0x34
 80013fe:	e01e      	b.n	800143e <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001400:	4b73      	ldr	r3, [pc, #460]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001402:	4a73      	ldr	r2, [pc, #460]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001404:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001406:	2104      	movs	r1, #4
 8001408:	430a      	orrs	r2, r1
 800140a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800140c:	4b70      	ldr	r3, [pc, #448]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 800140e:	4a70      	ldr	r2, [pc, #448]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001410:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001412:	2101      	movs	r1, #1
 8001414:	438a      	bics	r2, r1
 8001416:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001418:	f7fe ff3c 	bl	8000294 <HAL_GetTick>
 800141c:	0003      	movs	r3, r0
 800141e:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001422:	f7fe ff37 	bl	8000294 <HAL_GetTick>
 8001426:	0002      	movs	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e0ec      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001434:	4b66      	ldr	r3, [pc, #408]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001436:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001438:	2202      	movs	r2, #2
 800143a:	4013      	ands	r3, r2
 800143c:	d1f1      	bne.n	8001422 <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2220      	movs	r2, #32
 8001444:	4013      	ands	r3, r2
 8001446:	d05c      	beq.n	8001502 <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001448:	4b61      	ldr	r3, [pc, #388]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	220c      	movs	r2, #12
 800144e:	4013      	ands	r3, r2
 8001450:	2b0c      	cmp	r3, #12
 8001452:	d00e      	beq.n	8001472 <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001454:	4b5e      	ldr	r3, [pc, #376]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	220c      	movs	r2, #12
 800145a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800145c:	2b08      	cmp	r3, #8
 800145e:	d114      	bne.n	800148a <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001460:	4b5b      	ldr	r3, [pc, #364]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001462:	685a      	ldr	r2, [r3, #4]
 8001464:	23c0      	movs	r3, #192	; 0xc0
 8001466:	025b      	lsls	r3, r3, #9
 8001468:	401a      	ands	r2, r3
 800146a:	23c0      	movs	r3, #192	; 0xc0
 800146c:	025b      	lsls	r3, r3, #9
 800146e:	429a      	cmp	r2, r3
 8001470:	d10b      	bne.n	800148a <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001472:	4b57      	ldr	r3, [pc, #348]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001476:	2380      	movs	r3, #128	; 0x80
 8001478:	025b      	lsls	r3, r3, #9
 800147a:	4013      	ands	r3, r2
 800147c:	d040      	beq.n	8001500 <HAL_RCC_OscConfig+0x5a0>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a1b      	ldr	r3, [r3, #32]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d03c      	beq.n	8001500 <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e0c1      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d01b      	beq.n	80014ca <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001492:	4b4f      	ldr	r3, [pc, #316]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001494:	4a4e      	ldr	r2, [pc, #312]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001496:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001498:	2180      	movs	r1, #128	; 0x80
 800149a:	0249      	lsls	r1, r1, #9
 800149c:	430a      	orrs	r2, r1
 800149e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7fe fef8 	bl	8000294 <HAL_GetTick>
 80014a4:	0003      	movs	r3, r0
 80014a6:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014aa:	f7fe fef3 	bl	8000294 <HAL_GetTick>
 80014ae:	0002      	movs	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e0a8      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80014bc:	4b44      	ldr	r3, [pc, #272]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80014be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c0:	2380      	movs	r3, #128	; 0x80
 80014c2:	025b      	lsls	r3, r3, #9
 80014c4:	4013      	ands	r3, r2
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x54a>
 80014c8:	e01b      	b.n	8001502 <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80014ca:	4b41      	ldr	r3, [pc, #260]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80014cc:	4a40      	ldr	r2, [pc, #256]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80014ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80014d0:	4942      	ldr	r1, [pc, #264]	; (80015dc <HAL_RCC_OscConfig+0x67c>)
 80014d2:	400a      	ands	r2, r1
 80014d4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d6:	f7fe fedd 	bl	8000294 <HAL_GetTick>
 80014da:	0003      	movs	r3, r0
 80014dc:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014e0:	f7fe fed8 	bl	8000294 <HAL_GetTick>
 80014e4:	0002      	movs	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e08d      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80014f2:	4b37      	ldr	r3, [pc, #220]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80014f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	025b      	lsls	r3, r3, #9
 80014fa:	4013      	ands	r3, r2
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x580>
 80014fe:	e000      	b.n	8001502 <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001500:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001506:	2b00      	cmp	r3, #0
 8001508:	d100      	bne.n	800150c <HAL_RCC_OscConfig+0x5ac>
 800150a:	e07f      	b.n	800160c <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800150c:	4b30      	ldr	r3, [pc, #192]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	220c      	movs	r2, #12
 8001512:	4013      	ands	r3, r2
 8001514:	2b08      	cmp	r3, #8
 8001516:	d100      	bne.n	800151a <HAL_RCC_OscConfig+0x5ba>
 8001518:	e076      	b.n	8001608 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151e:	2b02      	cmp	r3, #2
 8001520:	d14b      	bne.n	80015ba <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001522:	4b2b      	ldr	r3, [pc, #172]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001524:	4a2a      	ldr	r2, [pc, #168]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	492d      	ldr	r1, [pc, #180]	; (80015e0 <HAL_RCC_OscConfig+0x680>)
 800152a:	400a      	ands	r2, r1
 800152c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152e:	f7fe feb1 	bl	8000294 <HAL_GetTick>
 8001532:	0003      	movs	r3, r0
 8001534:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001536:	e008      	b.n	800154a <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001538:	f7fe feac 	bl	8000294 <HAL_GetTick>
 800153c:	0002      	movs	r2, r0
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	1ad3      	subs	r3, r2, r3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e061      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800154a:	4b21      	ldr	r3, [pc, #132]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	049b      	lsls	r3, r3, #18
 8001552:	4013      	ands	r3, r2
 8001554:	d1f0      	bne.n	8001538 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001556:	4a1e      	ldr	r2, [pc, #120]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001558:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	210f      	movs	r1, #15
 800155e:	438b      	bics	r3, r1
 8001560:	0019      	movs	r1, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	430b      	orrs	r3, r1
 8001568:	62d3      	str	r3, [r2, #44]	; 0x2c
 800156a:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	491c      	ldr	r1, [pc, #112]	; (80015e4 <HAL_RCC_OscConfig+0x684>)
 8001572:	4019      	ands	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	4303      	orrs	r3, r0
 800157e:	430b      	orrs	r3, r1
 8001580:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001584:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	2180      	movs	r1, #128	; 0x80
 800158a:	0449      	lsls	r1, r1, #17
 800158c:	430a      	orrs	r2, r1
 800158e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001590:	f7fe fe80 	bl	8000294 <HAL_GetTick>
 8001594:	0003      	movs	r3, r0
 8001596:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001598:	e008      	b.n	80015ac <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800159a:	f7fe fe7b 	bl	8000294 <HAL_GetTick>
 800159e:	0002      	movs	r2, r0
 80015a0:	693b      	ldr	r3, [r7, #16]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e030      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	2380      	movs	r3, #128	; 0x80
 80015b2:	049b      	lsls	r3, r3, #18
 80015b4:	4013      	ands	r3, r2
 80015b6:	d0f0      	beq.n	800159a <HAL_RCC_OscConfig+0x63a>
 80015b8:	e028      	b.n	800160c <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_RCC_OscConfig+0x670>)
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	4907      	ldr	r1, [pc, #28]	; (80015e0 <HAL_RCC_OscConfig+0x680>)
 80015c2:	400a      	ands	r2, r1
 80015c4:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c6:	f7fe fe65 	bl	8000294 <HAL_GetTick>
 80015ca:	0003      	movs	r3, r0
 80015cc:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ce:	e014      	b.n	80015fa <HAL_RCC_OscConfig+0x69a>
 80015d0:	40021000 	.word	0x40021000
 80015d4:	00001388 	.word	0x00001388
 80015d8:	efffffff 	.word	0xefffffff
 80015dc:	fffeffff 	.word	0xfffeffff
 80015e0:	feffffff 	.word	0xfeffffff
 80015e4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015e8:	f7fe fe54 	bl	8000294 <HAL_GetTick>
 80015ec:	0002      	movs	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e009      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <HAL_RCC_OscConfig+0x6b8>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	049b      	lsls	r3, r3, #18
 8001602:	4013      	ands	r3, r2
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0x688>
 8001606:	e001      	b.n	800160c <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001608:	2301      	movs	r3, #1
 800160a:	e000      	b.n	800160e <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	0018      	movs	r0, r3
 8001610:	46bd      	mov	sp, r7
 8001612:	b006      	add	sp, #24
 8001614:	bd80      	pop	{r7, pc}
 8001616:	46c0      	nop			; (mov r8, r8)
 8001618:	40021000 	.word	0x40021000

0800161c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800162a:	4b7a      	ldr	r3, [pc, #488]	; (8001814 <HAL_RCC_ClockConfig+0x1f8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2201      	movs	r2, #1
 8001630:	401a      	ands	r2, r3
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	429a      	cmp	r2, r3
 8001636:	d211      	bcs.n	800165c <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001638:	4b76      	ldr	r3, [pc, #472]	; (8001814 <HAL_RCC_ClockConfig+0x1f8>)
 800163a:	4a76      	ldr	r2, [pc, #472]	; (8001814 <HAL_RCC_ClockConfig+0x1f8>)
 800163c:	6812      	ldr	r2, [r2, #0]
 800163e:	2101      	movs	r1, #1
 8001640:	438a      	bics	r2, r1
 8001642:	0011      	movs	r1, r2
 8001644:	683a      	ldr	r2, [r7, #0]
 8001646:	430a      	orrs	r2, r1
 8001648:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800164a:	4b72      	ldr	r3, [pc, #456]	; (8001814 <HAL_RCC_ClockConfig+0x1f8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2201      	movs	r2, #1
 8001650:	401a      	ands	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	429a      	cmp	r2, r3
 8001656:	d001      	beq.n	800165c <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e0d7      	b.n	800180c <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2202      	movs	r2, #2
 8001662:	4013      	ands	r3, r2
 8001664:	d009      	beq.n	800167a <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001666:	4a6c      	ldr	r2, [pc, #432]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 8001668:	4b6b      	ldr	r3, [pc, #428]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	21f0      	movs	r1, #240	; 0xf0
 800166e:	438b      	bics	r3, r1
 8001670:	0019      	movs	r1, r3
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	430b      	orrs	r3, r1
 8001678:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	2201      	movs	r2, #1
 8001680:	4013      	ands	r3, r2
 8001682:	d100      	bne.n	8001686 <HAL_RCC_ClockConfig+0x6a>
 8001684:	e089      	b.n	800179a <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b01      	cmp	r3, #1
 800168c:	d107      	bne.n	800169e <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800168e:	4b62      	ldr	r3, [pc, #392]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	029b      	lsls	r3, r3, #10
 8001696:	4013      	ands	r3, r2
 8001698:	d120      	bne.n	80016dc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	e0b6      	b.n	800180c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d107      	bne.n	80016b6 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016a6:	4b5c      	ldr	r3, [pc, #368]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	049b      	lsls	r3, r3, #18
 80016ae:	4013      	ands	r3, r2
 80016b0:	d114      	bne.n	80016dc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0aa      	b.n	800180c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	2b03      	cmp	r3, #3
 80016bc:	d107      	bne.n	80016ce <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80016be:	4b56      	ldr	r3, [pc, #344]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 80016c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	025b      	lsls	r3, r3, #9
 80016c6:	4013      	ands	r3, r2
 80016c8:	d108      	bne.n	80016dc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e09e      	b.n	800180c <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ce:	4b52      	ldr	r3, [pc, #328]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2202      	movs	r2, #2
 80016d4:	4013      	ands	r3, r2
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e097      	b.n	800180c <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016dc:	4a4e      	ldr	r2, [pc, #312]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 80016de:	4b4e      	ldr	r3, [pc, #312]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2103      	movs	r1, #3
 80016e4:	438b      	bics	r3, r1
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016f0:	f7fe fdd0 	bl	8000294 <HAL_GetTick>
 80016f4:	0003      	movs	r3, r0
 80016f6:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d111      	bne.n	8001724 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001700:	e009      	b.n	8001716 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001702:	f7fe fdc7 	bl	8000294 <HAL_GetTick>
 8001706:	0002      	movs	r2, r0
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	4a43      	ldr	r2, [pc, #268]	; (800181c <HAL_RCC_ClockConfig+0x200>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d901      	bls.n	8001716 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e07a      	b.n	800180c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001716:	4b40      	ldr	r3, [pc, #256]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	220c      	movs	r2, #12
 800171c:	4013      	ands	r3, r2
 800171e:	2b04      	cmp	r3, #4
 8001720:	d1ef      	bne.n	8001702 <HAL_RCC_ClockConfig+0xe6>
 8001722:	e03a      	b.n	800179a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	2b02      	cmp	r3, #2
 800172a:	d111      	bne.n	8001750 <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800172c:	e009      	b.n	8001742 <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800172e:	f7fe fdb1 	bl	8000294 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	4a38      	ldr	r2, [pc, #224]	; (800181c <HAL_RCC_ClockConfig+0x200>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d901      	bls.n	8001742 <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800173e:	2303      	movs	r3, #3
 8001740:	e064      	b.n	800180c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001742:	4b35      	ldr	r3, [pc, #212]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	220c      	movs	r2, #12
 8001748:	4013      	ands	r3, r2
 800174a:	2b08      	cmp	r3, #8
 800174c:	d1ef      	bne.n	800172e <HAL_RCC_ClockConfig+0x112>
 800174e:	e024      	b.n	800179a <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d11b      	bne.n	8001790 <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 8001758:	e009      	b.n	800176e <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800175a:	f7fe fd9b 	bl	8000294 <HAL_GetTick>
 800175e:	0002      	movs	r2, r0
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	1ad3      	subs	r3, r2, r3
 8001764:	4a2d      	ldr	r2, [pc, #180]	; (800181c <HAL_RCC_ClockConfig+0x200>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d901      	bls.n	800176e <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e04e      	b.n	800180c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 800176e:	4b2a      	ldr	r3, [pc, #168]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	220c      	movs	r2, #12
 8001774:	4013      	ands	r3, r2
 8001776:	2b0c      	cmp	r3, #12
 8001778:	d1ef      	bne.n	800175a <HAL_RCC_ClockConfig+0x13e>
 800177a:	e00e      	b.n	800179a <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800177c:	f7fe fd8a 	bl	8000294 <HAL_GetTick>
 8001780:	0002      	movs	r2, r0
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	4a25      	ldr	r2, [pc, #148]	; (800181c <HAL_RCC_ClockConfig+0x200>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d901      	bls.n	8001790 <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 800178c:	2303      	movs	r3, #3
 800178e:	e03d      	b.n	800180c <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	220c      	movs	r2, #12
 8001796:	4013      	ands	r3, r2
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800179a:	4b1e      	ldr	r3, [pc, #120]	; (8001814 <HAL_RCC_ClockConfig+0x1f8>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	2201      	movs	r2, #1
 80017a0:	401a      	ands	r2, r3
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d911      	bls.n	80017cc <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a8:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <HAL_RCC_ClockConfig+0x1f8>)
 80017aa:	4a1a      	ldr	r2, [pc, #104]	; (8001814 <HAL_RCC_ClockConfig+0x1f8>)
 80017ac:	6812      	ldr	r2, [r2, #0]
 80017ae:	2101      	movs	r1, #1
 80017b0:	438a      	bics	r2, r1
 80017b2:	0011      	movs	r1, r2
 80017b4:	683a      	ldr	r2, [r7, #0]
 80017b6:	430a      	orrs	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <HAL_RCC_ClockConfig+0x1f8>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2201      	movs	r2, #1
 80017c0:	401a      	ands	r2, r3
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e01f      	b.n	800180c <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2204      	movs	r2, #4
 80017d2:	4013      	ands	r3, r2
 80017d4:	d008      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017d6:	4a10      	ldr	r2, [pc, #64]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 80017d8:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4910      	ldr	r1, [pc, #64]	; (8001820 <HAL_RCC_ClockConfig+0x204>)
 80017de:	4019      	ands	r1, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80017e8:	f000 f820 	bl	800182c <HAL_RCC_GetSysClockFreq>
 80017ec:	0001      	movs	r1, r0
 80017ee:	4b0a      	ldr	r3, [pc, #40]	; (8001818 <HAL_RCC_ClockConfig+0x1fc>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	220f      	movs	r2, #15
 80017f6:	4013      	ands	r3, r2
 80017f8:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_RCC_ClockConfig+0x208>)
 80017fa:	5cd3      	ldrb	r3, [r2, r3]
 80017fc:	000a      	movs	r2, r1
 80017fe:	40da      	lsrs	r2, r3
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x20c>)
 8001802:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001804:	2000      	movs	r0, #0
 8001806:	f7fe fd1d 	bl	8000244 <HAL_InitTick>
  
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
}
 800180c:	0018      	movs	r0, r3
 800180e:	46bd      	mov	sp, r7
 8001810:	b004      	add	sp, #16
 8001812:	bd80      	pop	{r7, pc}
 8001814:	40022000 	.word	0x40022000
 8001818:	40021000 	.word	0x40021000
 800181c:	00001388 	.word	0x00001388
 8001820:	fffff8ff 	.word	0xfffff8ff
 8001824:	0800297c 	.word	0x0800297c
 8001828:	20000000 	.word	0x20000000

0800182c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800182c:	b590      	push	{r4, r7, lr}
 800182e:	b08f      	sub	sp, #60	; 0x3c
 8001830:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001832:	2314      	movs	r3, #20
 8001834:	18fb      	adds	r3, r7, r3
 8001836:	4a37      	ldr	r2, [pc, #220]	; (8001914 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001838:	ca13      	ldmia	r2!, {r0, r1, r4}
 800183a:	c313      	stmia	r3!, {r0, r1, r4}
 800183c:	6812      	ldr	r2, [r2, #0]
 800183e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	4a35      	ldr	r2, [pc, #212]	; (8001918 <HAL_RCC_GetSysClockFreq+0xec>)
 8001844:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001846:	c313      	stmia	r3!, {r0, r1, r4}
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001850:	2300      	movs	r3, #0
 8001852:	62bb      	str	r3, [r7, #40]	; 0x28
 8001854:	2300      	movs	r3, #0
 8001856:	637b      	str	r3, [r7, #52]	; 0x34
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800185c:	2300      	movs	r3, #0
 800185e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001860:	4b2e      	ldr	r3, [pc, #184]	; (800191c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001868:	220c      	movs	r2, #12
 800186a:	4013      	ands	r3, r2
 800186c:	2b08      	cmp	r3, #8
 800186e:	d006      	beq.n	800187e <HAL_RCC_GetSysClockFreq+0x52>
 8001870:	2b0c      	cmp	r3, #12
 8001872:	d043      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0xd0>
 8001874:	2b04      	cmp	r3, #4
 8001876:	d144      	bne.n	8001902 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001878:	4b29      	ldr	r3, [pc, #164]	; (8001920 <HAL_RCC_GetSysClockFreq+0xf4>)
 800187a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800187c:	e044      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800187e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001880:	0c9b      	lsrs	r3, r3, #18
 8001882:	220f      	movs	r2, #15
 8001884:	4013      	ands	r3, r2
 8001886:	2214      	movs	r2, #20
 8001888:	18ba      	adds	r2, r7, r2
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800188e:	4b23      	ldr	r3, [pc, #140]	; (800191c <HAL_RCC_GetSysClockFreq+0xf0>)
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	220f      	movs	r2, #15
 8001894:	4013      	ands	r3, r2
 8001896:	1d3a      	adds	r2, r7, #4
 8001898:	5cd3      	ldrb	r3, [r2, r3]
 800189a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800189c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800189e:	23c0      	movs	r3, #192	; 0xc0
 80018a0:	025b      	lsls	r3, r3, #9
 80018a2:	401a      	ands	r2, r3
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	025b      	lsls	r3, r3, #9
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d109      	bne.n	80018c0 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80018ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018ae:	481c      	ldr	r0, [pc, #112]	; (8001920 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018b0:	f7fe fc28 	bl	8000104 <__udivsi3>
 80018b4:	0003      	movs	r3, r0
 80018b6:	001a      	movs	r2, r3
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	4353      	muls	r3, r2
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34
 80018be:	e01a      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80018c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018c2:	23c0      	movs	r3, #192	; 0xc0
 80018c4:	025b      	lsls	r3, r3, #9
 80018c6:	401a      	ands	r2, r3
 80018c8:	23c0      	movs	r3, #192	; 0xc0
 80018ca:	025b      	lsls	r3, r3, #9
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d109      	bne.n	80018e4 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 80018d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018d2:	4814      	ldr	r0, [pc, #80]	; (8001924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018d4:	f7fe fc16 	bl	8000104 <__udivsi3>
 80018d8:	0003      	movs	r3, r0
 80018da:	001a      	movs	r2, r3
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	4353      	muls	r3, r2
 80018e0:	637b      	str	r3, [r7, #52]	; 0x34
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 80018e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80018e6:	480e      	ldr	r0, [pc, #56]	; (8001920 <HAL_RCC_GetSysClockFreq+0xf4>)
 80018e8:	f7fe fc0c 	bl	8000104 <__udivsi3>
 80018ec:	0003      	movs	r3, r0
 80018ee:	001a      	movs	r2, r3
 80018f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f2:	4353      	muls	r3, r2
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 80018f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80018fa:	e005      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80018fc:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_RCC_GetSysClockFreq+0xf8>)
 80018fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001900:	e002      	b.n	8001908 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001902:	4b07      	ldr	r3, [pc, #28]	; (8001920 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001904:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001906:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	b00f      	add	sp, #60	; 0x3c
 8001910:	bd90      	pop	{r4, r7, pc}
 8001912:	46c0      	nop			; (mov r8, r8)
 8001914:	0800295c 	.word	0x0800295c
 8001918:	0800296c 	.word	0x0800296c
 800191c:	40021000 	.word	0x40021000
 8001920:	007a1200 	.word	0x007a1200
 8001924:	02dc6c00 	.word	0x02dc6c00

08001928 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800192c:	4b02      	ldr	r3, [pc, #8]	; (8001938 <HAL_RCC_GetHCLKFreq+0x10>)
 800192e:	681b      	ldr	r3, [r3, #0]
}
 8001930:	0018      	movs	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	46c0      	nop			; (mov r8, r8)
 8001938:	20000000 	.word	0x20000000

0800193c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001940:	f7ff fff2 	bl	8001928 <HAL_RCC_GetHCLKFreq>
 8001944:	0001      	movs	r1, r0
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	0a1b      	lsrs	r3, r3, #8
 800194c:	2207      	movs	r2, #7
 800194e:	4013      	ands	r3, r2
 8001950:	4a04      	ldr	r2, [pc, #16]	; (8001964 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001952:	5cd3      	ldrb	r3, [r2, r3]
 8001954:	40d9      	lsrs	r1, r3
 8001956:	000b      	movs	r3, r1
}    
 8001958:	0018      	movs	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	46c0      	nop			; (mov r8, r8)
 8001960:	40021000 	.word	0x40021000
 8001964:	0800298c 	.word	0x0800298c

08001968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	2380      	movs	r3, #128	; 0x80
 800197e:	025b      	lsls	r3, r3, #9
 8001980:	4013      	ands	r3, r2
 8001982:	d100      	bne.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001984:	e08e      	b.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001986:	2317      	movs	r3, #23
 8001988:	18fb      	adds	r3, r7, r3
 800198a:	2200      	movs	r2, #0
 800198c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800198e:	4b6d      	ldr	r3, [pc, #436]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001990:	69da      	ldr	r2, [r3, #28]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	055b      	lsls	r3, r3, #21
 8001996:	4013      	ands	r3, r2
 8001998:	d111      	bne.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800199a:	4b6a      	ldr	r3, [pc, #424]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800199c:	4a69      	ldr	r2, [pc, #420]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800199e:	69d2      	ldr	r2, [r2, #28]
 80019a0:	2180      	movs	r1, #128	; 0x80
 80019a2:	0549      	lsls	r1, r1, #21
 80019a4:	430a      	orrs	r2, r1
 80019a6:	61da      	str	r2, [r3, #28]
 80019a8:	4b66      	ldr	r3, [pc, #408]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80019aa:	69da      	ldr	r2, [r3, #28]
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	055b      	lsls	r3, r3, #21
 80019b0:	4013      	ands	r3, r2
 80019b2:	60bb      	str	r3, [r7, #8]
 80019b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019b6:	2317      	movs	r3, #23
 80019b8:	18fb      	adds	r3, r7, r3
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019be:	4b62      	ldr	r3, [pc, #392]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	2380      	movs	r3, #128	; 0x80
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	d11a      	bne.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019ca:	4b5f      	ldr	r3, [pc, #380]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019cc:	4a5e      	ldr	r2, [pc, #376]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	2180      	movs	r1, #128	; 0x80
 80019d2:	0049      	lsls	r1, r1, #1
 80019d4:	430a      	orrs	r2, r1
 80019d6:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019d8:	f7fe fc5c 	bl	8000294 <HAL_GetTick>
 80019dc:	0003      	movs	r3, r0
 80019de:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019e0:	e008      	b.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019e2:	f7fe fc57 	bl	8000294 <HAL_GetTick>
 80019e6:	0002      	movs	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b64      	cmp	r3, #100	; 0x64
 80019ee:	d901      	bls.n	80019f4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e0a3      	b.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f4:	4b54      	ldr	r3, [pc, #336]	; (8001b48 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	; 0x80
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4013      	ands	r3, r2
 80019fe:	d0f0      	beq.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a00:	4b50      	ldr	r3, [pc, #320]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a02:	6a1a      	ldr	r2, [r3, #32]
 8001a04:	23c0      	movs	r3, #192	; 0xc0
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	4013      	ands	r3, r2
 8001a0a:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d034      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685a      	ldr	r2, [r3, #4]
 8001a16:	23c0      	movs	r3, #192	; 0xc0
 8001a18:	009b      	lsls	r3, r3, #2
 8001a1a:	401a      	ands	r2, r3
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d02c      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a22:	4b48      	ldr	r3, [pc, #288]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a49      	ldr	r2, [pc, #292]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a28:	4013      	ands	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a2c:	4b45      	ldr	r3, [pc, #276]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a2e:	4a45      	ldr	r2, [pc, #276]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a30:	6a12      	ldr	r2, [r2, #32]
 8001a32:	2180      	movs	r1, #128	; 0x80
 8001a34:	0249      	lsls	r1, r1, #9
 8001a36:	430a      	orrs	r2, r1
 8001a38:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a3a:	4b42      	ldr	r3, [pc, #264]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a3c:	4a41      	ldr	r2, [pc, #260]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a3e:	6a12      	ldr	r2, [r2, #32]
 8001a40:	4943      	ldr	r1, [pc, #268]	; (8001b50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001a42:	400a      	ands	r2, r1
 8001a44:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001a46:	4b3f      	ldr	r3, [pc, #252]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a48:	68fa      	ldr	r2, [r7, #12]
 8001a4a:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4013      	ands	r3, r2
 8001a52:	d013      	beq.n	8001a7c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7fe fc1e 	bl	8000294 <HAL_GetTick>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5c:	e009      	b.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5e:	f7fe fc19 	bl	8000294 <HAL_GetTick>
 8001a62:	0002      	movs	r2, r0
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	1ad3      	subs	r3, r2, r3
 8001a68:	4a3a      	ldr	r2, [pc, #232]	; (8001b54 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e064      	b.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a72:	4b34      	ldr	r3, [pc, #208]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	2202      	movs	r2, #2
 8001a78:	4013      	ands	r3, r2
 8001a7a:	d0f0      	beq.n	8001a5e <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001a7c:	4a31      	ldr	r2, [pc, #196]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a7e:	4b31      	ldr	r3, [pc, #196]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a80:	6a1b      	ldr	r3, [r3, #32]
 8001a82:	4932      	ldr	r1, [pc, #200]	; (8001b4c <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001a84:	4019      	ands	r1, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001a8e:	2317      	movs	r3, #23
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	781b      	ldrb	r3, [r3, #0]
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d105      	bne.n	8001aa4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a98:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a9a:	4a2a      	ldr	r2, [pc, #168]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001a9c:	69d2      	ldr	r2, [r2, #28]
 8001a9e:	492e      	ldr	r1, [pc, #184]	; (8001b58 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	4013      	ands	r3, r2
 8001aac:	d009      	beq.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001aae:	4a25      	ldr	r2, [pc, #148]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	2103      	movs	r1, #3
 8001ab6:	438b      	bics	r3, r1
 8001ab8:	0019      	movs	r1, r3
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	430b      	orrs	r3, r1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2202      	movs	r2, #2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	d008      	beq.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001acc:	4a1d      	ldr	r2, [pc, #116]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001ace:	4b1d      	ldr	r3, [pc, #116]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	4922      	ldr	r1, [pc, #136]	; (8001b5c <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001ad4:	4019      	ands	r1, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	430b      	orrs	r3, r1
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	2380      	movs	r3, #128	; 0x80
 8001ae4:	02db      	lsls	r3, r3, #11
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	d008      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001aea:	4a16      	ldr	r2, [pc, #88]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001aec:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	491b      	ldr	r1, [pc, #108]	; (8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af2:	4019      	ands	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	691b      	ldr	r3, [r3, #16]
 8001af8:	430b      	orrs	r3, r1
 8001afa:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2220      	movs	r2, #32
 8001b02:	4013      	ands	r3, r2
 8001b04:	d009      	beq.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b06:	4a0f      	ldr	r2, [pc, #60]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001b08:	4b0e      	ldr	r3, [pc, #56]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0c:	2110      	movs	r1, #16
 8001b0e:	438b      	bics	r3, r1
 8001b10:	0019      	movs	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	430b      	orrs	r3, r1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	2380      	movs	r3, #128	; 0x80
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4013      	ands	r3, r2
 8001b24:	d009      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b26:	4a07      	ldr	r2, [pc, #28]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001b28:	4b06      	ldr	r3, [pc, #24]	; (8001b44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8001b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2c:	2140      	movs	r1, #64	; 0x40
 8001b2e:	438b      	bics	r3, r1
 8001b30:	0019      	movs	r1, r3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	699b      	ldr	r3, [r3, #24]
 8001b36:	430b      	orrs	r3, r1
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b006      	add	sp, #24
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	fffffcff 	.word	0xfffffcff
 8001b50:	fffeffff 	.word	0xfffeffff
 8001b54:	00001388 	.word	0x00001388
 8001b58:	efffffff 	.word	0xefffffff
 8001b5c:	fffcffff 	.word	0xfffcffff
 8001b60:	fff3ffff 	.word	0xfff3ffff

08001b64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b082      	sub	sp, #8
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d101      	bne.n	8001b76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
 8001b74:	e047      	b.n	8001c06 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2269      	movs	r2, #105	; 0x69
 8001b7a:	5c9b      	ldrb	r3, [r3, r2]
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d107      	bne.n	8001b92 <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2268      	movs	r2, #104	; 0x68
 8001b86:	2100      	movs	r1, #0
 8001b88:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	0018      	movs	r0, r3
 8001b8e:	f000 fdd3 	bl	8002738 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2269      	movs	r2, #105	; 0x69
 8001b96:	2124      	movs	r1, #36	; 0x24
 8001b98:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	6812      	ldr	r2, [r2, #0]
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	438a      	bics	r2, r1
 8001ba8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	0018      	movs	r0, r3
 8001bae:	f000 f831 	bl	8001c14 <UART_SetConfig>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e024      	b.n	8001c06 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d003      	beq.n	8001bcc <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	0018      	movs	r0, r3
 8001bc8:	f000 fa40 	bl	800204c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	6852      	ldr	r2, [r2, #4]
 8001bd6:	490e      	ldr	r1, [pc, #56]	; (8001c10 <HAL_UART_Init+0xac>)
 8001bd8:	400a      	ands	r2, r1
 8001bda:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6812      	ldr	r2, [r2, #0]
 8001be4:	6892      	ldr	r2, [r2, #8]
 8001be6:	212a      	movs	r1, #42	; 0x2a
 8001be8:	438a      	bics	r2, r1
 8001bea:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f000 fad0 	bl	80021a4 <UART_CheckIdleState>
 8001c04:	0003      	movs	r3, r0
}
 8001c06:	0018      	movs	r0, r3
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	b002      	add	sp, #8
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	ffffb7ff 	.word	0xffffb7ff

08001c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c14:	b590      	push	{r4, r7, lr}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001c20:	2317      	movs	r3, #23
 8001c22:	18fb      	adds	r3, r7, r3
 8001c24:	2210      	movs	r2, #16
 8001c26:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8001c28:	230a      	movs	r3, #10
 8001c2a:	18fb      	adds	r3, r7, r3
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 8001c30:	2314      	movs	r3, #20
 8001c32:	18fb      	adds	r3, r7, r3
 8001c34:	2200      	movs	r2, #0
 8001c36:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c38:	2313      	movs	r3, #19
 8001c3a:	18fb      	adds	r3, r7, r3
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689a      	ldr	r2, [r3, #8]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	431a      	orrs	r2, r3
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69db      	ldr	r3, [r3, #28]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6812      	ldr	r2, [r2, #0]
 8001c60:	6812      	ldr	r2, [r2, #0]
 8001c62:	49c1      	ldr	r1, [pc, #772]	; (8001f68 <UART_SetConfig+0x354>)
 8001c64:	4011      	ands	r1, r2
 8001c66:	68fa      	ldr	r2, [r7, #12]
 8001c68:	430a      	orrs	r2, r1
 8001c6a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6812      	ldr	r2, [r2, #0]
 8001c74:	6852      	ldr	r2, [r2, #4]
 8001c76:	49bd      	ldr	r1, [pc, #756]	; (8001f6c <UART_SetConfig+0x358>)
 8001c78:	4011      	ands	r1, r2
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68d2      	ldr	r2, [r2, #12]
 8001c7e:	430a      	orrs	r2, r1
 8001c80:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	699a      	ldr	r2, [r3, #24]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a1b      	ldr	r3, [r3, #32]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	6892      	ldr	r2, [r2, #8]
 8001c98:	49b5      	ldr	r1, [pc, #724]	; (8001f70 <UART_SetConfig+0x35c>)
 8001c9a:	4011      	ands	r1, r2
 8001c9c:	68fa      	ldr	r2, [r7, #12]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4ab3      	ldr	r2, [pc, #716]	; (8001f74 <UART_SetConfig+0x360>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d125      	bne.n	8001cf8 <UART_SetConfig+0xe4>
 8001cac:	4bb2      	ldr	r3, [pc, #712]	; (8001f78 <UART_SetConfig+0x364>)
 8001cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d00f      	beq.n	8001cd8 <UART_SetConfig+0xc4>
 8001cb8:	d304      	bcc.n	8001cc4 <UART_SetConfig+0xb0>
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d011      	beq.n	8001ce2 <UART_SetConfig+0xce>
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d005      	beq.n	8001cce <UART_SetConfig+0xba>
 8001cc2:	e013      	b.n	8001cec <UART_SetConfig+0xd8>
 8001cc4:	2317      	movs	r3, #23
 8001cc6:	18fb      	adds	r3, r7, r3
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	e0ba      	b.n	8001e44 <UART_SetConfig+0x230>
 8001cce:	2317      	movs	r3, #23
 8001cd0:	18fb      	adds	r3, r7, r3
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	701a      	strb	r2, [r3, #0]
 8001cd6:	e0b5      	b.n	8001e44 <UART_SetConfig+0x230>
 8001cd8:	2317      	movs	r3, #23
 8001cda:	18fb      	adds	r3, r7, r3
 8001cdc:	2204      	movs	r2, #4
 8001cde:	701a      	strb	r2, [r3, #0]
 8001ce0:	e0b0      	b.n	8001e44 <UART_SetConfig+0x230>
 8001ce2:	2317      	movs	r3, #23
 8001ce4:	18fb      	adds	r3, r7, r3
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	701a      	strb	r2, [r3, #0]
 8001cea:	e0ab      	b.n	8001e44 <UART_SetConfig+0x230>
 8001cec:	2317      	movs	r3, #23
 8001cee:	18fb      	adds	r3, r7, r3
 8001cf0:	2210      	movs	r2, #16
 8001cf2:	701a      	strb	r2, [r3, #0]
 8001cf4:	46c0      	nop			; (mov r8, r8)
 8001cf6:	e0a5      	b.n	8001e44 <UART_SetConfig+0x230>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a9f      	ldr	r2, [pc, #636]	; (8001f7c <UART_SetConfig+0x368>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d132      	bne.n	8001d68 <UART_SetConfig+0x154>
 8001d02:	4b9d      	ldr	r3, [pc, #628]	; (8001f78 <UART_SetConfig+0x364>)
 8001d04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d06:	23c0      	movs	r3, #192	; 0xc0
 8001d08:	029b      	lsls	r3, r3, #10
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	2280      	movs	r2, #128	; 0x80
 8001d0e:	0252      	lsls	r2, r2, #9
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d019      	beq.n	8001d48 <UART_SetConfig+0x134>
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	0252      	lsls	r2, r2, #9
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d802      	bhi.n	8001d22 <UART_SetConfig+0x10e>
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d009      	beq.n	8001d34 <UART_SetConfig+0x120>
 8001d20:	e01c      	b.n	8001d5c <UART_SetConfig+0x148>
 8001d22:	2280      	movs	r2, #128	; 0x80
 8001d24:	0292      	lsls	r2, r2, #10
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <UART_SetConfig+0x13e>
 8001d2a:	22c0      	movs	r2, #192	; 0xc0
 8001d2c:	0292      	lsls	r2, r2, #10
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d005      	beq.n	8001d3e <UART_SetConfig+0x12a>
 8001d32:	e013      	b.n	8001d5c <UART_SetConfig+0x148>
 8001d34:	2317      	movs	r3, #23
 8001d36:	18fb      	adds	r3, r7, r3
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
 8001d3c:	e082      	b.n	8001e44 <UART_SetConfig+0x230>
 8001d3e:	2317      	movs	r3, #23
 8001d40:	18fb      	adds	r3, r7, r3
 8001d42:	2202      	movs	r2, #2
 8001d44:	701a      	strb	r2, [r3, #0]
 8001d46:	e07d      	b.n	8001e44 <UART_SetConfig+0x230>
 8001d48:	2317      	movs	r3, #23
 8001d4a:	18fb      	adds	r3, r7, r3
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	701a      	strb	r2, [r3, #0]
 8001d50:	e078      	b.n	8001e44 <UART_SetConfig+0x230>
 8001d52:	2317      	movs	r3, #23
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	2208      	movs	r2, #8
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e073      	b.n	8001e44 <UART_SetConfig+0x230>
 8001d5c:	2317      	movs	r3, #23
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	2210      	movs	r2, #16
 8001d62:	701a      	strb	r2, [r3, #0]
 8001d64:	46c0      	nop			; (mov r8, r8)
 8001d66:	e06d      	b.n	8001e44 <UART_SetConfig+0x230>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a84      	ldr	r2, [pc, #528]	; (8001f80 <UART_SetConfig+0x36c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d132      	bne.n	8001dd8 <UART_SetConfig+0x1c4>
 8001d72:	4b81      	ldr	r3, [pc, #516]	; (8001f78 <UART_SetConfig+0x364>)
 8001d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d76:	23c0      	movs	r3, #192	; 0xc0
 8001d78:	031b      	lsls	r3, r3, #12
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2280      	movs	r2, #128	; 0x80
 8001d7e:	02d2      	lsls	r2, r2, #11
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d019      	beq.n	8001db8 <UART_SetConfig+0x1a4>
 8001d84:	2280      	movs	r2, #128	; 0x80
 8001d86:	02d2      	lsls	r2, r2, #11
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d802      	bhi.n	8001d92 <UART_SetConfig+0x17e>
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d009      	beq.n	8001da4 <UART_SetConfig+0x190>
 8001d90:	e01c      	b.n	8001dcc <UART_SetConfig+0x1b8>
 8001d92:	2280      	movs	r2, #128	; 0x80
 8001d94:	0312      	lsls	r2, r2, #12
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d013      	beq.n	8001dc2 <UART_SetConfig+0x1ae>
 8001d9a:	22c0      	movs	r2, #192	; 0xc0
 8001d9c:	0312      	lsls	r2, r2, #12
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d005      	beq.n	8001dae <UART_SetConfig+0x19a>
 8001da2:	e013      	b.n	8001dcc <UART_SetConfig+0x1b8>
 8001da4:	2317      	movs	r3, #23
 8001da6:	18fb      	adds	r3, r7, r3
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
 8001dac:	e04a      	b.n	8001e44 <UART_SetConfig+0x230>
 8001dae:	2317      	movs	r3, #23
 8001db0:	18fb      	adds	r3, r7, r3
 8001db2:	2202      	movs	r2, #2
 8001db4:	701a      	strb	r2, [r3, #0]
 8001db6:	e045      	b.n	8001e44 <UART_SetConfig+0x230>
 8001db8:	2317      	movs	r3, #23
 8001dba:	18fb      	adds	r3, r7, r3
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	701a      	strb	r2, [r3, #0]
 8001dc0:	e040      	b.n	8001e44 <UART_SetConfig+0x230>
 8001dc2:	2317      	movs	r3, #23
 8001dc4:	18fb      	adds	r3, r7, r3
 8001dc6:	2208      	movs	r2, #8
 8001dc8:	701a      	strb	r2, [r3, #0]
 8001dca:	e03b      	b.n	8001e44 <UART_SetConfig+0x230>
 8001dcc:	2317      	movs	r3, #23
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	e035      	b.n	8001e44 <UART_SetConfig+0x230>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a69      	ldr	r2, [pc, #420]	; (8001f84 <UART_SetConfig+0x370>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d104      	bne.n	8001dec <UART_SetConfig+0x1d8>
 8001de2:	2317      	movs	r3, #23
 8001de4:	18fb      	adds	r3, r7, r3
 8001de6:	2200      	movs	r2, #0
 8001de8:	701a      	strb	r2, [r3, #0]
 8001dea:	e02b      	b.n	8001e44 <UART_SetConfig+0x230>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a65      	ldr	r2, [pc, #404]	; (8001f88 <UART_SetConfig+0x374>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d104      	bne.n	8001e00 <UART_SetConfig+0x1ec>
 8001df6:	2317      	movs	r3, #23
 8001df8:	18fb      	adds	r3, r7, r3
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	701a      	strb	r2, [r3, #0]
 8001dfe:	e021      	b.n	8001e44 <UART_SetConfig+0x230>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a61      	ldr	r2, [pc, #388]	; (8001f8c <UART_SetConfig+0x378>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d104      	bne.n	8001e14 <UART_SetConfig+0x200>
 8001e0a:	2317      	movs	r3, #23
 8001e0c:	18fb      	adds	r3, r7, r3
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
 8001e12:	e017      	b.n	8001e44 <UART_SetConfig+0x230>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a5d      	ldr	r2, [pc, #372]	; (8001f90 <UART_SetConfig+0x37c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d104      	bne.n	8001e28 <UART_SetConfig+0x214>
 8001e1e:	2317      	movs	r3, #23
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	2200      	movs	r2, #0
 8001e24:	701a      	strb	r2, [r3, #0]
 8001e26:	e00d      	b.n	8001e44 <UART_SetConfig+0x230>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a59      	ldr	r2, [pc, #356]	; (8001f94 <UART_SetConfig+0x380>)
 8001e2e:	4293      	cmp	r3, r2
 8001e30:	d104      	bne.n	8001e3c <UART_SetConfig+0x228>
 8001e32:	2317      	movs	r3, #23
 8001e34:	18fb      	adds	r3, r7, r3
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	e003      	b.n	8001e44 <UART_SetConfig+0x230>
 8001e3c:	2317      	movs	r3, #23
 8001e3e:	18fb      	adds	r3, r7, r3
 8001e40:	2210      	movs	r2, #16
 8001e42:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	69da      	ldr	r2, [r3, #28]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d000      	beq.n	8001e52 <UART_SetConfig+0x23e>
 8001e50:	e07b      	b.n	8001f4a <UART_SetConfig+0x336>
  {
    switch (clocksource)
 8001e52:	2317      	movs	r3, #23
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b02      	cmp	r3, #2
 8001e5a:	d01c      	beq.n	8001e96 <UART_SetConfig+0x282>
 8001e5c:	dc02      	bgt.n	8001e64 <UART_SetConfig+0x250>
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d005      	beq.n	8001e6e <UART_SetConfig+0x25a>
 8001e62:	e04f      	b.n	8001f04 <UART_SetConfig+0x2f0>
 8001e64:	2b04      	cmp	r3, #4
 8001e66:	d027      	beq.n	8001eb8 <UART_SetConfig+0x2a4>
 8001e68:	2b08      	cmp	r3, #8
 8001e6a:	d039      	beq.n	8001ee0 <UART_SetConfig+0x2cc>
 8001e6c:	e04a      	b.n	8001f04 <UART_SetConfig+0x2f0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e6e:	f7ff fd65 	bl	800193c <HAL_RCC_GetPCLK1Freq>
 8001e72:	0003      	movs	r3, r0
 8001e74:	005a      	lsls	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	085b      	lsrs	r3, r3, #1
 8001e7c:	18d2      	adds	r2, r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	0019      	movs	r1, r3
 8001e84:	0010      	movs	r0, r2
 8001e86:	f7fe f93d 	bl	8000104 <__udivsi3>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	001a      	movs	r2, r3
 8001e8e:	2314      	movs	r3, #20
 8001e90:	18fb      	adds	r3, r7, r3
 8001e92:	801a      	strh	r2, [r3, #0]
        break;
 8001e94:	e03b      	b.n	8001f0e <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	085b      	lsrs	r3, r3, #1
 8001e9c:	4a3e      	ldr	r2, [pc, #248]	; (8001f98 <UART_SetConfig+0x384>)
 8001e9e:	189a      	adds	r2, r3, r2
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	0019      	movs	r1, r3
 8001ea6:	0010      	movs	r0, r2
 8001ea8:	f7fe f92c 	bl	8000104 <__udivsi3>
 8001eac:	0003      	movs	r3, r0
 8001eae:	001a      	movs	r2, r3
 8001eb0:	2314      	movs	r3, #20
 8001eb2:	18fb      	adds	r3, r7, r3
 8001eb4:	801a      	strh	r2, [r3, #0]
        break;
 8001eb6:	e02a      	b.n	8001f0e <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001eb8:	f7ff fcb8 	bl	800182c <HAL_RCC_GetSysClockFreq>
 8001ebc:	0003      	movs	r3, r0
 8001ebe:	005a      	lsls	r2, r3, #1
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	18d2      	adds	r2, r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	0019      	movs	r1, r3
 8001ece:	0010      	movs	r0, r2
 8001ed0:	f7fe f918 	bl	8000104 <__udivsi3>
 8001ed4:	0003      	movs	r3, r0
 8001ed6:	001a      	movs	r2, r3
 8001ed8:	2314      	movs	r3, #20
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	801a      	strh	r2, [r3, #0]
        break;
 8001ede:	e016      	b.n	8001f0e <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	2280      	movs	r2, #128	; 0x80
 8001ee8:	0252      	lsls	r2, r2, #9
 8001eea:	189a      	adds	r2, r3, r2
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	0019      	movs	r1, r3
 8001ef2:	0010      	movs	r0, r2
 8001ef4:	f7fe f906 	bl	8000104 <__udivsi3>
 8001ef8:	0003      	movs	r3, r0
 8001efa:	001a      	movs	r2, r3
 8001efc:	2314      	movs	r3, #20
 8001efe:	18fb      	adds	r3, r7, r3
 8001f00:	801a      	strh	r2, [r3, #0]
        break;
 8001f02:	e004      	b.n	8001f0e <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001f04:	2313      	movs	r3, #19
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	2201      	movs	r2, #1
 8001f0a:	701a      	strb	r2, [r3, #0]
        break;
 8001f0c:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001f0e:	230a      	movs	r3, #10
 8001f10:	18fb      	adds	r3, r7, r3
 8001f12:	2214      	movs	r2, #20
 8001f14:	18ba      	adds	r2, r7, r2
 8001f16:	8812      	ldrh	r2, [r2, #0]
 8001f18:	210f      	movs	r1, #15
 8001f1a:	438a      	bics	r2, r1
 8001f1c:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001f1e:	2314      	movs	r3, #20
 8001f20:	18fb      	adds	r3, r7, r3
 8001f22:	881b      	ldrh	r3, [r3, #0]
 8001f24:	105b      	asrs	r3, r3, #1
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	2207      	movs	r2, #7
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	b299      	uxth	r1, r3
 8001f2e:	230a      	movs	r3, #10
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	220a      	movs	r2, #10
 8001f34:	18ba      	adds	r2, r7, r2
 8001f36:	8812      	ldrh	r2, [r2, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	220a      	movs	r2, #10
 8001f42:	18ba      	adds	r2, r7, r2
 8001f44:	8812      	ldrh	r2, [r2, #0]
 8001f46:	60da      	str	r2, [r3, #12]
 8001f48:	e076      	b.n	8002038 <UART_SetConfig+0x424>
  }
  else
  {
    switch (clocksource)
 8001f4a:	2317      	movs	r3, #23
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2b02      	cmp	r3, #2
 8001f52:	d036      	beq.n	8001fc2 <UART_SetConfig+0x3ae>
 8001f54:	dc02      	bgt.n	8001f5c <UART_SetConfig+0x348>
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d020      	beq.n	8001f9c <UART_SetConfig+0x388>
 8001f5a:	e068      	b.n	800202e <UART_SetConfig+0x41a>
 8001f5c:	2b04      	cmp	r3, #4
 8001f5e:	d041      	beq.n	8001fe4 <UART_SetConfig+0x3d0>
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d052      	beq.n	800200a <UART_SetConfig+0x3f6>
 8001f64:	e063      	b.n	800202e <UART_SetConfig+0x41a>
 8001f66:	46c0      	nop			; (mov r8, r8)
 8001f68:	efff69f3 	.word	0xefff69f3
 8001f6c:	ffffcfff 	.word	0xffffcfff
 8001f70:	fffff4ff 	.word	0xfffff4ff
 8001f74:	40013800 	.word	0x40013800
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40004400 	.word	0x40004400
 8001f80:	40004800 	.word	0x40004800
 8001f84:	40004c00 	.word	0x40004c00
 8001f88:	40005000 	.word	0x40005000
 8001f8c:	40011400 	.word	0x40011400
 8001f90:	40011800 	.word	0x40011800
 8001f94:	40011c00 	.word	0x40011c00
 8001f98:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681c      	ldr	r4, [r3, #0]
 8001fa0:	f7ff fccc 	bl	800193c <HAL_RCC_GetPCLK1Freq>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	085b      	lsrs	r3, r3, #1
 8001fac:	18d2      	adds	r2, r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	0019      	movs	r1, r3
 8001fb4:	0010      	movs	r0, r2
 8001fb6:	f7fe f8a5 	bl	8000104 <__udivsi3>
 8001fba:	0003      	movs	r3, r0
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	60e3      	str	r3, [r4, #12]
        break;
 8001fc0:	e03a      	b.n	8002038 <UART_SetConfig+0x424>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681c      	ldr	r4, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	085b      	lsrs	r3, r3, #1
 8001fcc:	4a1e      	ldr	r2, [pc, #120]	; (8002048 <UART_SetConfig+0x434>)
 8001fce:	189a      	adds	r2, r3, r2
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	0019      	movs	r1, r3
 8001fd6:	0010      	movs	r0, r2
 8001fd8:	f7fe f894 	bl	8000104 <__udivsi3>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	60e3      	str	r3, [r4, #12]
        break;
 8001fe2:	e029      	b.n	8002038 <UART_SetConfig+0x424>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681c      	ldr	r4, [r3, #0]
 8001fe8:	f7ff fc20 	bl	800182c <HAL_RCC_GetSysClockFreq>
 8001fec:	0002      	movs	r2, r0
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	085b      	lsrs	r3, r3, #1
 8001ff4:	18d2      	adds	r2, r2, r3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	0010      	movs	r0, r2
 8001ffe:	f7fe f881 	bl	8000104 <__udivsi3>
 8002002:	0003      	movs	r3, r0
 8002004:	b29b      	uxth	r3, r3
 8002006:	60e3      	str	r3, [r4, #12]
        break;
 8002008:	e016      	b.n	8002038 <UART_SetConfig+0x424>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681c      	ldr	r4, [r3, #0]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	085b      	lsrs	r3, r3, #1
 8002014:	2280      	movs	r2, #128	; 0x80
 8002016:	0212      	lsls	r2, r2, #8
 8002018:	189a      	adds	r2, r3, r2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	0019      	movs	r1, r3
 8002020:	0010      	movs	r0, r2
 8002022:	f7fe f86f 	bl	8000104 <__udivsi3>
 8002026:	0003      	movs	r3, r0
 8002028:	b29b      	uxth	r3, r3
 800202a:	60e3      	str	r3, [r4, #12]
        break;
 800202c:	e004      	b.n	8002038 <UART_SetConfig+0x424>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800202e:	2313      	movs	r3, #19
 8002030:	18fb      	adds	r3, r7, r3
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
        break;
 8002036:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8002038:	2313      	movs	r3, #19
 800203a:	18fb      	adds	r3, r7, r3
 800203c:	781b      	ldrb	r3, [r3, #0]

}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b007      	add	sp, #28
 8002044:	bd90      	pop	{r4, r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	007a1200 	.word	0x007a1200

0800204c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002058:	2201      	movs	r2, #1
 800205a:	4013      	ands	r3, r2
 800205c:	d00a      	beq.n	8002074 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6812      	ldr	r2, [r2, #0]
 8002066:	6852      	ldr	r2, [r2, #4]
 8002068:	4945      	ldr	r1, [pc, #276]	; (8002180 <UART_AdvFeatureConfig+0x134>)
 800206a:	4011      	ands	r1, r2
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002070:	430a      	orrs	r2, r1
 8002072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	2202      	movs	r2, #2
 800207a:	4013      	ands	r3, r2
 800207c:	d00a      	beq.n	8002094 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	6812      	ldr	r2, [r2, #0]
 8002086:	6852      	ldr	r2, [r2, #4]
 8002088:	493e      	ldr	r1, [pc, #248]	; (8002184 <UART_AdvFeatureConfig+0x138>)
 800208a:	4011      	ands	r1, r2
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002090:	430a      	orrs	r2, r1
 8002092:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	2204      	movs	r2, #4
 800209a:	4013      	ands	r3, r2
 800209c:	d00a      	beq.n	80020b4 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6812      	ldr	r2, [r2, #0]
 80020a6:	6852      	ldr	r2, [r2, #4]
 80020a8:	4937      	ldr	r1, [pc, #220]	; (8002188 <UART_AdvFeatureConfig+0x13c>)
 80020aa:	4011      	ands	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020b0:	430a      	orrs	r2, r1
 80020b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b8:	2208      	movs	r2, #8
 80020ba:	4013      	ands	r3, r2
 80020bc:	d00a      	beq.n	80020d4 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	6852      	ldr	r2, [r2, #4]
 80020c8:	4930      	ldr	r1, [pc, #192]	; (800218c <UART_AdvFeatureConfig+0x140>)
 80020ca:	4011      	ands	r1, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020d0:	430a      	orrs	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d8:	2210      	movs	r2, #16
 80020da:	4013      	ands	r3, r2
 80020dc:	d00a      	beq.n	80020f4 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	6812      	ldr	r2, [r2, #0]
 80020e6:	6892      	ldr	r2, [r2, #8]
 80020e8:	4929      	ldr	r1, [pc, #164]	; (8002190 <UART_AdvFeatureConfig+0x144>)
 80020ea:	4011      	ands	r1, r2
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020f0:	430a      	orrs	r2, r1
 80020f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	2220      	movs	r2, #32
 80020fa:	4013      	ands	r3, r2
 80020fc:	d00a      	beq.n	8002114 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	6812      	ldr	r2, [r2, #0]
 8002106:	6892      	ldr	r2, [r2, #8]
 8002108:	4922      	ldr	r1, [pc, #136]	; (8002194 <UART_AdvFeatureConfig+0x148>)
 800210a:	4011      	ands	r1, r2
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002110:	430a      	orrs	r2, r1
 8002112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	2240      	movs	r2, #64	; 0x40
 800211a:	4013      	ands	r3, r2
 800211c:	d01b      	beq.n	8002156 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6812      	ldr	r2, [r2, #0]
 8002126:	6852      	ldr	r2, [r2, #4]
 8002128:	491b      	ldr	r1, [pc, #108]	; (8002198 <UART_AdvFeatureConfig+0x14c>)
 800212a:	4011      	ands	r1, r2
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002130:	430a      	orrs	r2, r1
 8002132:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002138:	2380      	movs	r3, #128	; 0x80
 800213a:	035b      	lsls	r3, r3, #13
 800213c:	429a      	cmp	r2, r3
 800213e:	d10a      	bne.n	8002156 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	687a      	ldr	r2, [r7, #4]
 8002146:	6812      	ldr	r2, [r2, #0]
 8002148:	6852      	ldr	r2, [r2, #4]
 800214a:	4914      	ldr	r1, [pc, #80]	; (800219c <UART_AdvFeatureConfig+0x150>)
 800214c:	4011      	ands	r1, r2
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002152:	430a      	orrs	r2, r1
 8002154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	4013      	ands	r3, r2
 800215e:	d00a      	beq.n	8002176 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	6812      	ldr	r2, [r2, #0]
 8002168:	6852      	ldr	r2, [r2, #4]
 800216a:	490d      	ldr	r1, [pc, #52]	; (80021a0 <UART_AdvFeatureConfig+0x154>)
 800216c:	4011      	ands	r1, r2
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002172:	430a      	orrs	r2, r1
 8002174:	605a      	str	r2, [r3, #4]
  }
}
 8002176:	46c0      	nop			; (mov r8, r8)
 8002178:	46bd      	mov	sp, r7
 800217a:	b002      	add	sp, #8
 800217c:	bd80      	pop	{r7, pc}
 800217e:	46c0      	nop			; (mov r8, r8)
 8002180:	fffdffff 	.word	0xfffdffff
 8002184:	fffeffff 	.word	0xfffeffff
 8002188:	fffbffff 	.word	0xfffbffff
 800218c:	ffff7fff 	.word	0xffff7fff
 8002190:	ffffefff 	.word	0xffffefff
 8002194:	ffffdfff 	.word	0xffffdfff
 8002198:	ffefffff 	.word	0xffefffff
 800219c:	ff9fffff 	.word	0xff9fffff
 80021a0:	fff7ffff 	.word	0xfff7ffff

080021a4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af02      	add	r7, sp, #8
 80021aa:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80021b6:	f7fe f86d 	bl	8000294 <HAL_GetTick>
 80021ba:	0003      	movs	r3, r0
 80021bc:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a24      	ldr	r2, [pc, #144]	; (8002254 <UART_CheckIdleState+0xb0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d009      	beq.n	80021dc <UART_CheckIdleState+0x38>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a22      	ldr	r2, [pc, #136]	; (8002258 <UART_CheckIdleState+0xb4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d004      	beq.n	80021dc <UART_CheckIdleState+0x38>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a21      	ldr	r2, [pc, #132]	; (800225c <UART_CheckIdleState+0xb8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d129      	bne.n	8002230 <UART_CheckIdleState+0x8c>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2208      	movs	r2, #8
 80021e4:	4013      	ands	r3, r2
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d10d      	bne.n	8002206 <UART_CheckIdleState+0x62>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80021ea:	68fa      	ldr	r2, [r7, #12]
 80021ec:	2380      	movs	r3, #128	; 0x80
 80021ee:	0399      	lsls	r1, r3, #14
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <UART_CheckIdleState+0xbc>)
 80021f4:	9300      	str	r3, [sp, #0]
 80021f6:	0013      	movs	r3, r2
 80021f8:	2200      	movs	r2, #0
 80021fa:	f000 f833 	bl	8002264 <UART_WaitOnFlagUntilTimeout>
 80021fe:	1e03      	subs	r3, r0, #0
 8002200:	d001      	beq.n	8002206 <UART_CheckIdleState+0x62>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e021      	b.n	800224a <UART_CheckIdleState+0xa6>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2204      	movs	r2, #4
 800220e:	4013      	ands	r3, r2
 8002210:	2b04      	cmp	r3, #4
 8002212:	d10d      	bne.n	8002230 <UART_CheckIdleState+0x8c>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	2380      	movs	r3, #128	; 0x80
 8002218:	03d9      	lsls	r1, r3, #15
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	4b10      	ldr	r3, [pc, #64]	; (8002260 <UART_CheckIdleState+0xbc>)
 800221e:	9300      	str	r3, [sp, #0]
 8002220:	0013      	movs	r3, r2
 8002222:	2200      	movs	r2, #0
 8002224:	f000 f81e 	bl	8002264 <UART_WaitOnFlagUntilTimeout>
 8002228:	1e03      	subs	r3, r0, #0
 800222a:	d001      	beq.n	8002230 <UART_CheckIdleState+0x8c>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e00c      	b.n	800224a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2269      	movs	r2, #105	; 0x69
 8002234:	2120      	movs	r1, #32
 8002236:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	226a      	movs	r2, #106	; 0x6a
 800223c:	2120      	movs	r1, #32
 800223e:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2268      	movs	r2, #104	; 0x68
 8002244:	2100      	movs	r1, #0
 8002246:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	b004      	add	sp, #16
 8002250:	bd80      	pop	{r7, pc}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	40013800 	.word	0x40013800
 8002258:	40004400 	.word	0x40004400
 800225c:	40004800 	.word	0x40004800
 8002260:	01ffffff 	.word	0x01ffffff

08002264 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	1dfb      	adds	r3, r7, #7
 8002272:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002274:	e02b      	b.n	80022ce <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	3301      	adds	r3, #1
 800227a:	d028      	beq.n	80022ce <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d007      	beq.n	8002292 <UART_WaitOnFlagUntilTimeout+0x2e>
 8002282:	f7fe f807 	bl	8000294 <HAL_GetTick>
 8002286:	0002      	movs	r2, r0
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	1ad2      	subs	r2, r2, r3
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	429a      	cmp	r2, r3
 8002290:	d91d      	bls.n	80022ce <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68fa      	ldr	r2, [r7, #12]
 8002298:	6812      	ldr	r2, [r2, #0]
 800229a:	6812      	ldr	r2, [r2, #0]
 800229c:	4916      	ldr	r1, [pc, #88]	; (80022f8 <UART_WaitOnFlagUntilTimeout+0x94>)
 800229e:	400a      	ands	r2, r1
 80022a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	68fa      	ldr	r2, [r7, #12]
 80022a8:	6812      	ldr	r2, [r2, #0]
 80022aa:	6892      	ldr	r2, [r2, #8]
 80022ac:	2101      	movs	r1, #1
 80022ae:	438a      	bics	r2, r1
 80022b0:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2269      	movs	r2, #105	; 0x69
 80022b6:	2120      	movs	r1, #32
 80022b8:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	226a      	movs	r2, #106	; 0x6a
 80022be:	2120      	movs	r1, #32
 80022c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2268      	movs	r2, #104	; 0x68
 80022c6:	2100      	movs	r1, #0
 80022c8:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e00f      	b.n	80022ee <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	69db      	ldr	r3, [r3, #28]
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	425a      	negs	r2, r3
 80022de:	4153      	adcs	r3, r2
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	001a      	movs	r2, r3
 80022e4:	1dfb      	adds	r3, r7, #7
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d0c4      	beq.n	8002276 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b004      	add	sp, #16
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	fffffe5f 	.word	0xfffffe5f

080022fc <main>:

/**
* @brief  The application entry point.
* @retval int
*/
int main(void) {
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration -----------------------------------------------------------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002302:	f7fd ff8b 	bl	800021c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002306:	f000 f831 	bl	800236c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800230a:	f000 f92f 	bl	800256c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 800230e:	f000 f8fd 	bl	800250c <MX_USART2_UART_Init>
	MX_ADC_Init();
 8002312:	f000 f8a1 	bl	8002458 <MX_ADC_Init>
	/* USER CODE BEGIN WHILE */

	for(;;) {
		/* USER CODE END WHILE */

		result = HAL_ADC_Start(&hadc);
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <main+0x68>)
 8002318:	0018      	movs	r0, r3
 800231a:	f7fe f903 	bl	8000524 <HAL_ADC_Start>
 800231e:	0003      	movs	r3, r0
 8002320:	001a      	movs	r2, r3
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <main+0x6c>)
 8002324:	701a      	strb	r2, [r3, #0]

		if(result != HAL_OK) {
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <main+0x6c>)
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <main+0x36>
			Error_Handler();
 800232e:	f000 f98f 	bl	8002650 <Error_Handler>
		}

		for(int i=0; i<100; i++) {
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	e003      	b.n	8002340 <main+0x44>
			asm(" nop");
 8002338:	46c0      	nop			; (mov r8, r8)
		for(int i=0; i<100; i++) {
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3301      	adds	r3, #1
 800233e:	607b      	str	r3, [r7, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2b63      	cmp	r3, #99	; 0x63
 8002344:	ddf8      	ble.n	8002338 <main+0x3c>
		}

		result = HAL_ADC_Stop(&hadc);
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <main+0x68>)
 8002348:	0018      	movs	r0, r3
 800234a:	f7fe f93f 	bl	80005cc <HAL_ADC_Stop>
 800234e:	0003      	movs	r3, r0
 8002350:	001a      	movs	r2, r3
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <main+0x6c>)
 8002354:	701a      	strb	r2, [r3, #0]

		if(result != HAL_OK) {
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <main+0x6c>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0db      	beq.n	8002316 <main+0x1a>
			Error_Handler();
 800235e:	f000 f977 	bl	8002650 <Error_Handler>
		result = HAL_ADC_Start(&hadc);
 8002362:	e7d8      	b.n	8002316 <main+0x1a>
 8002364:	20000098 	.word	0x20000098
 8002368:	20000024 	.word	0x20000024

0800236c <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b098      	sub	sp, #96	; 0x60
 8002370:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002372:	232c      	movs	r3, #44	; 0x2c
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	0018      	movs	r0, r3
 8002378:	2334      	movs	r3, #52	; 0x34
 800237a:	001a      	movs	r2, r3
 800237c:	2100      	movs	r1, #0
 800237e:	f000 fad9 	bl	8002934 <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002382:	231c      	movs	r3, #28
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	0018      	movs	r0, r3
 8002388:	2310      	movs	r3, #16
 800238a:	001a      	movs	r2, r3
 800238c:	2100      	movs	r1, #0
 800238e:	f000 fad1 	bl	8002934 <memset>
RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002392:	003b      	movs	r3, r7
 8002394:	0018      	movs	r0, r3
 8002396:	231c      	movs	r3, #28
 8002398:	001a      	movs	r2, r3
 800239a:	2100      	movs	r1, #0
 800239c:	f000 faca 	bl	8002934 <memset>

/**Initializes the CPU, AHB and APB busses clocks
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80023a0:	232c      	movs	r3, #44	; 0x2c
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	2212      	movs	r2, #18
 80023a6:	601a      	str	r2, [r3, #0]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80023a8:	232c      	movs	r3, #44	; 0x2c
 80023aa:	18fb      	adds	r3, r7, r3
 80023ac:	2201      	movs	r2, #1
 80023ae:	60da      	str	r2, [r3, #12]
RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80023b0:	232c      	movs	r3, #44	; 0x2c
 80023b2:	18fb      	adds	r3, r7, r3
 80023b4:	2201      	movs	r2, #1
 80023b6:	615a      	str	r2, [r3, #20]
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80023b8:	232c      	movs	r3, #44	; 0x2c
 80023ba:	18fb      	adds	r3, r7, r3
 80023bc:	2210      	movs	r2, #16
 80023be:	611a      	str	r2, [r3, #16]
RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80023c0:	232c      	movs	r3, #44	; 0x2c
 80023c2:	18fb      	adds	r3, r7, r3
 80023c4:	2210      	movs	r2, #16
 80023c6:	619a      	str	r2, [r3, #24]
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80023c8:	232c      	movs	r3, #44	; 0x2c
 80023ca:	18fb      	adds	r3, r7, r3
 80023cc:	2202      	movs	r2, #2
 80023ce:	625a      	str	r2, [r3, #36]	; 0x24
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80023d0:	232c      	movs	r3, #44	; 0x2c
 80023d2:	18fb      	adds	r3, r7, r3
 80023d4:	2280      	movs	r2, #128	; 0x80
 80023d6:	0212      	lsls	r2, r2, #8
 80023d8:	629a      	str	r2, [r3, #40]	; 0x28
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 80023da:	232c      	movs	r3, #44	; 0x2c
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	22a0      	movs	r2, #160	; 0xa0
 80023e0:	0392      	lsls	r2, r2, #14
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c
RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 80023e4:	232c      	movs	r3, #44	; 0x2c
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	2201      	movs	r2, #1
 80023ea:	631a      	str	r2, [r3, #48]	; 0x30
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80023ec:	232c      	movs	r3, #44	; 0x2c
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	0018      	movs	r0, r3
 80023f2:	f7fe fdb5 	bl	8000f60 <HAL_RCC_OscConfig>
 80023f6:	1e03      	subs	r3, r0, #0
 80023f8:	d001      	beq.n	80023fe <SystemClock_Config+0x92>
{
Error_Handler();
 80023fa:	f000 f929 	bl	8002650 <Error_Handler>
}
/**Initializes the CPU, AHB and APB busses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80023fe:	231c      	movs	r3, #28
 8002400:	18fb      	adds	r3, r7, r3
 8002402:	2207      	movs	r2, #7
 8002404:	601a      	str	r2, [r3, #0]
|RCC_CLOCKTYPE_PCLK1;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002406:	231c      	movs	r3, #28
 8002408:	18fb      	adds	r3, r7, r3
 800240a:	2202      	movs	r2, #2
 800240c:	605a      	str	r2, [r3, #4]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800240e:	231c      	movs	r3, #28
 8002410:	18fb      	adds	r3, r7, r3
 8002412:	2200      	movs	r2, #0
 8002414:	609a      	str	r2, [r3, #8]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002416:	231c      	movs	r3, #28
 8002418:	18fb      	adds	r3, r7, r3
 800241a:	2200      	movs	r2, #0
 800241c:	60da      	str	r2, [r3, #12]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800241e:	231c      	movs	r3, #28
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	2101      	movs	r1, #1
 8002424:	0018      	movs	r0, r3
 8002426:	f7ff f8f9 	bl	800161c <HAL_RCC_ClockConfig>
 800242a:	1e03      	subs	r3, r0, #0
 800242c:	d001      	beq.n	8002432 <SystemClock_Config+0xc6>
{
Error_Handler();
 800242e:	f000 f90f 	bl	8002650 <Error_Handler>
}
PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002432:	003b      	movs	r3, r7
 8002434:	2202      	movs	r2, #2
 8002436:	601a      	str	r2, [r3, #0]
PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002438:	003b      	movs	r3, r7
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800243e:	003b      	movs	r3, r7
 8002440:	0018      	movs	r0, r3
 8002442:	f7ff fa91 	bl	8001968 <HAL_RCCEx_PeriphCLKConfig>
 8002446:	1e03      	subs	r3, r0, #0
 8002448:	d001      	beq.n	800244e <SystemClock_Config+0xe2>
{
Error_Handler();
 800244a:	f000 f901 	bl	8002650 <Error_Handler>
}
}
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	46bd      	mov	sp, r7
 8002452:	b018      	add	sp, #96	; 0x60
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <MX_ADC_Init>:
* @brief ADC Initialization Function
* @param None
* @retval None
*/
static void MX_ADC_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0

/* USER CODE BEGIN ADC_Init 0 */

/* USER CODE END ADC_Init 0 */

ADC_ChannelConfTypeDef sConfig = {0};
 800245e:	1d3b      	adds	r3, r7, #4
 8002460:	0018      	movs	r0, r3
 8002462:	230c      	movs	r3, #12
 8002464:	001a      	movs	r2, r3
 8002466:	2100      	movs	r1, #0
 8002468:	f000 fa64 	bl	8002934 <memset>
/* USER CODE BEGIN ADC_Init 1 */

/* USER CODE END ADC_Init 1 */
/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
*/
hadc.Instance = ADC1;
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <MX_ADC_Init+0xac>)
 800246e:	4a26      	ldr	r2, [pc, #152]	; (8002508 <MX_ADC_Init+0xb0>)
 8002470:	601a      	str	r2, [r3, #0]
hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002472:	4b24      	ldr	r3, [pc, #144]	; (8002504 <MX_ADC_Init+0xac>)
 8002474:	2200      	movs	r2, #0
 8002476:	605a      	str	r2, [r3, #4]
hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8002478:	4b22      	ldr	r3, [pc, #136]	; (8002504 <MX_ADC_Init+0xac>)
 800247a:	2200      	movs	r2, #0
 800247c:	609a      	str	r2, [r3, #8]
hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800247e:	4b21      	ldr	r3, [pc, #132]	; (8002504 <MX_ADC_Init+0xac>)
 8002480:	2200      	movs	r2, #0
 8002482:	60da      	str	r2, [r3, #12]
hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8002484:	4b1f      	ldr	r3, [pc, #124]	; (8002504 <MX_ADC_Init+0xac>)
 8002486:	2201      	movs	r2, #1
 8002488:	611a      	str	r2, [r3, #16]
hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800248a:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <MX_ADC_Init+0xac>)
 800248c:	2204      	movs	r2, #4
 800248e:	615a      	str	r2, [r3, #20]
hadc.Init.LowPowerAutoWait = DISABLE;
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <MX_ADC_Init+0xac>)
 8002492:	2200      	movs	r2, #0
 8002494:	619a      	str	r2, [r3, #24]
hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <MX_ADC_Init+0xac>)
 8002498:	2200      	movs	r2, #0
 800249a:	61da      	str	r2, [r3, #28]
hadc.Init.ContinuousConvMode = DISABLE;
 800249c:	4b19      	ldr	r3, [pc, #100]	; (8002504 <MX_ADC_Init+0xac>)
 800249e:	2200      	movs	r2, #0
 80024a0:	621a      	str	r2, [r3, #32]
hadc.Init.DiscontinuousConvMode = DISABLE;
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <MX_ADC_Init+0xac>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	625a      	str	r2, [r3, #36]	; 0x24
hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024a8:	4b16      	ldr	r3, [pc, #88]	; (8002504 <MX_ADC_Init+0xac>)
 80024aa:	22c2      	movs	r2, #194	; 0xc2
 80024ac:	32ff      	adds	r2, #255	; 0xff
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <MX_ADC_Init+0xac>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	62da      	str	r2, [r3, #44]	; 0x2c
hadc.Init.DMAContinuousRequests = DISABLE;
 80024b6:	4b13      	ldr	r3, [pc, #76]	; (8002504 <MX_ADC_Init+0xac>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	631a      	str	r2, [r3, #48]	; 0x30
hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80024bc:	4b11      	ldr	r3, [pc, #68]	; (8002504 <MX_ADC_Init+0xac>)
 80024be:	2201      	movs	r2, #1
 80024c0:	635a      	str	r2, [r3, #52]	; 0x34
if (HAL_ADC_Init(&hadc) != HAL_OK)
 80024c2:	4b10      	ldr	r3, [pc, #64]	; (8002504 <MX_ADC_Init+0xac>)
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7fd feef 	bl	80002a8 <HAL_ADC_Init>
 80024ca:	1e03      	subs	r3, r0, #0
 80024cc:	d001      	beq.n	80024d2 <MX_ADC_Init+0x7a>
{
Error_Handler();
 80024ce:	f000 f8bf 	bl	8002650 <Error_Handler>
}
/**Configure for the selected ADC regular channel to be converted.
*/
sConfig.Channel = ADC_CHANNEL_0;
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80024d8:	1d3b      	adds	r3, r7, #4
 80024da:	2280      	movs	r2, #128	; 0x80
 80024dc:	0152      	lsls	r2, r2, #5
 80024de:	605a      	str	r2, [r3, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80024e0:	1d3b      	adds	r3, r7, #4
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	0552      	lsls	r2, r2, #21
 80024e6:	609a      	str	r2, [r3, #8]
if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80024e8:	1d3a      	adds	r2, r7, #4
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <MX_ADC_Init+0xac>)
 80024ec:	0011      	movs	r1, r2
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7fe f8ae 	bl	8000650 <HAL_ADC_ConfigChannel>
 80024f4:	1e03      	subs	r3, r0, #0
 80024f6:	d001      	beq.n	80024fc <MX_ADC_Init+0xa4>
{
Error_Handler();
 80024f8:	f000 f8aa 	bl	8002650 <Error_Handler>
}
/* USER CODE BEGIN ADC_Init 2 */

/* USER CODE END ADC_Init 2 */

}
 80024fc:	46c0      	nop			; (mov r8, r8)
 80024fe:	46bd      	mov	sp, r7
 8002500:	b004      	add	sp, #16
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000098 	.word	0x20000098
 8002508:	40012400 	.word	0x40012400

0800250c <MX_USART2_UART_Init>:
* @brief USART2 Initialization Function
* @param None
* @retval None
*/
static void MX_USART2_UART_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
/* USER CODE END USART2_Init 0 */

/* USER CODE BEGIN USART2_Init 1 */

/* USER CODE END USART2_Init 1 */
huart2.Instance = USART2;
 8002510:	4b14      	ldr	r3, [pc, #80]	; (8002564 <MX_USART2_UART_Init+0x58>)
 8002512:	4a15      	ldr	r2, [pc, #84]	; (8002568 <MX_USART2_UART_Init+0x5c>)
 8002514:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 115200;
 8002516:	4b13      	ldr	r3, [pc, #76]	; (8002564 <MX_USART2_UART_Init+0x58>)
 8002518:	22e1      	movs	r2, #225	; 0xe1
 800251a:	0252      	lsls	r2, r2, #9
 800251c:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800251e:	4b11      	ldr	r3, [pc, #68]	; (8002564 <MX_USART2_UART_Init+0x58>)
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <MX_USART2_UART_Init+0x58>)
 8002526:	2200      	movs	r2, #0
 8002528:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 800252a:	4b0e      	ldr	r3, [pc, #56]	; (8002564 <MX_USART2_UART_Init+0x58>)
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 8002530:	4b0c      	ldr	r3, [pc, #48]	; (8002564 <MX_USART2_UART_Init+0x58>)
 8002532:	220c      	movs	r2, #12
 8002534:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002536:	4b0b      	ldr	r3, [pc, #44]	; (8002564 <MX_USART2_UART_Init+0x58>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800253c:	4b09      	ldr	r3, [pc, #36]	; (8002564 <MX_USART2_UART_Init+0x58>)
 800253e:	2200      	movs	r2, #0
 8002540:	61da      	str	r2, [r3, #28]
huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <MX_USART2_UART_Init+0x58>)
 8002544:	2200      	movs	r2, #0
 8002546:	621a      	str	r2, [r3, #32]
huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <MX_USART2_UART_Init+0x58>)
 800254a:	2200      	movs	r2, #0
 800254c:	625a      	str	r2, [r3, #36]	; 0x24
if (HAL_UART_Init(&huart2) != HAL_OK)
 800254e:	4b05      	ldr	r3, [pc, #20]	; (8002564 <MX_USART2_UART_Init+0x58>)
 8002550:	0018      	movs	r0, r3
 8002552:	f7ff fb07 	bl	8001b64 <HAL_UART_Init>
 8002556:	1e03      	subs	r3, r0, #0
 8002558:	d001      	beq.n	800255e <MX_USART2_UART_Init+0x52>
{
Error_Handler();
 800255a:	f000 f879 	bl	8002650 <Error_Handler>
}
/* USER CODE BEGIN USART2_Init 2 */

/* USER CODE END USART2_Init 2 */

}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000028 	.word	0x20000028
 8002568:	40004400 	.word	0x40004400

0800256c <MX_GPIO_Init>:
* @brief GPIO Initialization Function
* @param None
* @retval None
*/
static void MX_GPIO_Init(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b088      	sub	sp, #32
 8002570:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002572:	230c      	movs	r3, #12
 8002574:	18fb      	adds	r3, r7, r3
 8002576:	0018      	movs	r0, r3
 8002578:	2314      	movs	r3, #20
 800257a:	001a      	movs	r2, r3
 800257c:	2100      	movs	r1, #0
 800257e:	f000 f9d9 	bl	8002934 <memset>

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 8002582:	4b30      	ldr	r3, [pc, #192]	; (8002644 <MX_GPIO_Init+0xd8>)
 8002584:	4a2f      	ldr	r2, [pc, #188]	; (8002644 <MX_GPIO_Init+0xd8>)
 8002586:	6952      	ldr	r2, [r2, #20]
 8002588:	2180      	movs	r1, #128	; 0x80
 800258a:	0309      	lsls	r1, r1, #12
 800258c:	430a      	orrs	r2, r1
 800258e:	615a      	str	r2, [r3, #20]
 8002590:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <MX_GPIO_Init+0xd8>)
 8002592:	695a      	ldr	r2, [r3, #20]
 8002594:	2380      	movs	r3, #128	; 0x80
 8002596:	031b      	lsls	r3, r3, #12
 8002598:	4013      	ands	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOF_CLK_ENABLE();
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <MX_GPIO_Init+0xd8>)
 80025a0:	4a28      	ldr	r2, [pc, #160]	; (8002644 <MX_GPIO_Init+0xd8>)
 80025a2:	6952      	ldr	r2, [r2, #20]
 80025a4:	2180      	movs	r1, #128	; 0x80
 80025a6:	03c9      	lsls	r1, r1, #15
 80025a8:	430a      	orrs	r2, r1
 80025aa:	615a      	str	r2, [r3, #20]
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <MX_GPIO_Init+0xd8>)
 80025ae:	695a      	ldr	r2, [r3, #20]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	03db      	lsls	r3, r3, #15
 80025b4:	4013      	ands	r3, r2
 80025b6:	607b      	str	r3, [r7, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
__HAL_RCC_GPIOA_CLK_ENABLE();
 80025ba:	4b22      	ldr	r3, [pc, #136]	; (8002644 <MX_GPIO_Init+0xd8>)
 80025bc:	4a21      	ldr	r2, [pc, #132]	; (8002644 <MX_GPIO_Init+0xd8>)
 80025be:	6952      	ldr	r2, [r2, #20]
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	0289      	lsls	r1, r1, #10
 80025c4:	430a      	orrs	r2, r1
 80025c6:	615a      	str	r2, [r3, #20]
 80025c8:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <MX_GPIO_Init+0xd8>)
 80025ca:	695a      	ldr	r2, [r3, #20]
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	029b      	lsls	r3, r3, #10
 80025d0:	4013      	ands	r3, r2
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	683b      	ldr	r3, [r7, #0]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80025d6:	2390      	movs	r3, #144	; 0x90
 80025d8:	05db      	lsls	r3, r3, #23
 80025da:	2200      	movs	r2, #0
 80025dc:	2120      	movs	r1, #32
 80025de:	0018      	movs	r0, r3
 80025e0:	f7fe fca0 	bl	8000f24 <HAL_GPIO_WritePin>

/*Configure GPIO pin : B1_Pin */
GPIO_InitStruct.Pin = B1_Pin;
 80025e4:	230c      	movs	r3, #12
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	2280      	movs	r2, #128	; 0x80
 80025ea:	0192      	lsls	r2, r2, #6
 80025ec:	601a      	str	r2, [r3, #0]
GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80025ee:	230c      	movs	r3, #12
 80025f0:	18fb      	adds	r3, r7, r3
 80025f2:	4a15      	ldr	r2, [pc, #84]	; (8002648 <MX_GPIO_Init+0xdc>)
 80025f4:	605a      	str	r2, [r3, #4]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f6:	230c      	movs	r3, #12
 80025f8:	18fb      	adds	r3, r7, r3
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80025fe:	230c      	movs	r3, #12
 8002600:	18fb      	adds	r3, r7, r3
 8002602:	4a12      	ldr	r2, [pc, #72]	; (800264c <MX_GPIO_Init+0xe0>)
 8002604:	0019      	movs	r1, r3
 8002606:	0010      	movs	r0, r2
 8002608:	f7fe fb10 	bl	8000c2c <HAL_GPIO_Init>

/*Configure GPIO pin : LD2_Pin */
GPIO_InitStruct.Pin = LD2_Pin;
 800260c:	230c      	movs	r3, #12
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	2220      	movs	r2, #32
 8002612:	601a      	str	r2, [r3, #0]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002614:	230c      	movs	r3, #12
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	2201      	movs	r2, #1
 800261a:	605a      	str	r2, [r3, #4]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	230c      	movs	r3, #12
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	2200      	movs	r2, #0
 8002622:	609a      	str	r2, [r3, #8]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002624:	230c      	movs	r3, #12
 8002626:	18fb      	adds	r3, r7, r3
 8002628:	2200      	movs	r2, #0
 800262a:	60da      	str	r2, [r3, #12]
HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800262c:	230c      	movs	r3, #12
 800262e:	18fa      	adds	r2, r7, r3
 8002630:	2390      	movs	r3, #144	; 0x90
 8002632:	05db      	lsls	r3, r3, #23
 8002634:	0011      	movs	r1, r2
 8002636:	0018      	movs	r0, r3
 8002638:	f7fe faf8 	bl	8000c2c <HAL_GPIO_Init>

}
 800263c:	46c0      	nop			; (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b008      	add	sp, #32
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40021000 	.word	0x40021000
 8002648:	10210000 	.word	0x10210000
 800264c:	48000800 	.word	0x48000800

08002650 <Error_Handler>:
/**
* @brief  This function is executed in case of error occurrence.
* @retval None
*/
void Error_Handler(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
/* USER CODE BEGIN Error_Handler_Debug */
/* User can add his own implementation to report the HAL error return state */

/* USER CODE END Error_Handler_Debug */
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
	...

0800265c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b082      	sub	sp, #8
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002662:	4b0f      	ldr	r3, [pc, #60]	; (80026a0 <HAL_MspInit+0x44>)
 8002664:	4a0e      	ldr	r2, [pc, #56]	; (80026a0 <HAL_MspInit+0x44>)
 8002666:	6992      	ldr	r2, [r2, #24]
 8002668:	2101      	movs	r1, #1
 800266a:	430a      	orrs	r2, r1
 800266c:	619a      	str	r2, [r3, #24]
 800266e:	4b0c      	ldr	r3, [pc, #48]	; (80026a0 <HAL_MspInit+0x44>)
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2201      	movs	r2, #1
 8002674:	4013      	ands	r3, r2
 8002676:	607b      	str	r3, [r7, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800267a:	4b09      	ldr	r3, [pc, #36]	; (80026a0 <HAL_MspInit+0x44>)
 800267c:	4a08      	ldr	r2, [pc, #32]	; (80026a0 <HAL_MspInit+0x44>)
 800267e:	69d2      	ldr	r2, [r2, #28]
 8002680:	2180      	movs	r1, #128	; 0x80
 8002682:	0549      	lsls	r1, r1, #21
 8002684:	430a      	orrs	r2, r1
 8002686:	61da      	str	r2, [r3, #28]
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <HAL_MspInit+0x44>)
 800268a:	69da      	ldr	r2, [r3, #28]
 800268c:	2380      	movs	r3, #128	; 0x80
 800268e:	055b      	lsls	r3, r3, #21
 8002690:	4013      	ands	r3, r2
 8002692:	603b      	str	r3, [r7, #0]
 8002694:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b002      	add	sp, #8
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	40021000 	.word	0x40021000

080026a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b08a      	sub	sp, #40	; 0x28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	2314      	movs	r3, #20
 80026ae:	18fb      	adds	r3, r7, r3
 80026b0:	0018      	movs	r0, r3
 80026b2:	2314      	movs	r3, #20
 80026b4:	001a      	movs	r2, r3
 80026b6:	2100      	movs	r1, #0
 80026b8:	f000 f93c 	bl	8002934 <memset>
  if(hadc->Instance==ADC1)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a1b      	ldr	r2, [pc, #108]	; (8002730 <HAL_ADC_MspInit+0x8c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d12f      	bne.n	8002726 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80026c6:	4b1b      	ldr	r3, [pc, #108]	; (8002734 <HAL_ADC_MspInit+0x90>)
 80026c8:	4a1a      	ldr	r2, [pc, #104]	; (8002734 <HAL_ADC_MspInit+0x90>)
 80026ca:	6992      	ldr	r2, [r2, #24]
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	0089      	lsls	r1, r1, #2
 80026d0:	430a      	orrs	r2, r1
 80026d2:	619a      	str	r2, [r3, #24]
 80026d4:	4b17      	ldr	r3, [pc, #92]	; (8002734 <HAL_ADC_MspInit+0x90>)
 80026d6:	699a      	ldr	r2, [r3, #24]
 80026d8:	2380      	movs	r3, #128	; 0x80
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
 80026e0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026e2:	4b14      	ldr	r3, [pc, #80]	; (8002734 <HAL_ADC_MspInit+0x90>)
 80026e4:	4a13      	ldr	r2, [pc, #76]	; (8002734 <HAL_ADC_MspInit+0x90>)
 80026e6:	6952      	ldr	r2, [r2, #20]
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	0289      	lsls	r1, r1, #10
 80026ec:	430a      	orrs	r2, r1
 80026ee:	615a      	str	r2, [r3, #20]
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_ADC_MspInit+0x90>)
 80026f2:	695a      	ldr	r2, [r3, #20]
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	029b      	lsls	r3, r3, #10
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80026fe:	2314      	movs	r3, #20
 8002700:	18fb      	adds	r3, r7, r3
 8002702:	2201      	movs	r2, #1
 8002704:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002706:	2314      	movs	r3, #20
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2203      	movs	r2, #3
 800270c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270e:	2314      	movs	r3, #20
 8002710:	18fb      	adds	r3, r7, r3
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002716:	2314      	movs	r3, #20
 8002718:	18fa      	adds	r2, r7, r3
 800271a:	2390      	movs	r3, #144	; 0x90
 800271c:	05db      	lsls	r3, r3, #23
 800271e:	0011      	movs	r1, r2
 8002720:	0018      	movs	r0, r3
 8002722:	f7fe fa83 	bl	8000c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002726:	46c0      	nop			; (mov r8, r8)
 8002728:	46bd      	mov	sp, r7
 800272a:	b00a      	add	sp, #40	; 0x28
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	40012400 	.word	0x40012400
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	2314      	movs	r3, #20
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	0018      	movs	r0, r3
 8002746:	2314      	movs	r3, #20
 8002748:	001a      	movs	r2, r3
 800274a:	2100      	movs	r1, #0
 800274c:	f000 f8f2 	bl	8002934 <memset>
  if(huart->Instance==USART2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1f      	ldr	r2, [pc, #124]	; (80027d4 <HAL_UART_MspInit+0x9c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d137      	bne.n	80027ca <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800275a:	4b1f      	ldr	r3, [pc, #124]	; (80027d8 <HAL_UART_MspInit+0xa0>)
 800275c:	4a1e      	ldr	r2, [pc, #120]	; (80027d8 <HAL_UART_MspInit+0xa0>)
 800275e:	69d2      	ldr	r2, [r2, #28]
 8002760:	2180      	movs	r1, #128	; 0x80
 8002762:	0289      	lsls	r1, r1, #10
 8002764:	430a      	orrs	r2, r1
 8002766:	61da      	str	r2, [r3, #28]
 8002768:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_UART_MspInit+0xa0>)
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	029b      	lsls	r3, r3, #10
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	4b18      	ldr	r3, [pc, #96]	; (80027d8 <HAL_UART_MspInit+0xa0>)
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <HAL_UART_MspInit+0xa0>)
 800277a:	6952      	ldr	r2, [r2, #20]
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	0289      	lsls	r1, r1, #10
 8002780:	430a      	orrs	r2, r1
 8002782:	615a      	str	r2, [r3, #20]
 8002784:	4b14      	ldr	r3, [pc, #80]	; (80027d8 <HAL_UART_MspInit+0xa0>)
 8002786:	695a      	ldr	r2, [r3, #20]
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	4013      	ands	r3, r2
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002792:	2314      	movs	r3, #20
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	220c      	movs	r2, #12
 8002798:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800279a:	2314      	movs	r3, #20
 800279c:	18fb      	adds	r3, r7, r3
 800279e:	2202      	movs	r2, #2
 80027a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a2:	2314      	movs	r3, #20
 80027a4:	18fb      	adds	r3, r7, r3
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027aa:	2314      	movs	r3, #20
 80027ac:	18fb      	adds	r3, r7, r3
 80027ae:	2200      	movs	r2, #0
 80027b0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80027b2:	2314      	movs	r3, #20
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2201      	movs	r2, #1
 80027b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ba:	2314      	movs	r3, #20
 80027bc:	18fa      	adds	r2, r7, r3
 80027be:	2390      	movs	r3, #144	; 0x90
 80027c0:	05db      	lsls	r3, r3, #23
 80027c2:	0011      	movs	r1, r2
 80027c4:	0018      	movs	r0, r3
 80027c6:	f7fe fa31 	bl	8000c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80027ca:	46c0      	nop			; (mov r8, r8)
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b00a      	add	sp, #40	; 0x28
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	40004400 	.word	0x40004400
 80027d8:	40021000 	.word	0x40021000

080027dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80027e0:	46c0      	nop			; (mov r8, r8)
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027ea:	e7fe      	b.n	80027ea <HardFault_Handler+0x4>

080027ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}

080027f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f6:	b580      	push	{r7, lr}
 80027f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002804:	f7fd fd3a 	bl	800027c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002808:	46c0      	nop			; (mov r8, r8)
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
	...

08002810 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <SystemInit+0x70>)
 8002816:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <SystemInit+0x70>)
 8002818:	6812      	ldr	r2, [r2, #0]
 800281a:	2101      	movs	r1, #1
 800281c:	430a      	orrs	r2, r1
 800281e:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 8002820:	4b17      	ldr	r3, [pc, #92]	; (8002880 <SystemInit+0x70>)
 8002822:	4a17      	ldr	r2, [pc, #92]	; (8002880 <SystemInit+0x70>)
 8002824:	6852      	ldr	r2, [r2, #4]
 8002826:	4917      	ldr	r1, [pc, #92]	; (8002884 <SystemInit+0x74>)
 8002828:	400a      	ands	r2, r1
 800282a:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 800282c:	4b14      	ldr	r3, [pc, #80]	; (8002880 <SystemInit+0x70>)
 800282e:	4a14      	ldr	r2, [pc, #80]	; (8002880 <SystemInit+0x70>)
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	4915      	ldr	r1, [pc, #84]	; (8002888 <SystemInit+0x78>)
 8002834:	400a      	ands	r2, r1
 8002836:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8002838:	4b11      	ldr	r3, [pc, #68]	; (8002880 <SystemInit+0x70>)
 800283a:	4a11      	ldr	r2, [pc, #68]	; (8002880 <SystemInit+0x70>)
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	4913      	ldr	r1, [pc, #76]	; (800288c <SystemInit+0x7c>)
 8002840:	400a      	ands	r2, r1
 8002842:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <SystemInit+0x70>)
 8002846:	4a0e      	ldr	r2, [pc, #56]	; (8002880 <SystemInit+0x70>)
 8002848:	6852      	ldr	r2, [r2, #4]
 800284a:	4911      	ldr	r1, [pc, #68]	; (8002890 <SystemInit+0x80>)
 800284c:	400a      	ands	r2, r1
 800284e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <SystemInit+0x70>)
 8002852:	4a0b      	ldr	r2, [pc, #44]	; (8002880 <SystemInit+0x70>)
 8002854:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002856:	210f      	movs	r1, #15
 8002858:	438a      	bics	r2, r1
 800285a:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <SystemInit+0x70>)
 800285e:	4a08      	ldr	r2, [pc, #32]	; (8002880 <SystemInit+0x70>)
 8002860:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002862:	490c      	ldr	r1, [pc, #48]	; (8002894 <SystemInit+0x84>)
 8002864:	400a      	ands	r2, r1
 8002866:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8002868:	4b05      	ldr	r3, [pc, #20]	; (8002880 <SystemInit+0x70>)
 800286a:	4a05      	ldr	r2, [pc, #20]	; (8002880 <SystemInit+0x70>)
 800286c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800286e:	2101      	movs	r1, #1
 8002870:	438a      	bics	r2, r1
 8002872:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002874:	4b02      	ldr	r3, [pc, #8]	; (8002880 <SystemInit+0x70>)
 8002876:	2200      	movs	r2, #0
 8002878:	609a      	str	r2, [r3, #8]

}
 800287a:	46c0      	nop			; (mov r8, r8)
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000
 8002884:	08ffb80c 	.word	0x08ffb80c
 8002888:	fef6ffff 	.word	0xfef6ffff
 800288c:	fffbffff 	.word	0xfffbffff
 8002890:	ffc0ffff 	.word	0xffc0ffff
 8002894:	fff0feac 	.word	0xfff0feac

08002898 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002898:	480d      	ldr	r0, [pc, #52]	; (80028d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800289a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800289c:	480d      	ldr	r0, [pc, #52]	; (80028d4 <LoopForever+0x6>)
  ldr r1, =_edata
 800289e:	490e      	ldr	r1, [pc, #56]	; (80028d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80028a0:	4a0e      	ldr	r2, [pc, #56]	; (80028dc <LoopForever+0xe>)
  movs r3, #0
 80028a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028a4:	e002      	b.n	80028ac <LoopCopyDataInit>

080028a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028aa:	3304      	adds	r3, #4

080028ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b0:	d3f9      	bcc.n	80028a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028b2:	4a0b      	ldr	r2, [pc, #44]	; (80028e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028b4:	4c0b      	ldr	r4, [pc, #44]	; (80028e4 <LoopForever+0x16>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b8:	e001      	b.n	80028be <LoopFillZerobss>

080028ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028bc:	3204      	adds	r2, #4

080028be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c0:	d3fb      	bcc.n	80028ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80028c2:	f7ff ffa5 	bl	8002810 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80028c6:	f000 f811 	bl	80028ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80028ca:	f7ff fd17 	bl	80022fc <main>

080028ce <LoopForever>:

LoopForever:
    b LoopForever
 80028ce:	e7fe      	b.n	80028ce <LoopForever>
  ldr   r0, =_estack
 80028d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80028d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d8:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80028dc:	0800299c 	.word	0x0800299c
  ldr r2, =_sbss
 80028e0:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80028e4:	200000e4 	.word	0x200000e4

080028e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80028e8:	e7fe      	b.n	80028e8 <ADC1_COMP_IRQHandler>
	...

080028ec <__libc_init_array>:
 80028ec:	b570      	push	{r4, r5, r6, lr}
 80028ee:	2600      	movs	r6, #0
 80028f0:	4d0c      	ldr	r5, [pc, #48]	; (8002924 <__libc_init_array+0x38>)
 80028f2:	4c0d      	ldr	r4, [pc, #52]	; (8002928 <__libc_init_array+0x3c>)
 80028f4:	1b64      	subs	r4, r4, r5
 80028f6:	10a4      	asrs	r4, r4, #2
 80028f8:	42a6      	cmp	r6, r4
 80028fa:	d109      	bne.n	8002910 <__libc_init_array+0x24>
 80028fc:	2600      	movs	r6, #0
 80028fe:	f000 f821 	bl	8002944 <_init>
 8002902:	4d0a      	ldr	r5, [pc, #40]	; (800292c <__libc_init_array+0x40>)
 8002904:	4c0a      	ldr	r4, [pc, #40]	; (8002930 <__libc_init_array+0x44>)
 8002906:	1b64      	subs	r4, r4, r5
 8002908:	10a4      	asrs	r4, r4, #2
 800290a:	42a6      	cmp	r6, r4
 800290c:	d105      	bne.n	800291a <__libc_init_array+0x2e>
 800290e:	bd70      	pop	{r4, r5, r6, pc}
 8002910:	00b3      	lsls	r3, r6, #2
 8002912:	58eb      	ldr	r3, [r5, r3]
 8002914:	4798      	blx	r3
 8002916:	3601      	adds	r6, #1
 8002918:	e7ee      	b.n	80028f8 <__libc_init_array+0xc>
 800291a:	00b3      	lsls	r3, r6, #2
 800291c:	58eb      	ldr	r3, [r5, r3]
 800291e:	4798      	blx	r3
 8002920:	3601      	adds	r6, #1
 8002922:	e7f2      	b.n	800290a <__libc_init_array+0x1e>
 8002924:	08002994 	.word	0x08002994
 8002928:	08002994 	.word	0x08002994
 800292c:	08002994 	.word	0x08002994
 8002930:	08002998 	.word	0x08002998

08002934 <memset>:
 8002934:	0003      	movs	r3, r0
 8002936:	1882      	adds	r2, r0, r2
 8002938:	4293      	cmp	r3, r2
 800293a:	d100      	bne.n	800293e <memset+0xa>
 800293c:	4770      	bx	lr
 800293e:	7019      	strb	r1, [r3, #0]
 8002940:	3301      	adds	r3, #1
 8002942:	e7f9      	b.n	8002938 <memset+0x4>

08002944 <_init>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr

08002950 <_fini>:
 8002950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002952:	46c0      	nop			; (mov r8, r8)
 8002954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002956:	bc08      	pop	{r3}
 8002958:	469e      	mov	lr, r3
 800295a:	4770      	bx	lr
