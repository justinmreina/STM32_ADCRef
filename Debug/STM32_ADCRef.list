
STM32_ADCRef.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003848  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08003a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ec  20000008  08003a08  00020008  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  200000f4  08003a08  000200f4  2**0
                  ALLOC
  8 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000b0b3  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000018d5  00000000  00000000  0002b0df  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000006c8  00000000  00000000  0002c9b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000610  00000000  00000000  0002d080  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003727  00000000  00000000  0002d690  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000246f  00000000  00000000  00030db7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00033226  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000177c  00000000  00000000  000332a4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000008 	.word	0x20000008
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080038ec 	.word	0x080038ec

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000000c 	.word	0x2000000c
 8000100:	080038ec 	.word	0x080038ec

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_ddiv>:
 800021c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800021e:	4657      	mov	r7, sl
 8000220:	4645      	mov	r5, r8
 8000222:	46de      	mov	lr, fp
 8000224:	464e      	mov	r6, r9
 8000226:	b5e0      	push	{r5, r6, r7, lr}
 8000228:	004c      	lsls	r4, r1, #1
 800022a:	030e      	lsls	r6, r1, #12
 800022c:	b087      	sub	sp, #28
 800022e:	4683      	mov	fp, r0
 8000230:	4692      	mov	sl, r2
 8000232:	001d      	movs	r5, r3
 8000234:	4680      	mov	r8, r0
 8000236:	0b36      	lsrs	r6, r6, #12
 8000238:	0d64      	lsrs	r4, r4, #21
 800023a:	0fcf      	lsrs	r7, r1, #31
 800023c:	2c00      	cmp	r4, #0
 800023e:	d04f      	beq.n	80002e0 <__aeabi_ddiv+0xc4>
 8000240:	4b6f      	ldr	r3, [pc, #444]	; (8000400 <__aeabi_ddiv+0x1e4>)
 8000242:	429c      	cmp	r4, r3
 8000244:	d035      	beq.n	80002b2 <__aeabi_ddiv+0x96>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	0f42      	lsrs	r2, r0, #29
 800024a:	041b      	lsls	r3, r3, #16
 800024c:	00f6      	lsls	r6, r6, #3
 800024e:	4313      	orrs	r3, r2
 8000250:	4333      	orrs	r3, r6
 8000252:	4699      	mov	r9, r3
 8000254:	00c3      	lsls	r3, r0, #3
 8000256:	4698      	mov	r8, r3
 8000258:	4b6a      	ldr	r3, [pc, #424]	; (8000404 <__aeabi_ddiv+0x1e8>)
 800025a:	2600      	movs	r6, #0
 800025c:	469c      	mov	ip, r3
 800025e:	2300      	movs	r3, #0
 8000260:	4464      	add	r4, ip
 8000262:	9303      	str	r3, [sp, #12]
 8000264:	032b      	lsls	r3, r5, #12
 8000266:	0b1b      	lsrs	r3, r3, #12
 8000268:	469b      	mov	fp, r3
 800026a:	006b      	lsls	r3, r5, #1
 800026c:	0fed      	lsrs	r5, r5, #31
 800026e:	4650      	mov	r0, sl
 8000270:	0d5b      	lsrs	r3, r3, #21
 8000272:	9501      	str	r5, [sp, #4]
 8000274:	d05e      	beq.n	8000334 <__aeabi_ddiv+0x118>
 8000276:	4a62      	ldr	r2, [pc, #392]	; (8000400 <__aeabi_ddiv+0x1e4>)
 8000278:	4293      	cmp	r3, r2
 800027a:	d053      	beq.n	8000324 <__aeabi_ddiv+0x108>
 800027c:	465a      	mov	r2, fp
 800027e:	00d1      	lsls	r1, r2, #3
 8000280:	2280      	movs	r2, #128	; 0x80
 8000282:	0f40      	lsrs	r0, r0, #29
 8000284:	0412      	lsls	r2, r2, #16
 8000286:	4302      	orrs	r2, r0
 8000288:	430a      	orrs	r2, r1
 800028a:	4693      	mov	fp, r2
 800028c:	4652      	mov	r2, sl
 800028e:	00d1      	lsls	r1, r2, #3
 8000290:	4a5c      	ldr	r2, [pc, #368]	; (8000404 <__aeabi_ddiv+0x1e8>)
 8000292:	4694      	mov	ip, r2
 8000294:	2200      	movs	r2, #0
 8000296:	4463      	add	r3, ip
 8000298:	0038      	movs	r0, r7
 800029a:	4068      	eors	r0, r5
 800029c:	4684      	mov	ip, r0
 800029e:	9002      	str	r0, [sp, #8]
 80002a0:	1ae4      	subs	r4, r4, r3
 80002a2:	4316      	orrs	r6, r2
 80002a4:	2e0f      	cmp	r6, #15
 80002a6:	d900      	bls.n	80002aa <__aeabi_ddiv+0x8e>
 80002a8:	e0b4      	b.n	8000414 <__aeabi_ddiv+0x1f8>
 80002aa:	4b57      	ldr	r3, [pc, #348]	; (8000408 <__aeabi_ddiv+0x1ec>)
 80002ac:	00b6      	lsls	r6, r6, #2
 80002ae:	599b      	ldr	r3, [r3, r6]
 80002b0:	469f      	mov	pc, r3
 80002b2:	0003      	movs	r3, r0
 80002b4:	4333      	orrs	r3, r6
 80002b6:	4699      	mov	r9, r3
 80002b8:	d16c      	bne.n	8000394 <__aeabi_ddiv+0x178>
 80002ba:	2300      	movs	r3, #0
 80002bc:	4698      	mov	r8, r3
 80002be:	3302      	adds	r3, #2
 80002c0:	2608      	movs	r6, #8
 80002c2:	9303      	str	r3, [sp, #12]
 80002c4:	e7ce      	b.n	8000264 <__aeabi_ddiv+0x48>
 80002c6:	46cb      	mov	fp, r9
 80002c8:	4641      	mov	r1, r8
 80002ca:	9a03      	ldr	r2, [sp, #12]
 80002cc:	9701      	str	r7, [sp, #4]
 80002ce:	2a02      	cmp	r2, #2
 80002d0:	d165      	bne.n	800039e <__aeabi_ddiv+0x182>
 80002d2:	9b01      	ldr	r3, [sp, #4]
 80002d4:	4c4a      	ldr	r4, [pc, #296]	; (8000400 <__aeabi_ddiv+0x1e4>)
 80002d6:	469c      	mov	ip, r3
 80002d8:	2300      	movs	r3, #0
 80002da:	2200      	movs	r2, #0
 80002dc:	4698      	mov	r8, r3
 80002de:	e06b      	b.n	80003b8 <__aeabi_ddiv+0x19c>
 80002e0:	0003      	movs	r3, r0
 80002e2:	4333      	orrs	r3, r6
 80002e4:	4699      	mov	r9, r3
 80002e6:	d04e      	beq.n	8000386 <__aeabi_ddiv+0x16a>
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d100      	bne.n	80002ee <__aeabi_ddiv+0xd2>
 80002ec:	e1bc      	b.n	8000668 <__aeabi_ddiv+0x44c>
 80002ee:	0030      	movs	r0, r6
 80002f0:	f000 fd80 	bl	8000df4 <__clzsi2>
 80002f4:	0003      	movs	r3, r0
 80002f6:	3b0b      	subs	r3, #11
 80002f8:	2b1c      	cmp	r3, #28
 80002fa:	dd00      	ble.n	80002fe <__aeabi_ddiv+0xe2>
 80002fc:	e1ac      	b.n	8000658 <__aeabi_ddiv+0x43c>
 80002fe:	221d      	movs	r2, #29
 8000300:	1ad3      	subs	r3, r2, r3
 8000302:	465a      	mov	r2, fp
 8000304:	0001      	movs	r1, r0
 8000306:	40da      	lsrs	r2, r3
 8000308:	3908      	subs	r1, #8
 800030a:	408e      	lsls	r6, r1
 800030c:	0013      	movs	r3, r2
 800030e:	4333      	orrs	r3, r6
 8000310:	4699      	mov	r9, r3
 8000312:	465b      	mov	r3, fp
 8000314:	408b      	lsls	r3, r1
 8000316:	4698      	mov	r8, r3
 8000318:	2300      	movs	r3, #0
 800031a:	4c3c      	ldr	r4, [pc, #240]	; (800040c <__aeabi_ddiv+0x1f0>)
 800031c:	2600      	movs	r6, #0
 800031e:	1a24      	subs	r4, r4, r0
 8000320:	9303      	str	r3, [sp, #12]
 8000322:	e79f      	b.n	8000264 <__aeabi_ddiv+0x48>
 8000324:	4651      	mov	r1, sl
 8000326:	465a      	mov	r2, fp
 8000328:	4311      	orrs	r1, r2
 800032a:	d129      	bne.n	8000380 <__aeabi_ddiv+0x164>
 800032c:	2200      	movs	r2, #0
 800032e:	4693      	mov	fp, r2
 8000330:	3202      	adds	r2, #2
 8000332:	e7b1      	b.n	8000298 <__aeabi_ddiv+0x7c>
 8000334:	4659      	mov	r1, fp
 8000336:	4301      	orrs	r1, r0
 8000338:	d01e      	beq.n	8000378 <__aeabi_ddiv+0x15c>
 800033a:	465b      	mov	r3, fp
 800033c:	2b00      	cmp	r3, #0
 800033e:	d100      	bne.n	8000342 <__aeabi_ddiv+0x126>
 8000340:	e19e      	b.n	8000680 <__aeabi_ddiv+0x464>
 8000342:	4658      	mov	r0, fp
 8000344:	f000 fd56 	bl	8000df4 <__clzsi2>
 8000348:	0003      	movs	r3, r0
 800034a:	3b0b      	subs	r3, #11
 800034c:	2b1c      	cmp	r3, #28
 800034e:	dd00      	ble.n	8000352 <__aeabi_ddiv+0x136>
 8000350:	e18f      	b.n	8000672 <__aeabi_ddiv+0x456>
 8000352:	0002      	movs	r2, r0
 8000354:	4659      	mov	r1, fp
 8000356:	3a08      	subs	r2, #8
 8000358:	4091      	lsls	r1, r2
 800035a:	468b      	mov	fp, r1
 800035c:	211d      	movs	r1, #29
 800035e:	1acb      	subs	r3, r1, r3
 8000360:	4651      	mov	r1, sl
 8000362:	40d9      	lsrs	r1, r3
 8000364:	000b      	movs	r3, r1
 8000366:	4659      	mov	r1, fp
 8000368:	430b      	orrs	r3, r1
 800036a:	4651      	mov	r1, sl
 800036c:	469b      	mov	fp, r3
 800036e:	4091      	lsls	r1, r2
 8000370:	4b26      	ldr	r3, [pc, #152]	; (800040c <__aeabi_ddiv+0x1f0>)
 8000372:	2200      	movs	r2, #0
 8000374:	1a1b      	subs	r3, r3, r0
 8000376:	e78f      	b.n	8000298 <__aeabi_ddiv+0x7c>
 8000378:	2300      	movs	r3, #0
 800037a:	2201      	movs	r2, #1
 800037c:	469b      	mov	fp, r3
 800037e:	e78b      	b.n	8000298 <__aeabi_ddiv+0x7c>
 8000380:	4651      	mov	r1, sl
 8000382:	2203      	movs	r2, #3
 8000384:	e788      	b.n	8000298 <__aeabi_ddiv+0x7c>
 8000386:	2300      	movs	r3, #0
 8000388:	4698      	mov	r8, r3
 800038a:	3301      	adds	r3, #1
 800038c:	2604      	movs	r6, #4
 800038e:	2400      	movs	r4, #0
 8000390:	9303      	str	r3, [sp, #12]
 8000392:	e767      	b.n	8000264 <__aeabi_ddiv+0x48>
 8000394:	2303      	movs	r3, #3
 8000396:	46b1      	mov	r9, r6
 8000398:	9303      	str	r3, [sp, #12]
 800039a:	260c      	movs	r6, #12
 800039c:	e762      	b.n	8000264 <__aeabi_ddiv+0x48>
 800039e:	2a03      	cmp	r2, #3
 80003a0:	d100      	bne.n	80003a4 <__aeabi_ddiv+0x188>
 80003a2:	e25c      	b.n	800085e <__aeabi_ddiv+0x642>
 80003a4:	9b01      	ldr	r3, [sp, #4]
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	d000      	beq.n	80003ac <__aeabi_ddiv+0x190>
 80003aa:	e1e4      	b.n	8000776 <__aeabi_ddiv+0x55a>
 80003ac:	4013      	ands	r3, r2
 80003ae:	469c      	mov	ip, r3
 80003b0:	2300      	movs	r3, #0
 80003b2:	2400      	movs	r4, #0
 80003b4:	2200      	movs	r2, #0
 80003b6:	4698      	mov	r8, r3
 80003b8:	2100      	movs	r1, #0
 80003ba:	0312      	lsls	r2, r2, #12
 80003bc:	0b13      	lsrs	r3, r2, #12
 80003be:	0d0a      	lsrs	r2, r1, #20
 80003c0:	0512      	lsls	r2, r2, #20
 80003c2:	431a      	orrs	r2, r3
 80003c4:	0523      	lsls	r3, r4, #20
 80003c6:	4c12      	ldr	r4, [pc, #72]	; (8000410 <__aeabi_ddiv+0x1f4>)
 80003c8:	4640      	mov	r0, r8
 80003ca:	4022      	ands	r2, r4
 80003cc:	4313      	orrs	r3, r2
 80003ce:	4662      	mov	r2, ip
 80003d0:	005b      	lsls	r3, r3, #1
 80003d2:	07d2      	lsls	r2, r2, #31
 80003d4:	085b      	lsrs	r3, r3, #1
 80003d6:	4313      	orrs	r3, r2
 80003d8:	0019      	movs	r1, r3
 80003da:	b007      	add	sp, #28
 80003dc:	bc3c      	pop	{r2, r3, r4, r5}
 80003de:	4690      	mov	r8, r2
 80003e0:	4699      	mov	r9, r3
 80003e2:	46a2      	mov	sl, r4
 80003e4:	46ab      	mov	fp, r5
 80003e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80003e8:	2300      	movs	r3, #0
 80003ea:	2280      	movs	r2, #128	; 0x80
 80003ec:	469c      	mov	ip, r3
 80003ee:	0312      	lsls	r2, r2, #12
 80003f0:	4698      	mov	r8, r3
 80003f2:	4c03      	ldr	r4, [pc, #12]	; (8000400 <__aeabi_ddiv+0x1e4>)
 80003f4:	e7e0      	b.n	80003b8 <__aeabi_ddiv+0x19c>
 80003f6:	2300      	movs	r3, #0
 80003f8:	4c01      	ldr	r4, [pc, #4]	; (8000400 <__aeabi_ddiv+0x1e4>)
 80003fa:	2200      	movs	r2, #0
 80003fc:	4698      	mov	r8, r3
 80003fe:	e7db      	b.n	80003b8 <__aeabi_ddiv+0x19c>
 8000400:	000007ff 	.word	0x000007ff
 8000404:	fffffc01 	.word	0xfffffc01
 8000408:	08003924 	.word	0x08003924
 800040c:	fffffc0d 	.word	0xfffffc0d
 8000410:	800fffff 	.word	0x800fffff
 8000414:	45d9      	cmp	r9, fp
 8000416:	d900      	bls.n	800041a <__aeabi_ddiv+0x1fe>
 8000418:	e139      	b.n	800068e <__aeabi_ddiv+0x472>
 800041a:	d100      	bne.n	800041e <__aeabi_ddiv+0x202>
 800041c:	e134      	b.n	8000688 <__aeabi_ddiv+0x46c>
 800041e:	2300      	movs	r3, #0
 8000420:	4646      	mov	r6, r8
 8000422:	464d      	mov	r5, r9
 8000424:	469a      	mov	sl, r3
 8000426:	3c01      	subs	r4, #1
 8000428:	465b      	mov	r3, fp
 800042a:	0e0a      	lsrs	r2, r1, #24
 800042c:	021b      	lsls	r3, r3, #8
 800042e:	431a      	orrs	r2, r3
 8000430:	020b      	lsls	r3, r1, #8
 8000432:	0c17      	lsrs	r7, r2, #16
 8000434:	9303      	str	r3, [sp, #12]
 8000436:	0413      	lsls	r3, r2, #16
 8000438:	0c1b      	lsrs	r3, r3, #16
 800043a:	0039      	movs	r1, r7
 800043c:	0028      	movs	r0, r5
 800043e:	4690      	mov	r8, r2
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	f7ff fe5f 	bl	8000104 <__udivsi3>
 8000446:	0002      	movs	r2, r0
 8000448:	9b01      	ldr	r3, [sp, #4]
 800044a:	4683      	mov	fp, r0
 800044c:	435a      	muls	r2, r3
 800044e:	0028      	movs	r0, r5
 8000450:	0039      	movs	r1, r7
 8000452:	4691      	mov	r9, r2
 8000454:	f7ff fedc 	bl	8000210 <__aeabi_uidivmod>
 8000458:	0c35      	lsrs	r5, r6, #16
 800045a:	0409      	lsls	r1, r1, #16
 800045c:	430d      	orrs	r5, r1
 800045e:	45a9      	cmp	r9, r5
 8000460:	d90d      	bls.n	800047e <__aeabi_ddiv+0x262>
 8000462:	465b      	mov	r3, fp
 8000464:	4445      	add	r5, r8
 8000466:	3b01      	subs	r3, #1
 8000468:	45a8      	cmp	r8, r5
 800046a:	d900      	bls.n	800046e <__aeabi_ddiv+0x252>
 800046c:	e13a      	b.n	80006e4 <__aeabi_ddiv+0x4c8>
 800046e:	45a9      	cmp	r9, r5
 8000470:	d800      	bhi.n	8000474 <__aeabi_ddiv+0x258>
 8000472:	e137      	b.n	80006e4 <__aeabi_ddiv+0x4c8>
 8000474:	2302      	movs	r3, #2
 8000476:	425b      	negs	r3, r3
 8000478:	469c      	mov	ip, r3
 800047a:	4445      	add	r5, r8
 800047c:	44e3      	add	fp, ip
 800047e:	464b      	mov	r3, r9
 8000480:	1aeb      	subs	r3, r5, r3
 8000482:	0039      	movs	r1, r7
 8000484:	0018      	movs	r0, r3
 8000486:	9304      	str	r3, [sp, #16]
 8000488:	f7ff fe3c 	bl	8000104 <__udivsi3>
 800048c:	9b01      	ldr	r3, [sp, #4]
 800048e:	0005      	movs	r5, r0
 8000490:	4343      	muls	r3, r0
 8000492:	0039      	movs	r1, r7
 8000494:	9804      	ldr	r0, [sp, #16]
 8000496:	4699      	mov	r9, r3
 8000498:	f7ff feba 	bl	8000210 <__aeabi_uidivmod>
 800049c:	0433      	lsls	r3, r6, #16
 800049e:	0409      	lsls	r1, r1, #16
 80004a0:	0c1b      	lsrs	r3, r3, #16
 80004a2:	430b      	orrs	r3, r1
 80004a4:	4599      	cmp	r9, r3
 80004a6:	d909      	bls.n	80004bc <__aeabi_ddiv+0x2a0>
 80004a8:	4443      	add	r3, r8
 80004aa:	1e6a      	subs	r2, r5, #1
 80004ac:	4598      	cmp	r8, r3
 80004ae:	d900      	bls.n	80004b2 <__aeabi_ddiv+0x296>
 80004b0:	e11a      	b.n	80006e8 <__aeabi_ddiv+0x4cc>
 80004b2:	4599      	cmp	r9, r3
 80004b4:	d800      	bhi.n	80004b8 <__aeabi_ddiv+0x29c>
 80004b6:	e117      	b.n	80006e8 <__aeabi_ddiv+0x4cc>
 80004b8:	3d02      	subs	r5, #2
 80004ba:	4443      	add	r3, r8
 80004bc:	464a      	mov	r2, r9
 80004be:	1a9b      	subs	r3, r3, r2
 80004c0:	465a      	mov	r2, fp
 80004c2:	0412      	lsls	r2, r2, #16
 80004c4:	432a      	orrs	r2, r5
 80004c6:	9903      	ldr	r1, [sp, #12]
 80004c8:	4693      	mov	fp, r2
 80004ca:	0c10      	lsrs	r0, r2, #16
 80004cc:	0c0a      	lsrs	r2, r1, #16
 80004ce:	4691      	mov	r9, r2
 80004d0:	0409      	lsls	r1, r1, #16
 80004d2:	465a      	mov	r2, fp
 80004d4:	0c09      	lsrs	r1, r1, #16
 80004d6:	464e      	mov	r6, r9
 80004d8:	000d      	movs	r5, r1
 80004da:	0412      	lsls	r2, r2, #16
 80004dc:	0c12      	lsrs	r2, r2, #16
 80004de:	4345      	muls	r5, r0
 80004e0:	9105      	str	r1, [sp, #20]
 80004e2:	4351      	muls	r1, r2
 80004e4:	4372      	muls	r2, r6
 80004e6:	4370      	muls	r0, r6
 80004e8:	1952      	adds	r2, r2, r5
 80004ea:	0c0e      	lsrs	r6, r1, #16
 80004ec:	18b2      	adds	r2, r6, r2
 80004ee:	4295      	cmp	r5, r2
 80004f0:	d903      	bls.n	80004fa <__aeabi_ddiv+0x2de>
 80004f2:	2580      	movs	r5, #128	; 0x80
 80004f4:	026d      	lsls	r5, r5, #9
 80004f6:	46ac      	mov	ip, r5
 80004f8:	4460      	add	r0, ip
 80004fa:	0c15      	lsrs	r5, r2, #16
 80004fc:	0409      	lsls	r1, r1, #16
 80004fe:	0412      	lsls	r2, r2, #16
 8000500:	0c09      	lsrs	r1, r1, #16
 8000502:	1828      	adds	r0, r5, r0
 8000504:	1852      	adds	r2, r2, r1
 8000506:	4283      	cmp	r3, r0
 8000508:	d200      	bcs.n	800050c <__aeabi_ddiv+0x2f0>
 800050a:	e0ce      	b.n	80006aa <__aeabi_ddiv+0x48e>
 800050c:	d100      	bne.n	8000510 <__aeabi_ddiv+0x2f4>
 800050e:	e0c8      	b.n	80006a2 <__aeabi_ddiv+0x486>
 8000510:	1a1d      	subs	r5, r3, r0
 8000512:	4653      	mov	r3, sl
 8000514:	1a9e      	subs	r6, r3, r2
 8000516:	45b2      	cmp	sl, r6
 8000518:	4192      	sbcs	r2, r2
 800051a:	4252      	negs	r2, r2
 800051c:	1aab      	subs	r3, r5, r2
 800051e:	469a      	mov	sl, r3
 8000520:	4598      	cmp	r8, r3
 8000522:	d100      	bne.n	8000526 <__aeabi_ddiv+0x30a>
 8000524:	e117      	b.n	8000756 <__aeabi_ddiv+0x53a>
 8000526:	0039      	movs	r1, r7
 8000528:	0018      	movs	r0, r3
 800052a:	f7ff fdeb 	bl	8000104 <__udivsi3>
 800052e:	9b01      	ldr	r3, [sp, #4]
 8000530:	0005      	movs	r5, r0
 8000532:	4343      	muls	r3, r0
 8000534:	0039      	movs	r1, r7
 8000536:	4650      	mov	r0, sl
 8000538:	9304      	str	r3, [sp, #16]
 800053a:	f7ff fe69 	bl	8000210 <__aeabi_uidivmod>
 800053e:	9804      	ldr	r0, [sp, #16]
 8000540:	040b      	lsls	r3, r1, #16
 8000542:	0c31      	lsrs	r1, r6, #16
 8000544:	4319      	orrs	r1, r3
 8000546:	4288      	cmp	r0, r1
 8000548:	d909      	bls.n	800055e <__aeabi_ddiv+0x342>
 800054a:	4441      	add	r1, r8
 800054c:	1e6b      	subs	r3, r5, #1
 800054e:	4588      	cmp	r8, r1
 8000550:	d900      	bls.n	8000554 <__aeabi_ddiv+0x338>
 8000552:	e107      	b.n	8000764 <__aeabi_ddiv+0x548>
 8000554:	4288      	cmp	r0, r1
 8000556:	d800      	bhi.n	800055a <__aeabi_ddiv+0x33e>
 8000558:	e104      	b.n	8000764 <__aeabi_ddiv+0x548>
 800055a:	3d02      	subs	r5, #2
 800055c:	4441      	add	r1, r8
 800055e:	9b04      	ldr	r3, [sp, #16]
 8000560:	1acb      	subs	r3, r1, r3
 8000562:	0018      	movs	r0, r3
 8000564:	0039      	movs	r1, r7
 8000566:	9304      	str	r3, [sp, #16]
 8000568:	f7ff fdcc 	bl	8000104 <__udivsi3>
 800056c:	9b01      	ldr	r3, [sp, #4]
 800056e:	4682      	mov	sl, r0
 8000570:	4343      	muls	r3, r0
 8000572:	0039      	movs	r1, r7
 8000574:	9804      	ldr	r0, [sp, #16]
 8000576:	9301      	str	r3, [sp, #4]
 8000578:	f7ff fe4a 	bl	8000210 <__aeabi_uidivmod>
 800057c:	9801      	ldr	r0, [sp, #4]
 800057e:	040b      	lsls	r3, r1, #16
 8000580:	0431      	lsls	r1, r6, #16
 8000582:	0c09      	lsrs	r1, r1, #16
 8000584:	4319      	orrs	r1, r3
 8000586:	4288      	cmp	r0, r1
 8000588:	d90d      	bls.n	80005a6 <__aeabi_ddiv+0x38a>
 800058a:	4653      	mov	r3, sl
 800058c:	4441      	add	r1, r8
 800058e:	3b01      	subs	r3, #1
 8000590:	4588      	cmp	r8, r1
 8000592:	d900      	bls.n	8000596 <__aeabi_ddiv+0x37a>
 8000594:	e0e8      	b.n	8000768 <__aeabi_ddiv+0x54c>
 8000596:	4288      	cmp	r0, r1
 8000598:	d800      	bhi.n	800059c <__aeabi_ddiv+0x380>
 800059a:	e0e5      	b.n	8000768 <__aeabi_ddiv+0x54c>
 800059c:	2302      	movs	r3, #2
 800059e:	425b      	negs	r3, r3
 80005a0:	469c      	mov	ip, r3
 80005a2:	4441      	add	r1, r8
 80005a4:	44e2      	add	sl, ip
 80005a6:	9b01      	ldr	r3, [sp, #4]
 80005a8:	042d      	lsls	r5, r5, #16
 80005aa:	1ace      	subs	r6, r1, r3
 80005ac:	4651      	mov	r1, sl
 80005ae:	4329      	orrs	r1, r5
 80005b0:	9d05      	ldr	r5, [sp, #20]
 80005b2:	464f      	mov	r7, r9
 80005b4:	002a      	movs	r2, r5
 80005b6:	040b      	lsls	r3, r1, #16
 80005b8:	0c08      	lsrs	r0, r1, #16
 80005ba:	0c1b      	lsrs	r3, r3, #16
 80005bc:	435a      	muls	r2, r3
 80005be:	4345      	muls	r5, r0
 80005c0:	437b      	muls	r3, r7
 80005c2:	4378      	muls	r0, r7
 80005c4:	195b      	adds	r3, r3, r5
 80005c6:	0c17      	lsrs	r7, r2, #16
 80005c8:	18fb      	adds	r3, r7, r3
 80005ca:	429d      	cmp	r5, r3
 80005cc:	d903      	bls.n	80005d6 <__aeabi_ddiv+0x3ba>
 80005ce:	2580      	movs	r5, #128	; 0x80
 80005d0:	026d      	lsls	r5, r5, #9
 80005d2:	46ac      	mov	ip, r5
 80005d4:	4460      	add	r0, ip
 80005d6:	0c1d      	lsrs	r5, r3, #16
 80005d8:	0412      	lsls	r2, r2, #16
 80005da:	041b      	lsls	r3, r3, #16
 80005dc:	0c12      	lsrs	r2, r2, #16
 80005de:	1828      	adds	r0, r5, r0
 80005e0:	189b      	adds	r3, r3, r2
 80005e2:	4286      	cmp	r6, r0
 80005e4:	d200      	bcs.n	80005e8 <__aeabi_ddiv+0x3cc>
 80005e6:	e093      	b.n	8000710 <__aeabi_ddiv+0x4f4>
 80005e8:	d100      	bne.n	80005ec <__aeabi_ddiv+0x3d0>
 80005ea:	e08e      	b.n	800070a <__aeabi_ddiv+0x4ee>
 80005ec:	2301      	movs	r3, #1
 80005ee:	4319      	orrs	r1, r3
 80005f0:	4ba0      	ldr	r3, [pc, #640]	; (8000874 <__aeabi_ddiv+0x658>)
 80005f2:	18e3      	adds	r3, r4, r3
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	dc00      	bgt.n	80005fa <__aeabi_ddiv+0x3de>
 80005f8:	e099      	b.n	800072e <__aeabi_ddiv+0x512>
 80005fa:	074a      	lsls	r2, r1, #29
 80005fc:	d000      	beq.n	8000600 <__aeabi_ddiv+0x3e4>
 80005fe:	e09e      	b.n	800073e <__aeabi_ddiv+0x522>
 8000600:	465a      	mov	r2, fp
 8000602:	01d2      	lsls	r2, r2, #7
 8000604:	d506      	bpl.n	8000614 <__aeabi_ddiv+0x3f8>
 8000606:	465a      	mov	r2, fp
 8000608:	4b9b      	ldr	r3, [pc, #620]	; (8000878 <__aeabi_ddiv+0x65c>)
 800060a:	401a      	ands	r2, r3
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	4693      	mov	fp, r2
 8000610:	00db      	lsls	r3, r3, #3
 8000612:	18e3      	adds	r3, r4, r3
 8000614:	4a99      	ldr	r2, [pc, #612]	; (800087c <__aeabi_ddiv+0x660>)
 8000616:	4293      	cmp	r3, r2
 8000618:	dd68      	ble.n	80006ec <__aeabi_ddiv+0x4d0>
 800061a:	2301      	movs	r3, #1
 800061c:	9a02      	ldr	r2, [sp, #8]
 800061e:	4c98      	ldr	r4, [pc, #608]	; (8000880 <__aeabi_ddiv+0x664>)
 8000620:	401a      	ands	r2, r3
 8000622:	2300      	movs	r3, #0
 8000624:	4694      	mov	ip, r2
 8000626:	4698      	mov	r8, r3
 8000628:	2200      	movs	r2, #0
 800062a:	e6c5      	b.n	80003b8 <__aeabi_ddiv+0x19c>
 800062c:	2280      	movs	r2, #128	; 0x80
 800062e:	464b      	mov	r3, r9
 8000630:	0312      	lsls	r2, r2, #12
 8000632:	4213      	tst	r3, r2
 8000634:	d00a      	beq.n	800064c <__aeabi_ddiv+0x430>
 8000636:	465b      	mov	r3, fp
 8000638:	4213      	tst	r3, r2
 800063a:	d106      	bne.n	800064a <__aeabi_ddiv+0x42e>
 800063c:	431a      	orrs	r2, r3
 800063e:	0312      	lsls	r2, r2, #12
 8000640:	0b12      	lsrs	r2, r2, #12
 8000642:	46ac      	mov	ip, r5
 8000644:	4688      	mov	r8, r1
 8000646:	4c8e      	ldr	r4, [pc, #568]	; (8000880 <__aeabi_ddiv+0x664>)
 8000648:	e6b6      	b.n	80003b8 <__aeabi_ddiv+0x19c>
 800064a:	464b      	mov	r3, r9
 800064c:	431a      	orrs	r2, r3
 800064e:	0312      	lsls	r2, r2, #12
 8000650:	0b12      	lsrs	r2, r2, #12
 8000652:	46bc      	mov	ip, r7
 8000654:	4c8a      	ldr	r4, [pc, #552]	; (8000880 <__aeabi_ddiv+0x664>)
 8000656:	e6af      	b.n	80003b8 <__aeabi_ddiv+0x19c>
 8000658:	0003      	movs	r3, r0
 800065a:	465a      	mov	r2, fp
 800065c:	3b28      	subs	r3, #40	; 0x28
 800065e:	409a      	lsls	r2, r3
 8000660:	2300      	movs	r3, #0
 8000662:	4691      	mov	r9, r2
 8000664:	4698      	mov	r8, r3
 8000666:	e657      	b.n	8000318 <__aeabi_ddiv+0xfc>
 8000668:	4658      	mov	r0, fp
 800066a:	f000 fbc3 	bl	8000df4 <__clzsi2>
 800066e:	3020      	adds	r0, #32
 8000670:	e640      	b.n	80002f4 <__aeabi_ddiv+0xd8>
 8000672:	0003      	movs	r3, r0
 8000674:	4652      	mov	r2, sl
 8000676:	3b28      	subs	r3, #40	; 0x28
 8000678:	409a      	lsls	r2, r3
 800067a:	2100      	movs	r1, #0
 800067c:	4693      	mov	fp, r2
 800067e:	e677      	b.n	8000370 <__aeabi_ddiv+0x154>
 8000680:	f000 fbb8 	bl	8000df4 <__clzsi2>
 8000684:	3020      	adds	r0, #32
 8000686:	e65f      	b.n	8000348 <__aeabi_ddiv+0x12c>
 8000688:	4588      	cmp	r8, r1
 800068a:	d200      	bcs.n	800068e <__aeabi_ddiv+0x472>
 800068c:	e6c7      	b.n	800041e <__aeabi_ddiv+0x202>
 800068e:	464b      	mov	r3, r9
 8000690:	07de      	lsls	r6, r3, #31
 8000692:	085d      	lsrs	r5, r3, #1
 8000694:	4643      	mov	r3, r8
 8000696:	085b      	lsrs	r3, r3, #1
 8000698:	431e      	orrs	r6, r3
 800069a:	4643      	mov	r3, r8
 800069c:	07db      	lsls	r3, r3, #31
 800069e:	469a      	mov	sl, r3
 80006a0:	e6c2      	b.n	8000428 <__aeabi_ddiv+0x20c>
 80006a2:	2500      	movs	r5, #0
 80006a4:	4592      	cmp	sl, r2
 80006a6:	d300      	bcc.n	80006aa <__aeabi_ddiv+0x48e>
 80006a8:	e733      	b.n	8000512 <__aeabi_ddiv+0x2f6>
 80006aa:	9e03      	ldr	r6, [sp, #12]
 80006ac:	4659      	mov	r1, fp
 80006ae:	46b4      	mov	ip, r6
 80006b0:	44e2      	add	sl, ip
 80006b2:	45b2      	cmp	sl, r6
 80006b4:	41ad      	sbcs	r5, r5
 80006b6:	426d      	negs	r5, r5
 80006b8:	4445      	add	r5, r8
 80006ba:	18eb      	adds	r3, r5, r3
 80006bc:	3901      	subs	r1, #1
 80006be:	4598      	cmp	r8, r3
 80006c0:	d207      	bcs.n	80006d2 <__aeabi_ddiv+0x4b6>
 80006c2:	4298      	cmp	r0, r3
 80006c4:	d900      	bls.n	80006c8 <__aeabi_ddiv+0x4ac>
 80006c6:	e07f      	b.n	80007c8 <__aeabi_ddiv+0x5ac>
 80006c8:	d100      	bne.n	80006cc <__aeabi_ddiv+0x4b0>
 80006ca:	e0bc      	b.n	8000846 <__aeabi_ddiv+0x62a>
 80006cc:	1a1d      	subs	r5, r3, r0
 80006ce:	468b      	mov	fp, r1
 80006d0:	e71f      	b.n	8000512 <__aeabi_ddiv+0x2f6>
 80006d2:	4598      	cmp	r8, r3
 80006d4:	d1fa      	bne.n	80006cc <__aeabi_ddiv+0x4b0>
 80006d6:	9d03      	ldr	r5, [sp, #12]
 80006d8:	4555      	cmp	r5, sl
 80006da:	d9f2      	bls.n	80006c2 <__aeabi_ddiv+0x4a6>
 80006dc:	4643      	mov	r3, r8
 80006de:	468b      	mov	fp, r1
 80006e0:	1a1d      	subs	r5, r3, r0
 80006e2:	e716      	b.n	8000512 <__aeabi_ddiv+0x2f6>
 80006e4:	469b      	mov	fp, r3
 80006e6:	e6ca      	b.n	800047e <__aeabi_ddiv+0x262>
 80006e8:	0015      	movs	r5, r2
 80006ea:	e6e7      	b.n	80004bc <__aeabi_ddiv+0x2a0>
 80006ec:	465a      	mov	r2, fp
 80006ee:	08c9      	lsrs	r1, r1, #3
 80006f0:	0752      	lsls	r2, r2, #29
 80006f2:	430a      	orrs	r2, r1
 80006f4:	055b      	lsls	r3, r3, #21
 80006f6:	4690      	mov	r8, r2
 80006f8:	0d5c      	lsrs	r4, r3, #21
 80006fa:	465a      	mov	r2, fp
 80006fc:	2301      	movs	r3, #1
 80006fe:	9902      	ldr	r1, [sp, #8]
 8000700:	0252      	lsls	r2, r2, #9
 8000702:	4019      	ands	r1, r3
 8000704:	0b12      	lsrs	r2, r2, #12
 8000706:	468c      	mov	ip, r1
 8000708:	e656      	b.n	80003b8 <__aeabi_ddiv+0x19c>
 800070a:	2b00      	cmp	r3, #0
 800070c:	d100      	bne.n	8000710 <__aeabi_ddiv+0x4f4>
 800070e:	e76f      	b.n	80005f0 <__aeabi_ddiv+0x3d4>
 8000710:	4446      	add	r6, r8
 8000712:	1e4a      	subs	r2, r1, #1
 8000714:	45b0      	cmp	r8, r6
 8000716:	d929      	bls.n	800076c <__aeabi_ddiv+0x550>
 8000718:	0011      	movs	r1, r2
 800071a:	4286      	cmp	r6, r0
 800071c:	d000      	beq.n	8000720 <__aeabi_ddiv+0x504>
 800071e:	e765      	b.n	80005ec <__aeabi_ddiv+0x3d0>
 8000720:	9a03      	ldr	r2, [sp, #12]
 8000722:	4293      	cmp	r3, r2
 8000724:	d000      	beq.n	8000728 <__aeabi_ddiv+0x50c>
 8000726:	e761      	b.n	80005ec <__aeabi_ddiv+0x3d0>
 8000728:	e762      	b.n	80005f0 <__aeabi_ddiv+0x3d4>
 800072a:	2101      	movs	r1, #1
 800072c:	4249      	negs	r1, r1
 800072e:	2001      	movs	r0, #1
 8000730:	1ac2      	subs	r2, r0, r3
 8000732:	2a38      	cmp	r2, #56	; 0x38
 8000734:	dd21      	ble.n	800077a <__aeabi_ddiv+0x55e>
 8000736:	9b02      	ldr	r3, [sp, #8]
 8000738:	4003      	ands	r3, r0
 800073a:	469c      	mov	ip, r3
 800073c:	e638      	b.n	80003b0 <__aeabi_ddiv+0x194>
 800073e:	220f      	movs	r2, #15
 8000740:	400a      	ands	r2, r1
 8000742:	2a04      	cmp	r2, #4
 8000744:	d100      	bne.n	8000748 <__aeabi_ddiv+0x52c>
 8000746:	e75b      	b.n	8000600 <__aeabi_ddiv+0x3e4>
 8000748:	000a      	movs	r2, r1
 800074a:	1d11      	adds	r1, r2, #4
 800074c:	4291      	cmp	r1, r2
 800074e:	4192      	sbcs	r2, r2
 8000750:	4252      	negs	r2, r2
 8000752:	4493      	add	fp, r2
 8000754:	e754      	b.n	8000600 <__aeabi_ddiv+0x3e4>
 8000756:	4b47      	ldr	r3, [pc, #284]	; (8000874 <__aeabi_ddiv+0x658>)
 8000758:	18e3      	adds	r3, r4, r3
 800075a:	2b00      	cmp	r3, #0
 800075c:	dde5      	ble.n	800072a <__aeabi_ddiv+0x50e>
 800075e:	2201      	movs	r2, #1
 8000760:	4252      	negs	r2, r2
 8000762:	e7f2      	b.n	800074a <__aeabi_ddiv+0x52e>
 8000764:	001d      	movs	r5, r3
 8000766:	e6fa      	b.n	800055e <__aeabi_ddiv+0x342>
 8000768:	469a      	mov	sl, r3
 800076a:	e71c      	b.n	80005a6 <__aeabi_ddiv+0x38a>
 800076c:	42b0      	cmp	r0, r6
 800076e:	d839      	bhi.n	80007e4 <__aeabi_ddiv+0x5c8>
 8000770:	d06e      	beq.n	8000850 <__aeabi_ddiv+0x634>
 8000772:	0011      	movs	r1, r2
 8000774:	e73a      	b.n	80005ec <__aeabi_ddiv+0x3d0>
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	e73a      	b.n	80005f0 <__aeabi_ddiv+0x3d4>
 800077a:	2a1f      	cmp	r2, #31
 800077c:	dc3c      	bgt.n	80007f8 <__aeabi_ddiv+0x5dc>
 800077e:	2320      	movs	r3, #32
 8000780:	1a9b      	subs	r3, r3, r2
 8000782:	000c      	movs	r4, r1
 8000784:	4658      	mov	r0, fp
 8000786:	4099      	lsls	r1, r3
 8000788:	4098      	lsls	r0, r3
 800078a:	1e4b      	subs	r3, r1, #1
 800078c:	4199      	sbcs	r1, r3
 800078e:	465b      	mov	r3, fp
 8000790:	40d4      	lsrs	r4, r2
 8000792:	40d3      	lsrs	r3, r2
 8000794:	4320      	orrs	r0, r4
 8000796:	4308      	orrs	r0, r1
 8000798:	001a      	movs	r2, r3
 800079a:	0743      	lsls	r3, r0, #29
 800079c:	d009      	beq.n	80007b2 <__aeabi_ddiv+0x596>
 800079e:	230f      	movs	r3, #15
 80007a0:	4003      	ands	r3, r0
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	d005      	beq.n	80007b2 <__aeabi_ddiv+0x596>
 80007a6:	0001      	movs	r1, r0
 80007a8:	1d08      	adds	r0, r1, #4
 80007aa:	4288      	cmp	r0, r1
 80007ac:	419b      	sbcs	r3, r3
 80007ae:	425b      	negs	r3, r3
 80007b0:	18d2      	adds	r2, r2, r3
 80007b2:	0213      	lsls	r3, r2, #8
 80007b4:	d53a      	bpl.n	800082c <__aeabi_ddiv+0x610>
 80007b6:	2301      	movs	r3, #1
 80007b8:	9a02      	ldr	r2, [sp, #8]
 80007ba:	2401      	movs	r4, #1
 80007bc:	401a      	ands	r2, r3
 80007be:	2300      	movs	r3, #0
 80007c0:	4694      	mov	ip, r2
 80007c2:	4698      	mov	r8, r3
 80007c4:	2200      	movs	r2, #0
 80007c6:	e5f7      	b.n	80003b8 <__aeabi_ddiv+0x19c>
 80007c8:	2102      	movs	r1, #2
 80007ca:	4249      	negs	r1, r1
 80007cc:	468c      	mov	ip, r1
 80007ce:	9d03      	ldr	r5, [sp, #12]
 80007d0:	44e3      	add	fp, ip
 80007d2:	46ac      	mov	ip, r5
 80007d4:	44e2      	add	sl, ip
 80007d6:	45aa      	cmp	sl, r5
 80007d8:	41ad      	sbcs	r5, r5
 80007da:	426d      	negs	r5, r5
 80007dc:	4445      	add	r5, r8
 80007de:	18ed      	adds	r5, r5, r3
 80007e0:	1a2d      	subs	r5, r5, r0
 80007e2:	e696      	b.n	8000512 <__aeabi_ddiv+0x2f6>
 80007e4:	1e8a      	subs	r2, r1, #2
 80007e6:	9903      	ldr	r1, [sp, #12]
 80007e8:	004d      	lsls	r5, r1, #1
 80007ea:	428d      	cmp	r5, r1
 80007ec:	4189      	sbcs	r1, r1
 80007ee:	4249      	negs	r1, r1
 80007f0:	4441      	add	r1, r8
 80007f2:	1876      	adds	r6, r6, r1
 80007f4:	9503      	str	r5, [sp, #12]
 80007f6:	e78f      	b.n	8000718 <__aeabi_ddiv+0x4fc>
 80007f8:	201f      	movs	r0, #31
 80007fa:	4240      	negs	r0, r0
 80007fc:	1ac3      	subs	r3, r0, r3
 80007fe:	4658      	mov	r0, fp
 8000800:	40d8      	lsrs	r0, r3
 8000802:	0003      	movs	r3, r0
 8000804:	2a20      	cmp	r2, #32
 8000806:	d028      	beq.n	800085a <__aeabi_ddiv+0x63e>
 8000808:	2040      	movs	r0, #64	; 0x40
 800080a:	465d      	mov	r5, fp
 800080c:	1a82      	subs	r2, r0, r2
 800080e:	4095      	lsls	r5, r2
 8000810:	4329      	orrs	r1, r5
 8000812:	1e4a      	subs	r2, r1, #1
 8000814:	4191      	sbcs	r1, r2
 8000816:	4319      	orrs	r1, r3
 8000818:	2307      	movs	r3, #7
 800081a:	2200      	movs	r2, #0
 800081c:	400b      	ands	r3, r1
 800081e:	d009      	beq.n	8000834 <__aeabi_ddiv+0x618>
 8000820:	230f      	movs	r3, #15
 8000822:	2200      	movs	r2, #0
 8000824:	400b      	ands	r3, r1
 8000826:	0008      	movs	r0, r1
 8000828:	2b04      	cmp	r3, #4
 800082a:	d1bd      	bne.n	80007a8 <__aeabi_ddiv+0x58c>
 800082c:	0001      	movs	r1, r0
 800082e:	0753      	lsls	r3, r2, #29
 8000830:	0252      	lsls	r2, r2, #9
 8000832:	0b12      	lsrs	r2, r2, #12
 8000834:	08c9      	lsrs	r1, r1, #3
 8000836:	4319      	orrs	r1, r3
 8000838:	2301      	movs	r3, #1
 800083a:	4688      	mov	r8, r1
 800083c:	9902      	ldr	r1, [sp, #8]
 800083e:	2400      	movs	r4, #0
 8000840:	4019      	ands	r1, r3
 8000842:	468c      	mov	ip, r1
 8000844:	e5b8      	b.n	80003b8 <__aeabi_ddiv+0x19c>
 8000846:	4552      	cmp	r2, sl
 8000848:	d8be      	bhi.n	80007c8 <__aeabi_ddiv+0x5ac>
 800084a:	468b      	mov	fp, r1
 800084c:	2500      	movs	r5, #0
 800084e:	e660      	b.n	8000512 <__aeabi_ddiv+0x2f6>
 8000850:	9d03      	ldr	r5, [sp, #12]
 8000852:	429d      	cmp	r5, r3
 8000854:	d3c6      	bcc.n	80007e4 <__aeabi_ddiv+0x5c8>
 8000856:	0011      	movs	r1, r2
 8000858:	e762      	b.n	8000720 <__aeabi_ddiv+0x504>
 800085a:	2500      	movs	r5, #0
 800085c:	e7d8      	b.n	8000810 <__aeabi_ddiv+0x5f4>
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	465b      	mov	r3, fp
 8000862:	0312      	lsls	r2, r2, #12
 8000864:	431a      	orrs	r2, r3
 8000866:	9b01      	ldr	r3, [sp, #4]
 8000868:	0312      	lsls	r2, r2, #12
 800086a:	0b12      	lsrs	r2, r2, #12
 800086c:	469c      	mov	ip, r3
 800086e:	4688      	mov	r8, r1
 8000870:	4c03      	ldr	r4, [pc, #12]	; (8000880 <__aeabi_ddiv+0x664>)
 8000872:	e5a1      	b.n	80003b8 <__aeabi_ddiv+0x19c>
 8000874:	000003ff 	.word	0x000003ff
 8000878:	feffffff 	.word	0xfeffffff
 800087c:	000007fe 	.word	0x000007fe
 8000880:	000007ff 	.word	0x000007ff

08000884 <__aeabi_dmul>:
 8000884:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000886:	4657      	mov	r7, sl
 8000888:	4645      	mov	r5, r8
 800088a:	46de      	mov	lr, fp
 800088c:	464e      	mov	r6, r9
 800088e:	b5e0      	push	{r5, r6, r7, lr}
 8000890:	030c      	lsls	r4, r1, #12
 8000892:	4698      	mov	r8, r3
 8000894:	004e      	lsls	r6, r1, #1
 8000896:	0b23      	lsrs	r3, r4, #12
 8000898:	b087      	sub	sp, #28
 800089a:	0007      	movs	r7, r0
 800089c:	4692      	mov	sl, r2
 800089e:	469b      	mov	fp, r3
 80008a0:	0d76      	lsrs	r6, r6, #21
 80008a2:	0fcd      	lsrs	r5, r1, #31
 80008a4:	2e00      	cmp	r6, #0
 80008a6:	d06b      	beq.n	8000980 <__aeabi_dmul+0xfc>
 80008a8:	4b6d      	ldr	r3, [pc, #436]	; (8000a60 <__aeabi_dmul+0x1dc>)
 80008aa:	429e      	cmp	r6, r3
 80008ac:	d035      	beq.n	800091a <__aeabi_dmul+0x96>
 80008ae:	2480      	movs	r4, #128	; 0x80
 80008b0:	465b      	mov	r3, fp
 80008b2:	0f42      	lsrs	r2, r0, #29
 80008b4:	0424      	lsls	r4, r4, #16
 80008b6:	00db      	lsls	r3, r3, #3
 80008b8:	4314      	orrs	r4, r2
 80008ba:	431c      	orrs	r4, r3
 80008bc:	00c3      	lsls	r3, r0, #3
 80008be:	4699      	mov	r9, r3
 80008c0:	4b68      	ldr	r3, [pc, #416]	; (8000a64 <__aeabi_dmul+0x1e0>)
 80008c2:	46a3      	mov	fp, r4
 80008c4:	469c      	mov	ip, r3
 80008c6:	2300      	movs	r3, #0
 80008c8:	2700      	movs	r7, #0
 80008ca:	4466      	add	r6, ip
 80008cc:	9302      	str	r3, [sp, #8]
 80008ce:	4643      	mov	r3, r8
 80008d0:	031c      	lsls	r4, r3, #12
 80008d2:	005a      	lsls	r2, r3, #1
 80008d4:	0fdb      	lsrs	r3, r3, #31
 80008d6:	4650      	mov	r0, sl
 80008d8:	0b24      	lsrs	r4, r4, #12
 80008da:	0d52      	lsrs	r2, r2, #21
 80008dc:	4698      	mov	r8, r3
 80008de:	d100      	bne.n	80008e2 <__aeabi_dmul+0x5e>
 80008e0:	e076      	b.n	80009d0 <__aeabi_dmul+0x14c>
 80008e2:	4b5f      	ldr	r3, [pc, #380]	; (8000a60 <__aeabi_dmul+0x1dc>)
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d06d      	beq.n	80009c4 <__aeabi_dmul+0x140>
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	0f41      	lsrs	r1, r0, #29
 80008ec:	041b      	lsls	r3, r3, #16
 80008ee:	430b      	orrs	r3, r1
 80008f0:	495c      	ldr	r1, [pc, #368]	; (8000a64 <__aeabi_dmul+0x1e0>)
 80008f2:	00e4      	lsls	r4, r4, #3
 80008f4:	468c      	mov	ip, r1
 80008f6:	431c      	orrs	r4, r3
 80008f8:	00c3      	lsls	r3, r0, #3
 80008fa:	2000      	movs	r0, #0
 80008fc:	4462      	add	r2, ip
 80008fe:	4641      	mov	r1, r8
 8000900:	18b6      	adds	r6, r6, r2
 8000902:	4069      	eors	r1, r5
 8000904:	1c72      	adds	r2, r6, #1
 8000906:	9101      	str	r1, [sp, #4]
 8000908:	4694      	mov	ip, r2
 800090a:	4307      	orrs	r7, r0
 800090c:	2f0f      	cmp	r7, #15
 800090e:	d900      	bls.n	8000912 <__aeabi_dmul+0x8e>
 8000910:	e0b0      	b.n	8000a74 <__aeabi_dmul+0x1f0>
 8000912:	4a55      	ldr	r2, [pc, #340]	; (8000a68 <__aeabi_dmul+0x1e4>)
 8000914:	00bf      	lsls	r7, r7, #2
 8000916:	59d2      	ldr	r2, [r2, r7]
 8000918:	4697      	mov	pc, r2
 800091a:	465b      	mov	r3, fp
 800091c:	4303      	orrs	r3, r0
 800091e:	4699      	mov	r9, r3
 8000920:	d000      	beq.n	8000924 <__aeabi_dmul+0xa0>
 8000922:	e087      	b.n	8000a34 <__aeabi_dmul+0x1b0>
 8000924:	2300      	movs	r3, #0
 8000926:	469b      	mov	fp, r3
 8000928:	3302      	adds	r3, #2
 800092a:	2708      	movs	r7, #8
 800092c:	9302      	str	r3, [sp, #8]
 800092e:	e7ce      	b.n	80008ce <__aeabi_dmul+0x4a>
 8000930:	4642      	mov	r2, r8
 8000932:	9201      	str	r2, [sp, #4]
 8000934:	2802      	cmp	r0, #2
 8000936:	d067      	beq.n	8000a08 <__aeabi_dmul+0x184>
 8000938:	2803      	cmp	r0, #3
 800093a:	d100      	bne.n	800093e <__aeabi_dmul+0xba>
 800093c:	e20e      	b.n	8000d5c <__aeabi_dmul+0x4d8>
 800093e:	2801      	cmp	r0, #1
 8000940:	d000      	beq.n	8000944 <__aeabi_dmul+0xc0>
 8000942:	e162      	b.n	8000c0a <__aeabi_dmul+0x386>
 8000944:	2300      	movs	r3, #0
 8000946:	2400      	movs	r4, #0
 8000948:	2200      	movs	r2, #0
 800094a:	4699      	mov	r9, r3
 800094c:	9901      	ldr	r1, [sp, #4]
 800094e:	4001      	ands	r1, r0
 8000950:	b2cd      	uxtb	r5, r1
 8000952:	2100      	movs	r1, #0
 8000954:	0312      	lsls	r2, r2, #12
 8000956:	0d0b      	lsrs	r3, r1, #20
 8000958:	0b12      	lsrs	r2, r2, #12
 800095a:	051b      	lsls	r3, r3, #20
 800095c:	4313      	orrs	r3, r2
 800095e:	4a43      	ldr	r2, [pc, #268]	; (8000a6c <__aeabi_dmul+0x1e8>)
 8000960:	0524      	lsls	r4, r4, #20
 8000962:	4013      	ands	r3, r2
 8000964:	431c      	orrs	r4, r3
 8000966:	0064      	lsls	r4, r4, #1
 8000968:	07ed      	lsls	r5, r5, #31
 800096a:	0864      	lsrs	r4, r4, #1
 800096c:	432c      	orrs	r4, r5
 800096e:	4648      	mov	r0, r9
 8000970:	0021      	movs	r1, r4
 8000972:	b007      	add	sp, #28
 8000974:	bc3c      	pop	{r2, r3, r4, r5}
 8000976:	4690      	mov	r8, r2
 8000978:	4699      	mov	r9, r3
 800097a:	46a2      	mov	sl, r4
 800097c:	46ab      	mov	fp, r5
 800097e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000980:	4303      	orrs	r3, r0
 8000982:	4699      	mov	r9, r3
 8000984:	d04f      	beq.n	8000a26 <__aeabi_dmul+0x1a2>
 8000986:	465b      	mov	r3, fp
 8000988:	2b00      	cmp	r3, #0
 800098a:	d100      	bne.n	800098e <__aeabi_dmul+0x10a>
 800098c:	e189      	b.n	8000ca2 <__aeabi_dmul+0x41e>
 800098e:	4658      	mov	r0, fp
 8000990:	f000 fa30 	bl	8000df4 <__clzsi2>
 8000994:	0003      	movs	r3, r0
 8000996:	3b0b      	subs	r3, #11
 8000998:	2b1c      	cmp	r3, #28
 800099a:	dd00      	ble.n	800099e <__aeabi_dmul+0x11a>
 800099c:	e17a      	b.n	8000c94 <__aeabi_dmul+0x410>
 800099e:	221d      	movs	r2, #29
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	003a      	movs	r2, r7
 80009a4:	0001      	movs	r1, r0
 80009a6:	465c      	mov	r4, fp
 80009a8:	40da      	lsrs	r2, r3
 80009aa:	3908      	subs	r1, #8
 80009ac:	408c      	lsls	r4, r1
 80009ae:	0013      	movs	r3, r2
 80009b0:	408f      	lsls	r7, r1
 80009b2:	4323      	orrs	r3, r4
 80009b4:	469b      	mov	fp, r3
 80009b6:	46b9      	mov	r9, r7
 80009b8:	2300      	movs	r3, #0
 80009ba:	4e2d      	ldr	r6, [pc, #180]	; (8000a70 <__aeabi_dmul+0x1ec>)
 80009bc:	2700      	movs	r7, #0
 80009be:	1a36      	subs	r6, r6, r0
 80009c0:	9302      	str	r3, [sp, #8]
 80009c2:	e784      	b.n	80008ce <__aeabi_dmul+0x4a>
 80009c4:	4653      	mov	r3, sl
 80009c6:	4323      	orrs	r3, r4
 80009c8:	d12a      	bne.n	8000a20 <__aeabi_dmul+0x19c>
 80009ca:	2400      	movs	r4, #0
 80009cc:	2002      	movs	r0, #2
 80009ce:	e796      	b.n	80008fe <__aeabi_dmul+0x7a>
 80009d0:	4653      	mov	r3, sl
 80009d2:	4323      	orrs	r3, r4
 80009d4:	d020      	beq.n	8000a18 <__aeabi_dmul+0x194>
 80009d6:	2c00      	cmp	r4, #0
 80009d8:	d100      	bne.n	80009dc <__aeabi_dmul+0x158>
 80009da:	e157      	b.n	8000c8c <__aeabi_dmul+0x408>
 80009dc:	0020      	movs	r0, r4
 80009de:	f000 fa09 	bl	8000df4 <__clzsi2>
 80009e2:	0003      	movs	r3, r0
 80009e4:	3b0b      	subs	r3, #11
 80009e6:	2b1c      	cmp	r3, #28
 80009e8:	dd00      	ble.n	80009ec <__aeabi_dmul+0x168>
 80009ea:	e149      	b.n	8000c80 <__aeabi_dmul+0x3fc>
 80009ec:	211d      	movs	r1, #29
 80009ee:	1acb      	subs	r3, r1, r3
 80009f0:	4651      	mov	r1, sl
 80009f2:	0002      	movs	r2, r0
 80009f4:	40d9      	lsrs	r1, r3
 80009f6:	4653      	mov	r3, sl
 80009f8:	3a08      	subs	r2, #8
 80009fa:	4094      	lsls	r4, r2
 80009fc:	4093      	lsls	r3, r2
 80009fe:	430c      	orrs	r4, r1
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <__aeabi_dmul+0x1ec>)
 8000a02:	1a12      	subs	r2, r2, r0
 8000a04:	2000      	movs	r0, #0
 8000a06:	e77a      	b.n	80008fe <__aeabi_dmul+0x7a>
 8000a08:	2501      	movs	r5, #1
 8000a0a:	9b01      	ldr	r3, [sp, #4]
 8000a0c:	4c14      	ldr	r4, [pc, #80]	; (8000a60 <__aeabi_dmul+0x1dc>)
 8000a0e:	401d      	ands	r5, r3
 8000a10:	2300      	movs	r3, #0
 8000a12:	2200      	movs	r2, #0
 8000a14:	4699      	mov	r9, r3
 8000a16:	e79c      	b.n	8000952 <__aeabi_dmul+0xce>
 8000a18:	2400      	movs	r4, #0
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	e76e      	b.n	80008fe <__aeabi_dmul+0x7a>
 8000a20:	4653      	mov	r3, sl
 8000a22:	2003      	movs	r0, #3
 8000a24:	e76b      	b.n	80008fe <__aeabi_dmul+0x7a>
 8000a26:	2300      	movs	r3, #0
 8000a28:	469b      	mov	fp, r3
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	2704      	movs	r7, #4
 8000a2e:	2600      	movs	r6, #0
 8000a30:	9302      	str	r3, [sp, #8]
 8000a32:	e74c      	b.n	80008ce <__aeabi_dmul+0x4a>
 8000a34:	2303      	movs	r3, #3
 8000a36:	4681      	mov	r9, r0
 8000a38:	270c      	movs	r7, #12
 8000a3a:	9302      	str	r3, [sp, #8]
 8000a3c:	e747      	b.n	80008ce <__aeabi_dmul+0x4a>
 8000a3e:	2280      	movs	r2, #128	; 0x80
 8000a40:	2300      	movs	r3, #0
 8000a42:	2500      	movs	r5, #0
 8000a44:	0312      	lsls	r2, r2, #12
 8000a46:	4699      	mov	r9, r3
 8000a48:	4c05      	ldr	r4, [pc, #20]	; (8000a60 <__aeabi_dmul+0x1dc>)
 8000a4a:	e782      	b.n	8000952 <__aeabi_dmul+0xce>
 8000a4c:	465c      	mov	r4, fp
 8000a4e:	464b      	mov	r3, r9
 8000a50:	9802      	ldr	r0, [sp, #8]
 8000a52:	e76f      	b.n	8000934 <__aeabi_dmul+0xb0>
 8000a54:	465c      	mov	r4, fp
 8000a56:	464b      	mov	r3, r9
 8000a58:	9501      	str	r5, [sp, #4]
 8000a5a:	9802      	ldr	r0, [sp, #8]
 8000a5c:	e76a      	b.n	8000934 <__aeabi_dmul+0xb0>
 8000a5e:	46c0      	nop			; (mov r8, r8)
 8000a60:	000007ff 	.word	0x000007ff
 8000a64:	fffffc01 	.word	0xfffffc01
 8000a68:	08003964 	.word	0x08003964
 8000a6c:	800fffff 	.word	0x800fffff
 8000a70:	fffffc0d 	.word	0xfffffc0d
 8000a74:	464a      	mov	r2, r9
 8000a76:	4649      	mov	r1, r9
 8000a78:	0c17      	lsrs	r7, r2, #16
 8000a7a:	0c1a      	lsrs	r2, r3, #16
 8000a7c:	041b      	lsls	r3, r3, #16
 8000a7e:	0c1b      	lsrs	r3, r3, #16
 8000a80:	0408      	lsls	r0, r1, #16
 8000a82:	0019      	movs	r1, r3
 8000a84:	0c00      	lsrs	r0, r0, #16
 8000a86:	4341      	muls	r1, r0
 8000a88:	0015      	movs	r5, r2
 8000a8a:	4688      	mov	r8, r1
 8000a8c:	0019      	movs	r1, r3
 8000a8e:	437d      	muls	r5, r7
 8000a90:	4379      	muls	r1, r7
 8000a92:	9503      	str	r5, [sp, #12]
 8000a94:	4689      	mov	r9, r1
 8000a96:	0029      	movs	r1, r5
 8000a98:	0015      	movs	r5, r2
 8000a9a:	4345      	muls	r5, r0
 8000a9c:	444d      	add	r5, r9
 8000a9e:	9502      	str	r5, [sp, #8]
 8000aa0:	4645      	mov	r5, r8
 8000aa2:	0c2d      	lsrs	r5, r5, #16
 8000aa4:	46aa      	mov	sl, r5
 8000aa6:	9d02      	ldr	r5, [sp, #8]
 8000aa8:	4455      	add	r5, sl
 8000aaa:	45a9      	cmp	r9, r5
 8000aac:	d906      	bls.n	8000abc <__aeabi_dmul+0x238>
 8000aae:	468a      	mov	sl, r1
 8000ab0:	2180      	movs	r1, #128	; 0x80
 8000ab2:	0249      	lsls	r1, r1, #9
 8000ab4:	4689      	mov	r9, r1
 8000ab6:	44ca      	add	sl, r9
 8000ab8:	4651      	mov	r1, sl
 8000aba:	9103      	str	r1, [sp, #12]
 8000abc:	0c29      	lsrs	r1, r5, #16
 8000abe:	9104      	str	r1, [sp, #16]
 8000ac0:	4641      	mov	r1, r8
 8000ac2:	0409      	lsls	r1, r1, #16
 8000ac4:	042d      	lsls	r5, r5, #16
 8000ac6:	0c09      	lsrs	r1, r1, #16
 8000ac8:	4688      	mov	r8, r1
 8000aca:	0029      	movs	r1, r5
 8000acc:	0c25      	lsrs	r5, r4, #16
 8000ace:	0424      	lsls	r4, r4, #16
 8000ad0:	4441      	add	r1, r8
 8000ad2:	0c24      	lsrs	r4, r4, #16
 8000ad4:	9105      	str	r1, [sp, #20]
 8000ad6:	0021      	movs	r1, r4
 8000ad8:	4341      	muls	r1, r0
 8000ada:	4688      	mov	r8, r1
 8000adc:	0021      	movs	r1, r4
 8000ade:	4379      	muls	r1, r7
 8000ae0:	468a      	mov	sl, r1
 8000ae2:	4368      	muls	r0, r5
 8000ae4:	4641      	mov	r1, r8
 8000ae6:	4450      	add	r0, sl
 8000ae8:	4681      	mov	r9, r0
 8000aea:	0c08      	lsrs	r0, r1, #16
 8000aec:	4448      	add	r0, r9
 8000aee:	436f      	muls	r7, r5
 8000af0:	4582      	cmp	sl, r0
 8000af2:	d903      	bls.n	8000afc <__aeabi_dmul+0x278>
 8000af4:	2180      	movs	r1, #128	; 0x80
 8000af6:	0249      	lsls	r1, r1, #9
 8000af8:	4689      	mov	r9, r1
 8000afa:	444f      	add	r7, r9
 8000afc:	0c01      	lsrs	r1, r0, #16
 8000afe:	4689      	mov	r9, r1
 8000b00:	0039      	movs	r1, r7
 8000b02:	4449      	add	r1, r9
 8000b04:	9102      	str	r1, [sp, #8]
 8000b06:	4641      	mov	r1, r8
 8000b08:	040f      	lsls	r7, r1, #16
 8000b0a:	9904      	ldr	r1, [sp, #16]
 8000b0c:	0c3f      	lsrs	r7, r7, #16
 8000b0e:	4688      	mov	r8, r1
 8000b10:	0400      	lsls	r0, r0, #16
 8000b12:	19c0      	adds	r0, r0, r7
 8000b14:	4480      	add	r8, r0
 8000b16:	4641      	mov	r1, r8
 8000b18:	9104      	str	r1, [sp, #16]
 8000b1a:	4659      	mov	r1, fp
 8000b1c:	0c0f      	lsrs	r7, r1, #16
 8000b1e:	0409      	lsls	r1, r1, #16
 8000b20:	0c09      	lsrs	r1, r1, #16
 8000b22:	4688      	mov	r8, r1
 8000b24:	4359      	muls	r1, r3
 8000b26:	468a      	mov	sl, r1
 8000b28:	0039      	movs	r1, r7
 8000b2a:	4351      	muls	r1, r2
 8000b2c:	4689      	mov	r9, r1
 8000b2e:	4641      	mov	r1, r8
 8000b30:	434a      	muls	r2, r1
 8000b32:	4651      	mov	r1, sl
 8000b34:	0c09      	lsrs	r1, r1, #16
 8000b36:	468b      	mov	fp, r1
 8000b38:	437b      	muls	r3, r7
 8000b3a:	18d2      	adds	r2, r2, r3
 8000b3c:	445a      	add	r2, fp
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d903      	bls.n	8000b4a <__aeabi_dmul+0x2c6>
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	025b      	lsls	r3, r3, #9
 8000b46:	469b      	mov	fp, r3
 8000b48:	44d9      	add	r9, fp
 8000b4a:	4651      	mov	r1, sl
 8000b4c:	0409      	lsls	r1, r1, #16
 8000b4e:	0c09      	lsrs	r1, r1, #16
 8000b50:	468a      	mov	sl, r1
 8000b52:	4641      	mov	r1, r8
 8000b54:	4361      	muls	r1, r4
 8000b56:	437c      	muls	r4, r7
 8000b58:	0c13      	lsrs	r3, r2, #16
 8000b5a:	0412      	lsls	r2, r2, #16
 8000b5c:	444b      	add	r3, r9
 8000b5e:	4452      	add	r2, sl
 8000b60:	46a1      	mov	r9, r4
 8000b62:	468a      	mov	sl, r1
 8000b64:	003c      	movs	r4, r7
 8000b66:	4641      	mov	r1, r8
 8000b68:	436c      	muls	r4, r5
 8000b6a:	434d      	muls	r5, r1
 8000b6c:	4651      	mov	r1, sl
 8000b6e:	444d      	add	r5, r9
 8000b70:	0c0f      	lsrs	r7, r1, #16
 8000b72:	197d      	adds	r5, r7, r5
 8000b74:	45a9      	cmp	r9, r5
 8000b76:	d903      	bls.n	8000b80 <__aeabi_dmul+0x2fc>
 8000b78:	2180      	movs	r1, #128	; 0x80
 8000b7a:	0249      	lsls	r1, r1, #9
 8000b7c:	4688      	mov	r8, r1
 8000b7e:	4444      	add	r4, r8
 8000b80:	9f04      	ldr	r7, [sp, #16]
 8000b82:	9903      	ldr	r1, [sp, #12]
 8000b84:	46b8      	mov	r8, r7
 8000b86:	4441      	add	r1, r8
 8000b88:	468b      	mov	fp, r1
 8000b8a:	4583      	cmp	fp, r0
 8000b8c:	4180      	sbcs	r0, r0
 8000b8e:	4241      	negs	r1, r0
 8000b90:	4688      	mov	r8, r1
 8000b92:	4651      	mov	r1, sl
 8000b94:	0408      	lsls	r0, r1, #16
 8000b96:	042f      	lsls	r7, r5, #16
 8000b98:	0c00      	lsrs	r0, r0, #16
 8000b9a:	183f      	adds	r7, r7, r0
 8000b9c:	4658      	mov	r0, fp
 8000b9e:	9902      	ldr	r1, [sp, #8]
 8000ba0:	1810      	adds	r0, r2, r0
 8000ba2:	4689      	mov	r9, r1
 8000ba4:	4290      	cmp	r0, r2
 8000ba6:	4192      	sbcs	r2, r2
 8000ba8:	444f      	add	r7, r9
 8000baa:	46ba      	mov	sl, r7
 8000bac:	4252      	negs	r2, r2
 8000bae:	4699      	mov	r9, r3
 8000bb0:	4693      	mov	fp, r2
 8000bb2:	44c2      	add	sl, r8
 8000bb4:	44d1      	add	r9, sl
 8000bb6:	44cb      	add	fp, r9
 8000bb8:	428f      	cmp	r7, r1
 8000bba:	41bf      	sbcs	r7, r7
 8000bbc:	45c2      	cmp	sl, r8
 8000bbe:	4189      	sbcs	r1, r1
 8000bc0:	4599      	cmp	r9, r3
 8000bc2:	419b      	sbcs	r3, r3
 8000bc4:	4593      	cmp	fp, r2
 8000bc6:	4192      	sbcs	r2, r2
 8000bc8:	427f      	negs	r7, r7
 8000bca:	4249      	negs	r1, r1
 8000bcc:	0c2d      	lsrs	r5, r5, #16
 8000bce:	4252      	negs	r2, r2
 8000bd0:	430f      	orrs	r7, r1
 8000bd2:	425b      	negs	r3, r3
 8000bd4:	4313      	orrs	r3, r2
 8000bd6:	197f      	adds	r7, r7, r5
 8000bd8:	18ff      	adds	r7, r7, r3
 8000bda:	465b      	mov	r3, fp
 8000bdc:	193c      	adds	r4, r7, r4
 8000bde:	0ddb      	lsrs	r3, r3, #23
 8000be0:	9a05      	ldr	r2, [sp, #20]
 8000be2:	0264      	lsls	r4, r4, #9
 8000be4:	431c      	orrs	r4, r3
 8000be6:	0243      	lsls	r3, r0, #9
 8000be8:	4313      	orrs	r3, r2
 8000bea:	1e5d      	subs	r5, r3, #1
 8000bec:	41ab      	sbcs	r3, r5
 8000bee:	465a      	mov	r2, fp
 8000bf0:	0dc0      	lsrs	r0, r0, #23
 8000bf2:	4303      	orrs	r3, r0
 8000bf4:	0252      	lsls	r2, r2, #9
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	01e2      	lsls	r2, r4, #7
 8000bfa:	d556      	bpl.n	8000caa <__aeabi_dmul+0x426>
 8000bfc:	2001      	movs	r0, #1
 8000bfe:	085a      	lsrs	r2, r3, #1
 8000c00:	4003      	ands	r3, r0
 8000c02:	4313      	orrs	r3, r2
 8000c04:	07e2      	lsls	r2, r4, #31
 8000c06:	4313      	orrs	r3, r2
 8000c08:	0864      	lsrs	r4, r4, #1
 8000c0a:	485a      	ldr	r0, [pc, #360]	; (8000d74 <__aeabi_dmul+0x4f0>)
 8000c0c:	4460      	add	r0, ip
 8000c0e:	2800      	cmp	r0, #0
 8000c10:	dd4d      	ble.n	8000cae <__aeabi_dmul+0x42a>
 8000c12:	075a      	lsls	r2, r3, #29
 8000c14:	d009      	beq.n	8000c2a <__aeabi_dmul+0x3a6>
 8000c16:	220f      	movs	r2, #15
 8000c18:	401a      	ands	r2, r3
 8000c1a:	2a04      	cmp	r2, #4
 8000c1c:	d005      	beq.n	8000c2a <__aeabi_dmul+0x3a6>
 8000c1e:	1d1a      	adds	r2, r3, #4
 8000c20:	429a      	cmp	r2, r3
 8000c22:	419b      	sbcs	r3, r3
 8000c24:	425b      	negs	r3, r3
 8000c26:	18e4      	adds	r4, r4, r3
 8000c28:	0013      	movs	r3, r2
 8000c2a:	01e2      	lsls	r2, r4, #7
 8000c2c:	d504      	bpl.n	8000c38 <__aeabi_dmul+0x3b4>
 8000c2e:	2080      	movs	r0, #128	; 0x80
 8000c30:	4a51      	ldr	r2, [pc, #324]	; (8000d78 <__aeabi_dmul+0x4f4>)
 8000c32:	00c0      	lsls	r0, r0, #3
 8000c34:	4014      	ands	r4, r2
 8000c36:	4460      	add	r0, ip
 8000c38:	4a50      	ldr	r2, [pc, #320]	; (8000d7c <__aeabi_dmul+0x4f8>)
 8000c3a:	4290      	cmp	r0, r2
 8000c3c:	dd00      	ble.n	8000c40 <__aeabi_dmul+0x3bc>
 8000c3e:	e6e3      	b.n	8000a08 <__aeabi_dmul+0x184>
 8000c40:	2501      	movs	r5, #1
 8000c42:	08db      	lsrs	r3, r3, #3
 8000c44:	0762      	lsls	r2, r4, #29
 8000c46:	431a      	orrs	r2, r3
 8000c48:	0264      	lsls	r4, r4, #9
 8000c4a:	9b01      	ldr	r3, [sp, #4]
 8000c4c:	4691      	mov	r9, r2
 8000c4e:	0b22      	lsrs	r2, r4, #12
 8000c50:	0544      	lsls	r4, r0, #21
 8000c52:	0d64      	lsrs	r4, r4, #21
 8000c54:	401d      	ands	r5, r3
 8000c56:	e67c      	b.n	8000952 <__aeabi_dmul+0xce>
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	4659      	mov	r1, fp
 8000c5c:	0312      	lsls	r2, r2, #12
 8000c5e:	4211      	tst	r1, r2
 8000c60:	d008      	beq.n	8000c74 <__aeabi_dmul+0x3f0>
 8000c62:	4214      	tst	r4, r2
 8000c64:	d106      	bne.n	8000c74 <__aeabi_dmul+0x3f0>
 8000c66:	4322      	orrs	r2, r4
 8000c68:	0312      	lsls	r2, r2, #12
 8000c6a:	0b12      	lsrs	r2, r2, #12
 8000c6c:	4645      	mov	r5, r8
 8000c6e:	4699      	mov	r9, r3
 8000c70:	4c43      	ldr	r4, [pc, #268]	; (8000d80 <__aeabi_dmul+0x4fc>)
 8000c72:	e66e      	b.n	8000952 <__aeabi_dmul+0xce>
 8000c74:	465b      	mov	r3, fp
 8000c76:	431a      	orrs	r2, r3
 8000c78:	0312      	lsls	r2, r2, #12
 8000c7a:	0b12      	lsrs	r2, r2, #12
 8000c7c:	4c40      	ldr	r4, [pc, #256]	; (8000d80 <__aeabi_dmul+0x4fc>)
 8000c7e:	e668      	b.n	8000952 <__aeabi_dmul+0xce>
 8000c80:	0003      	movs	r3, r0
 8000c82:	4654      	mov	r4, sl
 8000c84:	3b28      	subs	r3, #40	; 0x28
 8000c86:	409c      	lsls	r4, r3
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e6b9      	b.n	8000a00 <__aeabi_dmul+0x17c>
 8000c8c:	f000 f8b2 	bl	8000df4 <__clzsi2>
 8000c90:	3020      	adds	r0, #32
 8000c92:	e6a6      	b.n	80009e2 <__aeabi_dmul+0x15e>
 8000c94:	0003      	movs	r3, r0
 8000c96:	3b28      	subs	r3, #40	; 0x28
 8000c98:	409f      	lsls	r7, r3
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	46bb      	mov	fp, r7
 8000c9e:	4699      	mov	r9, r3
 8000ca0:	e68a      	b.n	80009b8 <__aeabi_dmul+0x134>
 8000ca2:	f000 f8a7 	bl	8000df4 <__clzsi2>
 8000ca6:	3020      	adds	r0, #32
 8000ca8:	e674      	b.n	8000994 <__aeabi_dmul+0x110>
 8000caa:	46b4      	mov	ip, r6
 8000cac:	e7ad      	b.n	8000c0a <__aeabi_dmul+0x386>
 8000cae:	2501      	movs	r5, #1
 8000cb0:	1a2a      	subs	r2, r5, r0
 8000cb2:	2a38      	cmp	r2, #56	; 0x38
 8000cb4:	dd06      	ble.n	8000cc4 <__aeabi_dmul+0x440>
 8000cb6:	9b01      	ldr	r3, [sp, #4]
 8000cb8:	2400      	movs	r4, #0
 8000cba:	401d      	ands	r5, r3
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	4699      	mov	r9, r3
 8000cc2:	e646      	b.n	8000952 <__aeabi_dmul+0xce>
 8000cc4:	2a1f      	cmp	r2, #31
 8000cc6:	dc21      	bgt.n	8000d0c <__aeabi_dmul+0x488>
 8000cc8:	2520      	movs	r5, #32
 8000cca:	0020      	movs	r0, r4
 8000ccc:	1aad      	subs	r5, r5, r2
 8000cce:	001e      	movs	r6, r3
 8000cd0:	40ab      	lsls	r3, r5
 8000cd2:	40a8      	lsls	r0, r5
 8000cd4:	40d6      	lsrs	r6, r2
 8000cd6:	1e5d      	subs	r5, r3, #1
 8000cd8:	41ab      	sbcs	r3, r5
 8000cda:	4330      	orrs	r0, r6
 8000cdc:	4318      	orrs	r0, r3
 8000cde:	40d4      	lsrs	r4, r2
 8000ce0:	0743      	lsls	r3, r0, #29
 8000ce2:	d009      	beq.n	8000cf8 <__aeabi_dmul+0x474>
 8000ce4:	230f      	movs	r3, #15
 8000ce6:	4003      	ands	r3, r0
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	d005      	beq.n	8000cf8 <__aeabi_dmul+0x474>
 8000cec:	0003      	movs	r3, r0
 8000cee:	1d18      	adds	r0, r3, #4
 8000cf0:	4298      	cmp	r0, r3
 8000cf2:	419b      	sbcs	r3, r3
 8000cf4:	425b      	negs	r3, r3
 8000cf6:	18e4      	adds	r4, r4, r3
 8000cf8:	0223      	lsls	r3, r4, #8
 8000cfa:	d521      	bpl.n	8000d40 <__aeabi_dmul+0x4bc>
 8000cfc:	2501      	movs	r5, #1
 8000cfe:	9b01      	ldr	r3, [sp, #4]
 8000d00:	2401      	movs	r4, #1
 8000d02:	401d      	ands	r5, r3
 8000d04:	2300      	movs	r3, #0
 8000d06:	2200      	movs	r2, #0
 8000d08:	4699      	mov	r9, r3
 8000d0a:	e622      	b.n	8000952 <__aeabi_dmul+0xce>
 8000d0c:	251f      	movs	r5, #31
 8000d0e:	0021      	movs	r1, r4
 8000d10:	426d      	negs	r5, r5
 8000d12:	1a28      	subs	r0, r5, r0
 8000d14:	40c1      	lsrs	r1, r0
 8000d16:	0008      	movs	r0, r1
 8000d18:	2a20      	cmp	r2, #32
 8000d1a:	d01d      	beq.n	8000d58 <__aeabi_dmul+0x4d4>
 8000d1c:	355f      	adds	r5, #95	; 0x5f
 8000d1e:	1aaa      	subs	r2, r5, r2
 8000d20:	4094      	lsls	r4, r2
 8000d22:	4323      	orrs	r3, r4
 8000d24:	1e5c      	subs	r4, r3, #1
 8000d26:	41a3      	sbcs	r3, r4
 8000d28:	2507      	movs	r5, #7
 8000d2a:	4303      	orrs	r3, r0
 8000d2c:	401d      	ands	r5, r3
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2d00      	cmp	r5, #0
 8000d32:	d009      	beq.n	8000d48 <__aeabi_dmul+0x4c4>
 8000d34:	220f      	movs	r2, #15
 8000d36:	2400      	movs	r4, #0
 8000d38:	401a      	ands	r2, r3
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	2a04      	cmp	r2, #4
 8000d3e:	d1d6      	bne.n	8000cee <__aeabi_dmul+0x46a>
 8000d40:	0003      	movs	r3, r0
 8000d42:	0765      	lsls	r5, r4, #29
 8000d44:	0264      	lsls	r4, r4, #9
 8000d46:	0b22      	lsrs	r2, r4, #12
 8000d48:	08db      	lsrs	r3, r3, #3
 8000d4a:	432b      	orrs	r3, r5
 8000d4c:	2501      	movs	r5, #1
 8000d4e:	4699      	mov	r9, r3
 8000d50:	9b01      	ldr	r3, [sp, #4]
 8000d52:	2400      	movs	r4, #0
 8000d54:	401d      	ands	r5, r3
 8000d56:	e5fc      	b.n	8000952 <__aeabi_dmul+0xce>
 8000d58:	2400      	movs	r4, #0
 8000d5a:	e7e2      	b.n	8000d22 <__aeabi_dmul+0x49e>
 8000d5c:	2280      	movs	r2, #128	; 0x80
 8000d5e:	2501      	movs	r5, #1
 8000d60:	0312      	lsls	r2, r2, #12
 8000d62:	4322      	orrs	r2, r4
 8000d64:	9901      	ldr	r1, [sp, #4]
 8000d66:	0312      	lsls	r2, r2, #12
 8000d68:	0b12      	lsrs	r2, r2, #12
 8000d6a:	400d      	ands	r5, r1
 8000d6c:	4699      	mov	r9, r3
 8000d6e:	4c04      	ldr	r4, [pc, #16]	; (8000d80 <__aeabi_dmul+0x4fc>)
 8000d70:	e5ef      	b.n	8000952 <__aeabi_dmul+0xce>
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	000003ff 	.word	0x000003ff
 8000d78:	feffffff 	.word	0xfeffffff
 8000d7c:	000007fe 	.word	0x000007fe
 8000d80:	000007ff 	.word	0x000007ff

08000d84 <__aeabi_ui2d>:
 8000d84:	b510      	push	{r4, lr}
 8000d86:	1e04      	subs	r4, r0, #0
 8000d88:	d028      	beq.n	8000ddc <__aeabi_ui2d+0x58>
 8000d8a:	f000 f833 	bl	8000df4 <__clzsi2>
 8000d8e:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <__aeabi_ui2d+0x60>)
 8000d90:	4a15      	ldr	r2, [pc, #84]	; (8000de8 <__aeabi_ui2d+0x64>)
 8000d92:	1a1b      	subs	r3, r3, r0
 8000d94:	1ad2      	subs	r2, r2, r3
 8000d96:	2a1f      	cmp	r2, #31
 8000d98:	dd15      	ble.n	8000dc6 <__aeabi_ui2d+0x42>
 8000d9a:	4a14      	ldr	r2, [pc, #80]	; (8000dec <__aeabi_ui2d+0x68>)
 8000d9c:	1ad2      	subs	r2, r2, r3
 8000d9e:	4094      	lsls	r4, r2
 8000da0:	2200      	movs	r2, #0
 8000da2:	0324      	lsls	r4, r4, #12
 8000da4:	055b      	lsls	r3, r3, #21
 8000da6:	0b24      	lsrs	r4, r4, #12
 8000da8:	0d5b      	lsrs	r3, r3, #21
 8000daa:	2100      	movs	r1, #0
 8000dac:	0010      	movs	r0, r2
 8000dae:	0324      	lsls	r4, r4, #12
 8000db0:	0d0a      	lsrs	r2, r1, #20
 8000db2:	0b24      	lsrs	r4, r4, #12
 8000db4:	0512      	lsls	r2, r2, #20
 8000db6:	4322      	orrs	r2, r4
 8000db8:	4c0d      	ldr	r4, [pc, #52]	; (8000df0 <__aeabi_ui2d+0x6c>)
 8000dba:	051b      	lsls	r3, r3, #20
 8000dbc:	4022      	ands	r2, r4
 8000dbe:	4313      	orrs	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	0859      	lsrs	r1, r3, #1
 8000dc4:	bd10      	pop	{r4, pc}
 8000dc6:	0021      	movs	r1, r4
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	210b      	movs	r1, #11
 8000dce:	1a08      	subs	r0, r1, r0
 8000dd0:	40c4      	lsrs	r4, r0
 8000dd2:	055b      	lsls	r3, r3, #21
 8000dd4:	0324      	lsls	r4, r4, #12
 8000dd6:	0b24      	lsrs	r4, r4, #12
 8000dd8:	0d5b      	lsrs	r3, r3, #21
 8000dda:	e7e6      	b.n	8000daa <__aeabi_ui2d+0x26>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	2400      	movs	r4, #0
 8000de0:	2200      	movs	r2, #0
 8000de2:	e7e2      	b.n	8000daa <__aeabi_ui2d+0x26>
 8000de4:	0000041e 	.word	0x0000041e
 8000de8:	00000433 	.word	0x00000433
 8000dec:	00000413 	.word	0x00000413
 8000df0:	800fffff 	.word	0x800fffff

08000df4 <__clzsi2>:
 8000df4:	211c      	movs	r1, #28
 8000df6:	2301      	movs	r3, #1
 8000df8:	041b      	lsls	r3, r3, #16
 8000dfa:	4298      	cmp	r0, r3
 8000dfc:	d301      	bcc.n	8000e02 <__clzsi2+0xe>
 8000dfe:	0c00      	lsrs	r0, r0, #16
 8000e00:	3910      	subs	r1, #16
 8000e02:	0a1b      	lsrs	r3, r3, #8
 8000e04:	4298      	cmp	r0, r3
 8000e06:	d301      	bcc.n	8000e0c <__clzsi2+0x18>
 8000e08:	0a00      	lsrs	r0, r0, #8
 8000e0a:	3908      	subs	r1, #8
 8000e0c:	091b      	lsrs	r3, r3, #4
 8000e0e:	4298      	cmp	r0, r3
 8000e10:	d301      	bcc.n	8000e16 <__clzsi2+0x22>
 8000e12:	0900      	lsrs	r0, r0, #4
 8000e14:	3904      	subs	r1, #4
 8000e16:	a202      	add	r2, pc, #8	; (adr r2, 8000e20 <__clzsi2+0x2c>)
 8000e18:	5c10      	ldrb	r0, [r2, r0]
 8000e1a:	1840      	adds	r0, r0, r1
 8000e1c:	4770      	bx	lr
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	02020304 	.word	0x02020304
 8000e24:	01010101 	.word	0x01010101
	...

08000e30 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e34:	4b07      	ldr	r3, [pc, #28]	; (8000e54 <HAL_Init+0x24>)
 8000e36:	4a07      	ldr	r2, [pc, #28]	; (8000e54 <HAL_Init+0x24>)
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	2110      	movs	r1, #16
 8000e3c:	430a      	orrs	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000e40:	2000      	movs	r0, #0
 8000e42:	f000 f809 	bl	8000e58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e46:	f002 fbd5 	bl	80035f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	46c0      	nop			; (mov r8, r8)
 8000e54:	40022000 	.word	0x40022000

08000e58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000U);
 8000e60:	f001 fc08 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 8000e64:	0002      	movs	r2, r0
 8000e66:	23fa      	movs	r3, #250	; 0xfa
 8000e68:	0099      	lsls	r1, r3, #2
 8000e6a:	0010      	movs	r0, r2
 8000e6c:	f7ff f94a 	bl	8000104 <__udivsi3>
 8000e70:	0003      	movs	r3, r0
 8000e72:	0018      	movs	r0, r3
 8000e74:	f000 fd72 	bl	800195c <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	425b      	negs	r3, r3
 8000e7e:	2200      	movs	r2, #0
 8000e80:	0018      	movs	r0, r3
 8000e82:	f000 fd55 	bl	8001930 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
}
 8000e88:	0018      	movs	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	b002      	add	sp, #8
 8000e8e:	bd80      	pop	{r7, pc}

08000e90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  uwTick++;
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <HAL_IncTick+0x14>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	1c5a      	adds	r2, r3, #1
 8000e9a:	4b02      	ldr	r3, [pc, #8]	; (8000ea4 <HAL_IncTick+0x14>)
 8000e9c:	601a      	str	r2, [r3, #0]
}
 8000e9e:	46c0      	nop			; (mov r8, r8)
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000024 	.word	0x20000024

08000ea8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b02      	ldr	r3, [pc, #8]	; (8000eb8 <HAL_GetTick+0x10>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	0018      	movs	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	20000024 	.word	0x20000024

08000ebc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec4:	230f      	movs	r3, #15
 8000ec6:	18fb      	adds	r3, r7, r3
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e124      	b.n	8001124 <HAL_ADC_Init+0x268>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10a      	bne.n	8000ef8 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2240      	movs	r2, #64	; 0x40
 8000eec:	2100      	movs	r1, #0
 8000eee:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f002 fba2 	bl	800363c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efc:	2210      	movs	r2, #16
 8000efe:	4013      	ands	r3, r2
 8000f00:	d000      	beq.n	8000f04 <HAL_ADC_Init+0x48>
 8000f02:	e102      	b.n	800110a <HAL_ADC_Init+0x24e>
 8000f04:	230f      	movs	r3, #15
 8000f06:	18fb      	adds	r3, r7, r3
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d000      	beq.n	8000f10 <HAL_ADC_Init+0x54>
 8000f0e:	e0fc      	b.n	800110a <HAL_ADC_Init+0x24e>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	2204      	movs	r2, #4
 8000f18:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000f1a:	d000      	beq.n	8000f1e <HAL_ADC_Init+0x62>
 8000f1c:	e0f5      	b.n	800110a <HAL_ADC_Init+0x24e>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	4a82      	ldr	r2, [pc, #520]	; (800112c <HAL_ADC_Init+0x270>)
 8000f24:	4013      	ands	r3, r2
 8000f26:	2202      	movs	r2, #2
 8000f28:	431a      	orrs	r2, r3
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	2203      	movs	r2, #3
 8000f36:	4013      	ands	r3, r2
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d112      	bne.n	8000f62 <HAL_ADC_Init+0xa6>
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	2201      	movs	r2, #1
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d009      	beq.n	8000f5e <HAL_ADC_Init+0xa2>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	68da      	ldr	r2, [r3, #12]
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	021b      	lsls	r3, r3, #8
 8000f54:	401a      	ands	r2, r3
 8000f56:	2380      	movs	r3, #128	; 0x80
 8000f58:	021b      	lsls	r3, r3, #8
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d101      	bne.n	8000f62 <HAL_ADC_Init+0xa6>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_ADC_Init+0xa8>
 8000f62:	2300      	movs	r3, #0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d116      	bne.n	8000f96 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6812      	ldr	r2, [r2, #0]
 8000f70:	68d2      	ldr	r2, [r2, #12]
 8000f72:	2118      	movs	r1, #24
 8000f74:	438a      	bics	r2, r1
 8000f76:	0011      	movs	r1, r2
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	6892      	ldr	r2, [r2, #8]
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	687a      	ldr	r2, [r7, #4]
 8000f86:	6812      	ldr	r2, [r2, #0]
 8000f88:	6912      	ldr	r2, [r2, #16]
 8000f8a:	0092      	lsls	r2, r2, #2
 8000f8c:	0891      	lsrs	r1, r2, #2
 8000f8e:	687a      	ldr	r2, [r7, #4]
 8000f90:	6852      	ldr	r2, [r2, #4]
 8000f92:	430a      	orrs	r2, r1
 8000f94:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	6812      	ldr	r2, [r2, #0]
 8000f9e:	68d2      	ldr	r2, [r2, #12]
 8000fa0:	4963      	ldr	r1, [pc, #396]	; (8001130 <HAL_ADC_Init+0x274>)
 8000fa2:	400a      	ands	r2, r1
 8000fa4:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69db      	ldr	r3, [r3, #28]
 8000fb0:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000fb2:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF(hadc->Init.LowPowerAutoPowerOff)     |
 8000fba:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d002      	beq.n	8000fca <HAL_ADC_Init+0x10e>
 8000fc4:	2380      	movs	r3, #128	; 0x80
 8000fc6:	015b      	lsls	r3, r3, #5
 8000fc8:	e000      	b.n	8000fcc <HAL_ADC_Init+0x110>
 8000fca:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS(hadc->Init.ContinuousConvMode)    |
 8000fcc:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                   |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                  |
 8000fd2:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d101      	bne.n	8000fe0 <HAL_ADC_Init+0x124>
 8000fdc:	2304      	movs	r3, #4
 8000fde:	e000      	b.n	8000fe2 <HAL_ADC_Init+0x126>
 8000fe0:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                   |
 8000fe2:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ(hadc->Init.DMAContinuousRequests)  );
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe8:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                   |
 8000fea:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT(hadc->Init.LowPowerAutoWait)        |
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff6:	2b01      	cmp	r3, #1
 8000ff8:	d115      	bne.n	8001026 <HAL_ADC_Init+0x16a>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6a1b      	ldr	r3, [r3, #32]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d105      	bne.n	800100e <HAL_ADC_Init+0x152>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	2280      	movs	r2, #128	; 0x80
 8001006:	0252      	lsls	r2, r2, #9
 8001008:	4313      	orrs	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
 800100c:	e00b      	b.n	8001026 <HAL_ADC_Init+0x16a>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	2220      	movs	r2, #32
 8001014:	431a      	orrs	r2, r3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800101e:	2201      	movs	r2, #1
 8001020:	431a      	orrs	r2, r3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800102a:	23c2      	movs	r3, #194	; 0xc2
 800102c:	33ff      	adds	r3, #255	; 0xff
 800102e:	429a      	cmp	r2, r3
 8001030:	d007      	beq.n	8001042 <HAL_ADC_Init+0x186>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
                    hadc->Init.ExternalTrigConvEdge );
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 800103a:	4313      	orrs	r3, r2
 800103c:	68ba      	ldr	r2, [r7, #8]
 800103e:	4313      	orrs	r3, r2
 8001040:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	6812      	ldr	r2, [r2, #0]
 800104a:	68d1      	ldr	r1, [r2, #12]
 800104c:	68ba      	ldr	r2, [r7, #8]
 800104e:	430a      	orrs	r2, r1
 8001050:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001056:	2380      	movs	r3, #128	; 0x80
 8001058:	055b      	lsls	r3, r3, #21
 800105a:	429a      	cmp	r2, r3
 800105c:	d01b      	beq.n	8001096 <HAL_ADC_Init+0x1da>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001062:	2b01      	cmp	r3, #1
 8001064:	d017      	beq.n	8001096 <HAL_ADC_Init+0x1da>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106a:	2b02      	cmp	r3, #2
 800106c:	d013      	beq.n	8001096 <HAL_ADC_Init+0x1da>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001072:	2b03      	cmp	r3, #3
 8001074:	d00f      	beq.n	8001096 <HAL_ADC_Init+0x1da>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800107a:	2b04      	cmp	r3, #4
 800107c:	d00b      	beq.n	8001096 <HAL_ADC_Init+0x1da>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001082:	2b05      	cmp	r3, #5
 8001084:	d007      	beq.n	8001096 <HAL_ADC_Init+0x1da>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800108a:	2b06      	cmp	r3, #6
 800108c:	d003      	beq.n	8001096 <HAL_ADC_Init+0x1da>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001092:	2b07      	cmp	r3, #7
 8001094:	d112      	bne.n	80010bc <HAL_ADC_Init+0x200>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	687a      	ldr	r2, [r7, #4]
 800109c:	6812      	ldr	r2, [r2, #0]
 800109e:	6952      	ldr	r2, [r2, #20]
 80010a0:	2107      	movs	r1, #7
 80010a2:	438a      	bics	r2, r1
 80010a4:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	687a      	ldr	r2, [r7, #4]
 80010ac:	6812      	ldr	r2, [r2, #0]
 80010ae:	6951      	ldr	r1, [r2, #20]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80010b4:	2007      	movs	r0, #7
 80010b6:	4002      	ands	r2, r0
 80010b8:	430a      	orrs	r2, r1
 80010ba:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <HAL_ADC_Init+0x278>)
 80010c4:	401a      	ands	r2, r3
 80010c6:	68bb      	ldr	r3, [r7, #8]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d10b      	bne.n	80010e4 <HAL_ADC_Init+0x228>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	2203      	movs	r2, #3
 80010d8:	4393      	bics	r3, r2
 80010da:	2201      	movs	r2, #1
 80010dc:	431a      	orrs	r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	645a      	str	r2, [r3, #68]	; 0x44
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80010e2:	e01c      	b.n	800111e <HAL_ADC_Init+0x262>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	2212      	movs	r2, #18
 80010ea:	4393      	bics	r3, r2
 80010ec:	2210      	movs	r2, #16
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80010f8:	2201      	movs	r2, #1
 80010fa:	431a      	orrs	r2, r3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8001100:	230f      	movs	r3, #15
 8001102:	18fb      	adds	r3, r7, r3
 8001104:	2201      	movs	r2, #1
 8001106:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001108:	e009      	b.n	800111e <HAL_ADC_Init+0x262>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110e:	2210      	movs	r2, #16
 8001110:	431a      	orrs	r2, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	645a      	str	r2, [r3, #68]	; 0x44
        
    tmp_hal_status = HAL_ERROR;
 8001116:	230f      	movs	r3, #15
 8001118:	18fb      	adds	r3, r7, r3
 800111a:	2201      	movs	r2, #1
 800111c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800111e:	230f      	movs	r3, #15
 8001120:	18fb      	adds	r3, r7, r3
 8001122:	781b      	ldrb	r3, [r3, #0]
}
 8001124:	0018      	movs	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	b004      	add	sp, #16
 800112a:	bd80      	pop	{r7, pc}
 800112c:	fffffefd 	.word	0xfffffefd
 8001130:	fffe0219 	.word	0xfffe0219
 8001134:	833fffe7 	.word	0x833fffe7

08001138 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001138:	b590      	push	{r4, r7, lr}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001140:	230f      	movs	r3, #15
 8001142:	18fb      	adds	r3, r7, r3
 8001144:	2200      	movs	r2, #0
 8001146:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2204      	movs	r2, #4
 8001150:	4013      	ands	r3, r2
 8001152:	d138      	bne.n	80011c6 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2240      	movs	r2, #64	; 0x40
 8001158:	5c9b      	ldrb	r3, [r3, r2]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d101      	bne.n	8001162 <HAL_ADC_Start+0x2a>
 800115e:	2302      	movs	r3, #2
 8001160:	e038      	b.n	80011d4 <HAL_ADC_Start+0x9c>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2240      	movs	r2, #64	; 0x40
 8001166:	2101      	movs	r1, #1
 8001168:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d007      	beq.n	8001182 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8001172:	230f      	movs	r3, #15
 8001174:	18fc      	adds	r4, r7, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	0018      	movs	r0, r3
 800117a:	f000 fa1d 	bl	80015b8 <ADC_Enable>
 800117e:	0003      	movs	r3, r0
 8001180:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001182:	230f      	movs	r3, #15
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d120      	bne.n	80011ce <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001190:	4a12      	ldr	r2, [pc, #72]	; (80011dc <HAL_ADC_Start+0xa4>)
 8001192:	4013      	ands	r3, r2
 8001194:	2280      	movs	r2, #128	; 0x80
 8001196:	0052      	lsls	r2, r2, #1
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2240      	movs	r2, #64	; 0x40
 80011a8:	2100      	movs	r1, #0
 80011aa:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	221c      	movs	r2, #28
 80011b2:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	6812      	ldr	r2, [r2, #0]
 80011bc:	6892      	ldr	r2, [r2, #8]
 80011be:	2104      	movs	r1, #4
 80011c0:	430a      	orrs	r2, r1
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	e003      	b.n	80011ce <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011c6:	230f      	movs	r3, #15
 80011c8:	18fb      	adds	r3, r7, r3
 80011ca:	2202      	movs	r2, #2
 80011cc:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011ce:	230f      	movs	r3, #15
 80011d0:	18fb      	adds	r3, r7, r3
 80011d2:	781b      	ldrb	r3, [r3, #0]
}
 80011d4:	0018      	movs	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	b005      	add	sp, #20
 80011da:	bd90      	pop	{r4, r7, pc}
 80011dc:	fffff0fe 	.word	0xfffff0fe

080011e0 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 80011e0:	b590      	push	{r4, r7, lr}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011e8:	230f      	movs	r3, #15
 80011ea:	18fb      	adds	r3, r7, r3
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2240      	movs	r2, #64	; 0x40
 80011f4:	5c9b      	ldrb	r3, [r3, r2]
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d101      	bne.n	80011fe <HAL_ADC_Stop+0x1e>
 80011fa:	2302      	movs	r3, #2
 80011fc:	e02c      	b.n	8001258 <HAL_ADC_Stop+0x78>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2240      	movs	r2, #64	; 0x40
 8001202:	2101      	movs	r1, #1
 8001204:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001206:	230f      	movs	r3, #15
 8001208:	18fc      	adds	r4, r7, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	0018      	movs	r0, r3
 800120e:	f000 fab8 	bl	8001782 <ADC_ConversionStop>
 8001212:	0003      	movs	r3, r0
 8001214:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001216:	230f      	movs	r3, #15
 8001218:	18fb      	adds	r3, r7, r3
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d114      	bne.n	800124a <HAL_ADC_Stop+0x6a>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001220:	230f      	movs	r3, #15
 8001222:	18fc      	adds	r4, r7, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	0018      	movs	r0, r3
 8001228:	f000 fa42 	bl	80016b0 <ADC_Disable>
 800122c:	0003      	movs	r3, r0
 800122e:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001230:	230f      	movs	r3, #15
 8001232:	18fb      	adds	r3, r7, r3
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d107      	bne.n	800124a <HAL_ADC_Stop+0x6a>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800123e:	4a08      	ldr	r2, [pc, #32]	; (8001260 <HAL_ADC_Stop+0x80>)
 8001240:	4013      	ands	r3, r2
 8001242:	2201      	movs	r2, #1
 8001244:	431a      	orrs	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2240      	movs	r2, #64	; 0x40
 800124e:	2100      	movs	r1, #0
 8001250:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001252:	230f      	movs	r3, #15
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	781b      	ldrb	r3, [r3, #0]
}
 8001258:	0018      	movs	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	b005      	add	sp, #20
 800125e:	bd90      	pop	{r4, r7, pc}
 8001260:	fffffefe 	.word	0xfffffefe

08001264 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	2b08      	cmp	r3, #8
 8001274:	d102      	bne.n	800127c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001276:	2308      	movs	r3, #8
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	e013      	b.n	80012a4 <HAL_ADC_PollForConversion+0x40>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	68db      	ldr	r3, [r3, #12]
 8001282:	2201      	movs	r2, #1
 8001284:	4013      	ands	r3, r2
 8001286:	d00b      	beq.n	80012a0 <HAL_ADC_PollForConversion+0x3c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128c:	2220      	movs	r2, #32
 800128e:	431a      	orrs	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2240      	movs	r2, #64	; 0x40
 8001298:	2100      	movs	r1, #0
 800129a:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e06b      	b.n	8001378 <HAL_ADC_PollForConversion+0x114>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80012a0:	230c      	movs	r3, #12
 80012a2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80012a4:	f7ff fe00 	bl	8000ea8 <HAL_GetTick>
 80012a8:	0003      	movs	r3, r0
 80012aa:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012ac:	e019      	b.n	80012e2 <HAL_ADC_PollForConversion+0x7e>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	3301      	adds	r3, #1
 80012b2:	d016      	beq.n	80012e2 <HAL_ADC_PollForConversion+0x7e>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d007      	beq.n	80012ca <HAL_ADC_PollForConversion+0x66>
 80012ba:	f7ff fdf5 	bl	8000ea8 <HAL_GetTick>
 80012be:	0002      	movs	r2, r0
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1ad2      	subs	r2, r2, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	d90b      	bls.n	80012e2 <HAL_ADC_PollForConversion+0x7e>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	2204      	movs	r2, #4
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2240      	movs	r2, #64	; 0x40
 80012da:	2100      	movs	r1, #0
 80012dc:	5499      	strb	r1, [r3, r2]
        
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e04a      	b.n	8001378 <HAL_ADC_PollForConversion+0x114>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	4013      	ands	r3, r2
 80012ec:	d0df      	beq.n	80012ae <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012f2:	2280      	movs	r2, #128	; 0x80
 80012f4:	0092      	lsls	r2, r2, #2
 80012f6:	431a      	orrs	r2, r3
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	23c0      	movs	r3, #192	; 0xc0
 8001304:	011b      	lsls	r3, r3, #4
 8001306:	4013      	ands	r3, r2
 8001308:	d12d      	bne.n	8001366 <HAL_ADC_PollForConversion+0x102>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a1b      	ldr	r3, [r3, #32]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800130e:	2b00      	cmp	r3, #0
 8001310:	d129      	bne.n	8001366 <HAL_ADC_PollForConversion+0x102>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2208      	movs	r2, #8
 800131a:	4013      	ands	r3, r2
 800131c:	2b08      	cmp	r3, #8
 800131e:	d122      	bne.n	8001366 <HAL_ADC_PollForConversion+0x102>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2204      	movs	r2, #4
 8001328:	4013      	ands	r3, r2
 800132a:	d110      	bne.n	800134e <HAL_ADC_PollForConversion+0xea>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	6812      	ldr	r2, [r2, #0]
 8001334:	6852      	ldr	r2, [r2, #4]
 8001336:	210c      	movs	r1, #12
 8001338:	438a      	bics	r2, r1
 800133a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001340:	4a0f      	ldr	r2, [pc, #60]	; (8001380 <HAL_ADC_PollForConversion+0x11c>)
 8001342:	4013      	ands	r3, r2
 8001344:	2201      	movs	r2, #1
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	645a      	str	r2, [r3, #68]	; 0x44
 800134c:	e00b      	b.n	8001366 <HAL_ADC_PollForConversion+0x102>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	2220      	movs	r2, #32
 8001354:	431a      	orrs	r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800135e:	2201      	movs	r2, #1
 8001360:	431a      	orrs	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d103      	bne.n	8001376 <HAL_ADC_PollForConversion+0x112>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	220c      	movs	r2, #12
 8001374:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	0018      	movs	r0, r3
 800137a:	46bd      	mov	sp, r7
 800137c:	b004      	add	sp, #16
 800137e:	bd80      	pop	{r7, pc}
 8001380:	fffffefe 	.word	0xfffffefe

08001384 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001392:	0018      	movs	r0, r3
 8001394:	46bd      	mov	sp, r7
 8001396:	b002      	add	sp, #8
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013a6:	230f      	movs	r3, #15
 80013a8:	18fb      	adds	r3, r7, r3
 80013aa:	2200      	movs	r2, #0
 80013ac:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	055b      	lsls	r3, r3, #21
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d011      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x46>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d00d      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x46>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d009      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x46>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d005      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x46>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d001      	beq.n	80013e2 <HAL_ADC_ConfigChannel+0x46>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	2240      	movs	r2, #64	; 0x40
 80013e6:	5c9b      	ldrb	r3, [r3, r2]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d101      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x54>
 80013ec:	2302      	movs	r3, #2
 80013ee:	e0d1      	b.n	8001594 <HAL_ADC_ConfigChannel+0x1f8>
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2240      	movs	r2, #64	; 0x40
 80013f4:	2101      	movs	r1, #1
 80013f6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	2204      	movs	r2, #4
 8001400:	4013      	ands	r3, r2
 8001402:	d000      	beq.n	8001406 <HAL_ADC_ConfigChannel+0x6a>
 8001404:	e0b5      	b.n	8001572 <HAL_ADC_ConfigChannel+0x1d6>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	4a64      	ldr	r2, [pc, #400]	; (800159c <HAL_ADC_ConfigChannel+0x200>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d100      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x76>
 8001410:	e083      	b.n	800151a <HAL_ADC_ConfigChannel+0x17e>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	6812      	ldr	r2, [r2, #0]
 800141a:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800141c:	683a      	ldr	r2, [r7, #0]
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	2001      	movs	r0, #1
 8001422:	4090      	lsls	r0, r2
 8001424:	0002      	movs	r2, r0
 8001426:	430a      	orrs	r2, r1
 8001428:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800142e:	2380      	movs	r3, #128	; 0x80
 8001430:	055b      	lsls	r3, r3, #21
 8001432:	429a      	cmp	r2, r3
 8001434:	d037      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x10a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143a:	2b01      	cmp	r3, #1
 800143c:	d033      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x10a>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001442:	2b02      	cmp	r3, #2
 8001444:	d02f      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x10a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800144a:	2b03      	cmp	r3, #3
 800144c:	d02b      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x10a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001452:	2b04      	cmp	r3, #4
 8001454:	d027      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x10a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145a:	2b05      	cmp	r3, #5
 800145c:	d023      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x10a>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001462:	2b06      	cmp	r3, #6
 8001464:	d01f      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x10a>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800146a:	2b07      	cmp	r3, #7
 800146c:	d01b      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x10a>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	689a      	ldr	r2, [r3, #8]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	695b      	ldr	r3, [r3, #20]
 8001478:	2107      	movs	r1, #7
 800147a:	400b      	ands	r3, r1
 800147c:	429a      	cmp	r2, r3
 800147e:	d012      	beq.n	80014a6 <HAL_ADC_ConfigChannel+0x10a>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	6952      	ldr	r2, [r2, #20]
 800148a:	2107      	movs	r1, #7
 800148c:	438a      	bics	r2, r1
 800148e:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	6812      	ldr	r2, [r2, #0]
 8001498:	6951      	ldr	r1, [r2, #20]
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	6892      	ldr	r2, [r2, #8]
 800149e:	2007      	movs	r0, #7
 80014a0:	4002      	ands	r2, r0
 80014a2:	430a      	orrs	r2, r1
 80014a4:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b10      	cmp	r3, #16
 80014ac:	d007      	beq.n	80014be <HAL_ADC_ConfigChannel+0x122>
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2b11      	cmp	r3, #17
 80014b4:	d003      	beq.n	80014be <HAL_ADC_ConfigChannel+0x122>
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b12      	cmp	r3, #18
 80014bc:	d163      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80014be:	4a38      	ldr	r2, [pc, #224]	; (80015a0 <HAL_ADC_ConfigChannel+0x204>)
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <HAL_ADC_ConfigChannel+0x204>)
 80014c2:	6819      	ldr	r1, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2b10      	cmp	r3, #16
 80014ca:	d009      	beq.n	80014e0 <HAL_ADC_ConfigChannel+0x144>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2b11      	cmp	r3, #17
 80014d2:	d102      	bne.n	80014da <HAL_ADC_ConfigChannel+0x13e>
 80014d4:	2380      	movs	r3, #128	; 0x80
 80014d6:	03db      	lsls	r3, r3, #15
 80014d8:	e004      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x148>
 80014da:	2380      	movs	r3, #128	; 0x80
 80014dc:	045b      	lsls	r3, r3, #17
 80014de:	e001      	b.n	80014e4 <HAL_ADC_ConfigChannel+0x148>
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	041b      	lsls	r3, r3, #16
 80014e4:	430b      	orrs	r3, r1
 80014e6:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b10      	cmp	r3, #16
 80014ee:	d14a      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x1ea>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014f0:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <HAL_ADC_ConfigChannel+0x208>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	492c      	ldr	r1, [pc, #176]	; (80015a8 <HAL_ADC_ConfigChannel+0x20c>)
 80014f6:	0018      	movs	r0, r3
 80014f8:	f7fe fe04 	bl	8000104 <__udivsi3>
 80014fc:	0003      	movs	r3, r0
 80014fe:	001a      	movs	r2, r3
 8001500:	0013      	movs	r3, r2
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	189b      	adds	r3, r3, r2
 8001506:	005b      	lsls	r3, r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800150a:	e002      	b.n	8001512 <HAL_ADC_ConfigChannel+0x176>
          {
            wait_loop_index--;
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	3b01      	subs	r3, #1
 8001510:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001512:	68bb      	ldr	r3, [r7, #8]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f9      	bne.n	800150c <HAL_ADC_ConfigChannel+0x170>
 8001518:	e035      	b.n	8001586 <HAL_ADC_ConfigChannel+0x1ea>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6812      	ldr	r2, [r2, #0]
 8001522:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001524:	683a      	ldr	r2, [r7, #0]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	2001      	movs	r0, #1
 800152a:	4090      	lsls	r0, r2
 800152c:	0002      	movs	r2, r0
 800152e:	43d2      	mvns	r2, r2
 8001530:	400a      	ands	r2, r1
 8001532:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b10      	cmp	r3, #16
 800153a:	d007      	beq.n	800154c <HAL_ADC_ConfigChannel+0x1b0>
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2b11      	cmp	r3, #17
 8001542:	d003      	beq.n	800154c <HAL_ADC_ConfigChannel+0x1b0>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b12      	cmp	r3, #18
 800154a:	d11c      	bne.n	8001586 <HAL_ADC_ConfigChannel+0x1ea>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <HAL_ADC_ConfigChannel+0x204>)
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <HAL_ADC_ConfigChannel+0x204>)
 8001550:	6819      	ldr	r1, [r3, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2b10      	cmp	r3, #16
 8001558:	d007      	beq.n	800156a <HAL_ADC_ConfigChannel+0x1ce>
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	2b11      	cmp	r3, #17
 8001560:	d101      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x1ca>
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_ADC_ConfigChannel+0x210>)
 8001564:	e002      	b.n	800156c <HAL_ADC_ConfigChannel+0x1d0>
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <HAL_ADC_ConfigChannel+0x214>)
 8001568:	e000      	b.n	800156c <HAL_ADC_ConfigChannel+0x1d0>
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <HAL_ADC_ConfigChannel+0x218>)
 800156c:	400b      	ands	r3, r1
 800156e:	6013      	str	r3, [r2, #0]
 8001570:	e009      	b.n	8001586 <HAL_ADC_ConfigChannel+0x1ea>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	2220      	movs	r2, #32
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 800157e:	230f      	movs	r3, #15
 8001580:	18fb      	adds	r3, r7, r3
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2240      	movs	r2, #64	; 0x40
 800158a:	2100      	movs	r1, #0
 800158c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800158e:	230f      	movs	r3, #15
 8001590:	18fb      	adds	r3, r7, r3
 8001592:	781b      	ldrb	r3, [r3, #0]
}
 8001594:	0018      	movs	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	b004      	add	sp, #16
 800159a:	bd80      	pop	{r7, pc}
 800159c:	00001001 	.word	0x00001001
 80015a0:	40012708 	.word	0x40012708
 80015a4:	20000000 	.word	0x20000000
 80015a8:	000f4240 	.word	0x000f4240
 80015ac:	ffbfffff 	.word	0xffbfffff
 80015b0:	feffffff 	.word	0xfeffffff
 80015b4:	ff7fffff 	.word	0xff7fffff

080015b8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	2203      	movs	r2, #3
 80015d0:	4013      	ands	r3, r2
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d112      	bne.n	80015fc <ADC_Enable+0x44>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2201      	movs	r2, #1
 80015de:	4013      	ands	r3, r2
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d009      	beq.n	80015f8 <ADC_Enable+0x40>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	68da      	ldr	r2, [r3, #12]
 80015ea:	2380      	movs	r3, #128	; 0x80
 80015ec:	021b      	lsls	r3, r3, #8
 80015ee:	401a      	ands	r2, r3
 80015f0:	2380      	movs	r3, #128	; 0x80
 80015f2:	021b      	lsls	r3, r3, #8
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d101      	bne.n	80015fc <ADC_Enable+0x44>
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <ADC_Enable+0x46>
 80015fc:	2300      	movs	r3, #0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d14b      	bne.n	800169a <ADC_Enable+0xe2>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689b      	ldr	r3, [r3, #8]
 8001608:	4a26      	ldr	r2, [pc, #152]	; (80016a4 <ADC_Enable+0xec>)
 800160a:	4013      	ands	r3, r2
 800160c:	d00d      	beq.n	800162a <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	2210      	movs	r2, #16
 8001614:	431a      	orrs	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161e:	2201      	movs	r2, #1
 8001620:	431a      	orrs	r2, r3
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e038      	b.n	800169c <ADC_Enable+0xe4>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	6892      	ldr	r2, [r2, #8]
 8001634:	2101      	movs	r1, #1
 8001636:	430a      	orrs	r2, r1
 8001638:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800163a:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <ADC_Enable+0xf0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	491b      	ldr	r1, [pc, #108]	; (80016ac <ADC_Enable+0xf4>)
 8001640:	0018      	movs	r0, r3
 8001642:	f7fe fd5f 	bl	8000104 <__udivsi3>
 8001646:	0003      	movs	r3, r0
 8001648:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800164a:	e002      	b.n	8001652 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	3b01      	subs	r3, #1
 8001650:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001652:	68bb      	ldr	r3, [r7, #8]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1f9      	bne.n	800164c <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001658:	f7ff fc26 	bl	8000ea8 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001660:	e014      	b.n	800168c <ADC_Enable+0xd4>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001662:	f7ff fc21 	bl	8000ea8 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	2b02      	cmp	r3, #2
 800166e:	d90d      	bls.n	800168c <ADC_Enable+0xd4>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	2210      	movs	r2, #16
 8001676:	431a      	orrs	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001680:	2201      	movs	r2, #1
 8001682:	431a      	orrs	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e007      	b.n	800169c <ADC_Enable+0xe4>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2201      	movs	r2, #1
 8001694:	4013      	ands	r3, r2
 8001696:	2b01      	cmp	r3, #1
 8001698:	d1e3      	bne.n	8001662 <ADC_Enable+0xaa>
    }   
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 800169a:	2300      	movs	r3, #0
}
 800169c:	0018      	movs	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	b004      	add	sp, #16
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	80000017 	.word	0x80000017
 80016a8:	20000000 	.word	0x20000000
 80016ac:	000f4240 	.word	0x000f4240

080016b0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2203      	movs	r2, #3
 80016c4:	4013      	ands	r3, r2
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d112      	bne.n	80016f0 <ADC_Disable+0x40>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d009      	beq.n	80016ec <ADC_Disable+0x3c>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	68da      	ldr	r2, [r3, #12]
 80016de:	2380      	movs	r3, #128	; 0x80
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	401a      	ands	r2, r3
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d101      	bne.n	80016f0 <ADC_Disable+0x40>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <ADC_Disable+0x42>
 80016f0:	2300      	movs	r3, #0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d040      	beq.n	8001778 <ADC_Disable+0xc8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	2205      	movs	r2, #5
 80016fe:	4013      	ands	r3, r2
 8001700:	2b01      	cmp	r3, #1
 8001702:	d110      	bne.n	8001726 <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	6812      	ldr	r2, [r2, #0]
 800170c:	6892      	ldr	r2, [r2, #8]
 800170e:	2102      	movs	r1, #2
 8001710:	430a      	orrs	r2, r1
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2203      	movs	r2, #3
 800171a:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800171c:	f7ff fbc4 	bl	8000ea8 <HAL_GetTick>
 8001720:	0003      	movs	r3, r0
 8001722:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001724:	e022      	b.n	800176c <ADC_Disable+0xbc>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	2210      	movs	r2, #16
 800172c:	431a      	orrs	r2, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001736:	2201      	movs	r2, #1
 8001738:	431a      	orrs	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e01b      	b.n	800177a <ADC_Disable+0xca>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001742:	f7ff fbb1 	bl	8000ea8 <HAL_GetTick>
 8001746:	0002      	movs	r2, r0
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	2b02      	cmp	r3, #2
 800174e:	d90d      	bls.n	800176c <ADC_Disable+0xbc>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001754:	2210      	movs	r2, #16
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001760:	2201      	movs	r2, #1
 8001762:	431a      	orrs	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001768:	2301      	movs	r3, #1
 800176a:	e006      	b.n	800177a <ADC_Disable+0xca>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	689b      	ldr	r3, [r3, #8]
 8001772:	2201      	movs	r2, #1
 8001774:	4013      	ands	r3, r2
 8001776:	d1e4      	bne.n	8001742 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001778:	2300      	movs	r3, #0
}
 800177a:	0018      	movs	r0, r3
 800177c:	46bd      	mov	sp, r7
 800177e:	b004      	add	sp, #16
 8001780:	bd80      	pop	{r7, pc}

08001782 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b084      	sub	sp, #16
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	2204      	movs	r2, #4
 8001796:	4013      	ands	r3, r2
 8001798:	d033      	beq.n	8001802 <ADC_ConversionStop+0x80>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	689b      	ldr	r3, [r3, #8]
 80017a0:	2204      	movs	r2, #4
 80017a2:	4013      	ands	r3, r2
 80017a4:	d00d      	beq.n	80017c2 <ADC_ConversionStop+0x40>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	2202      	movs	r2, #2
 80017ae:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80017b0:	d107      	bne.n	80017c2 <ADC_ConversionStop+0x40>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	6812      	ldr	r2, [r2, #0]
 80017ba:	6892      	ldr	r2, [r2, #8]
 80017bc:	2110      	movs	r1, #16
 80017be:	430a      	orrs	r2, r1
 80017c0:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80017c2:	f7ff fb71 	bl	8000ea8 <HAL_GetTick>
 80017c6:	0003      	movs	r3, r0
 80017c8:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80017ca:	e014      	b.n	80017f6 <ADC_ConversionStop+0x74>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80017cc:	f7ff fb6c 	bl	8000ea8 <HAL_GetTick>
 80017d0:	0002      	movs	r2, r0
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d90d      	bls.n	80017f6 <ADC_ConversionStop+0x74>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017de:	2210      	movs	r2, #16
 80017e0:	431a      	orrs	r2, r3
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	645a      	str	r2, [r3, #68]	; 0x44
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017ea:	2201      	movs	r2, #1
 80017ec:	431a      	orrs	r2, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e006      	b.n	8001804 <ADC_ConversionStop+0x82>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	2204      	movs	r2, #4
 80017fe:	4013      	ands	r3, r2
 8001800:	d1e4      	bne.n	80017cc <ADC_ConversionStop+0x4a>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	0018      	movs	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	b004      	add	sp, #16
 800180a:	bd80      	pop	{r7, pc}

0800180c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b5b0      	push	{r4, r5, r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
 8001812:	0002      	movs	r2, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	1dfb      	adds	r3, r7, #7
 8001818:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 800181a:	1dfb      	adds	r3, r7, #7
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b7f      	cmp	r3, #127	; 0x7f
 8001820:	d932      	bls.n	8001888 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001822:	4c2f      	ldr	r4, [pc, #188]	; (80018e0 <NVIC_SetPriority+0xd4>)
 8001824:	1dfb      	adds	r3, r7, #7
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	001a      	movs	r2, r3
 800182a:	230f      	movs	r3, #15
 800182c:	4013      	ands	r3, r2
 800182e:	3b08      	subs	r3, #8
 8001830:	0899      	lsrs	r1, r3, #2
 8001832:	4a2b      	ldr	r2, [pc, #172]	; (80018e0 <NVIC_SetPriority+0xd4>)
 8001834:	1dfb      	adds	r3, r7, #7
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	0018      	movs	r0, r3
 800183a:	230f      	movs	r3, #15
 800183c:	4003      	ands	r3, r0
 800183e:	3b08      	subs	r3, #8
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3306      	adds	r3, #6
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	18d3      	adds	r3, r2, r3
 8001848:	3304      	adds	r3, #4
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	1dfa      	adds	r2, r7, #7
 800184e:	7812      	ldrb	r2, [r2, #0]
 8001850:	0010      	movs	r0, r2
 8001852:	2203      	movs	r2, #3
 8001854:	4002      	ands	r2, r0
 8001856:	00d2      	lsls	r2, r2, #3
 8001858:	20ff      	movs	r0, #255	; 0xff
 800185a:	4090      	lsls	r0, r2
 800185c:	0002      	movs	r2, r0
 800185e:	43d2      	mvns	r2, r2
 8001860:	401a      	ands	r2, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	019b      	lsls	r3, r3, #6
 8001866:	20ff      	movs	r0, #255	; 0xff
 8001868:	4018      	ands	r0, r3
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	001d      	movs	r5, r3
 8001870:	2303      	movs	r3, #3
 8001872:	402b      	ands	r3, r5
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4098      	lsls	r0, r3
 8001878:	0003      	movs	r3, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800187a:	431a      	orrs	r2, r3
 800187c:	1d8b      	adds	r3, r1, #6
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	18e3      	adds	r3, r4, r3
 8001882:	3304      	adds	r3, #4
 8001884:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001886:	e027      	b.n	80018d8 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001888:	4c16      	ldr	r4, [pc, #88]	; (80018e4 <NVIC_SetPriority+0xd8>)
 800188a:	1dfb      	adds	r3, r7, #7
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	b25b      	sxtb	r3, r3
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	4914      	ldr	r1, [pc, #80]	; (80018e4 <NVIC_SetPriority+0xd8>)
 8001894:	1dfa      	adds	r2, r7, #7
 8001896:	7812      	ldrb	r2, [r2, #0]
 8001898:	b252      	sxtb	r2, r2
 800189a:	0892      	lsrs	r2, r2, #2
 800189c:	32c0      	adds	r2, #192	; 0xc0
 800189e:	0092      	lsls	r2, r2, #2
 80018a0:	5852      	ldr	r2, [r2, r1]
 80018a2:	1df9      	adds	r1, r7, #7
 80018a4:	7809      	ldrb	r1, [r1, #0]
 80018a6:	0008      	movs	r0, r1
 80018a8:	2103      	movs	r1, #3
 80018aa:	4001      	ands	r1, r0
 80018ac:	00c9      	lsls	r1, r1, #3
 80018ae:	20ff      	movs	r0, #255	; 0xff
 80018b0:	4088      	lsls	r0, r1
 80018b2:	0001      	movs	r1, r0
 80018b4:	43c9      	mvns	r1, r1
 80018b6:	4011      	ands	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018b8:	683a      	ldr	r2, [r7, #0]
 80018ba:	0192      	lsls	r2, r2, #6
 80018bc:	20ff      	movs	r0, #255	; 0xff
 80018be:	4010      	ands	r0, r2
 80018c0:	1dfa      	adds	r2, r7, #7
 80018c2:	7812      	ldrb	r2, [r2, #0]
 80018c4:	0015      	movs	r5, r2
 80018c6:	2203      	movs	r2, #3
 80018c8:	402a      	ands	r2, r5
 80018ca:	00d2      	lsls	r2, r2, #3
 80018cc:	4090      	lsls	r0, r2
 80018ce:	0002      	movs	r2, r0
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018d0:	430a      	orrs	r2, r1
 80018d2:	33c0      	adds	r3, #192	; 0xc0
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	511a      	str	r2, [r3, r4]
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b002      	add	sp, #8
 80018de:	bdb0      	pop	{r4, r5, r7, pc}
 80018e0:	e000ed00 	.word	0xe000ed00
 80018e4:	e000e100 	.word	0xe000e100

080018e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	3b01      	subs	r3, #1
 80018f4:	4a0c      	ldr	r2, [pc, #48]	; (8001928 <SysTick_Config+0x40>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018fa:	2301      	movs	r3, #1
 80018fc:	e010      	b.n	8001920 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <SysTick_Config+0x44>)
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	3a01      	subs	r2, #1
 8001904:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001906:	2301      	movs	r3, #1
 8001908:	425b      	negs	r3, r3
 800190a:	2103      	movs	r1, #3
 800190c:	0018      	movs	r0, r3
 800190e:	f7ff ff7d 	bl	800180c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001912:	4b06      	ldr	r3, [pc, #24]	; (800192c <SysTick_Config+0x44>)
 8001914:	2200      	movs	r2, #0
 8001916:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <SysTick_Config+0x44>)
 800191a:	2207      	movs	r2, #7
 800191c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800191e:	2300      	movs	r3, #0
}
 8001920:	0018      	movs	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	b002      	add	sp, #8
 8001926:	bd80      	pop	{r7, pc}
 8001928:	00ffffff 	.word	0x00ffffff
 800192c:	e000e010 	.word	0xe000e010

08001930 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
 800193a:	230f      	movs	r3, #15
 800193c:	18fb      	adds	r3, r7, r3
 800193e:	1c02      	adds	r2, r0, #0
 8001940:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	230f      	movs	r3, #15
 8001946:	18fb      	adds	r3, r7, r3
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	b25b      	sxtb	r3, r3
 800194c:	0011      	movs	r1, r2
 800194e:	0018      	movs	r0, r3
 8001950:	f7ff ff5c 	bl	800180c <NVIC_SetPriority>
}
 8001954:	46c0      	nop			; (mov r8, r8)
 8001956:	46bd      	mov	sp, r7
 8001958:	b004      	add	sp, #16
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0018      	movs	r0, r3
 8001968:	f7ff ffbe 	bl	80018e8 <SysTick_Config>
 800196c:	0003      	movs	r3, r0
}
 800196e:	0018      	movs	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	b002      	add	sp, #8
 8001974:	bd80      	pop	{r7, pc}
	...

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001986:	2300      	movs	r3, #0
 8001988:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800198a:	2300      	movs	r3, #0
 800198c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800198e:	e155      	b.n	8001c3c <HAL_GPIO_Init+0x2c4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2101      	movs	r1, #1
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	4091      	lsls	r1, r2
 800199a:	000a      	movs	r2, r1
 800199c:	4013      	ands	r3, r2
 800199e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d100      	bne.n	80019a8 <HAL_GPIO_Init+0x30>
 80019a6:	e146      	b.n	8001c36 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d003      	beq.n	80019b8 <HAL_GPIO_Init+0x40>
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b12      	cmp	r3, #18
 80019b6:	d123      	bne.n	8001a00 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3];
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	08da      	lsrs	r2, r3, #3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3208      	adds	r2, #8
 80019c0:	0092      	lsls	r2, r2, #2
 80019c2:	58d3      	ldr	r3, [r2, r3]
 80019c4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;      
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	2207      	movs	r2, #7
 80019ca:	4013      	ands	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	220f      	movs	r2, #15
 80019d0:	409a      	lsls	r2, r3
 80019d2:	0013      	movs	r3, r2
 80019d4:	43da      	mvns	r2, r3
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));       
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	691a      	ldr	r2, [r3, #16]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2107      	movs	r1, #7
 80019e4:	400b      	ands	r3, r1
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	409a      	lsls	r2, r3
 80019ea:	0013      	movs	r3, r2
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	08da      	lsrs	r2, r3, #3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	3208      	adds	r2, #8
 80019fa:	0092      	lsls	r2, r2, #2
 80019fc:	6939      	ldr	r1, [r7, #16]
 80019fe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2U));   
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	0013      	movs	r3, r2
 8001a10:	43da      	mvns	r2, r3
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2203      	movs	r2, #3
 8001a1e:	401a      	ands	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	005b      	lsls	r3, r3, #1
 8001a24:	409a      	lsls	r2, r3
 8001a26:	0013      	movs	r3, r2
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d00b      	beq.n	8001a54 <HAL_GPIO_Init+0xdc>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d007      	beq.n	8001a54 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a48:	2b11      	cmp	r3, #17
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b12      	cmp	r3, #18
 8001a52:	d130      	bne.n	8001ab6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	409a      	lsls	r2, r3
 8001a62:	0013      	movs	r3, r2
 8001a64:	43da      	mvns	r2, r3
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
 8001a90:	0013      	movs	r3, r2
 8001a92:	43da      	mvns	r2, r3
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	409a      	lsls	r2, r3
 8001aa8:	0013      	movs	r3, r2
 8001aaa:	693a      	ldr	r2, [r7, #16]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	0013      	movs	r3, r2
 8001ac6:	43da      	mvns	r2, r3
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	689a      	ldr	r2, [r3, #8]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	0013      	movs	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685a      	ldr	r2, [r3, #4]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	055b      	lsls	r3, r3, #21
 8001aee:	4013      	ands	r3, r2
 8001af0:	d100      	bne.n	8001af4 <HAL_GPIO_Init+0x17c>
 8001af2:	e0a0      	b.n	8001c36 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af4:	4b57      	ldr	r3, [pc, #348]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001af6:	4a57      	ldr	r2, [pc, #348]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001af8:	6992      	ldr	r2, [r2, #24]
 8001afa:	2101      	movs	r1, #1
 8001afc:	430a      	orrs	r2, r1
 8001afe:	619a      	str	r2, [r3, #24]
 8001b00:	4b54      	ldr	r3, [pc, #336]	; (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	2201      	movs	r2, #1
 8001b06:	4013      	ands	r3, r2
 8001b08:	60bb      	str	r3, [r7, #8]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
  
        temp = SYSCFG->EXTICR[position >> 2];
 8001b0c:	4a52      	ldr	r2, [pc, #328]	; (8001c58 <HAL_GPIO_Init+0x2e0>)
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	089b      	lsrs	r3, r3, #2
 8001b12:	3302      	adds	r3, #2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	589b      	ldr	r3, [r3, r2]
 8001b18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	4013      	ands	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	220f      	movs	r2, #15
 8001b24:	409a      	lsls	r2, r3
 8001b26:	0013      	movs	r3, r2
 8001b28:	43da      	mvns	r2, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	2390      	movs	r3, #144	; 0x90
 8001b34:	05db      	lsls	r3, r3, #23
 8001b36:	429a      	cmp	r2, r3
 8001b38:	d019      	beq.n	8001b6e <HAL_GPIO_Init+0x1f6>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a47      	ldr	r2, [pc, #284]	; (8001c5c <HAL_GPIO_Init+0x2e4>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d013      	beq.n	8001b6a <HAL_GPIO_Init+0x1f2>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a46      	ldr	r2, [pc, #280]	; (8001c60 <HAL_GPIO_Init+0x2e8>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d00d      	beq.n	8001b66 <HAL_GPIO_Init+0x1ee>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a45      	ldr	r2, [pc, #276]	; (8001c64 <HAL_GPIO_Init+0x2ec>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d007      	beq.n	8001b62 <HAL_GPIO_Init+0x1ea>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a44      	ldr	r2, [pc, #272]	; (8001c68 <HAL_GPIO_Init+0x2f0>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d101      	bne.n	8001b5e <HAL_GPIO_Init+0x1e6>
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	e008      	b.n	8001b70 <HAL_GPIO_Init+0x1f8>
 8001b5e:	2305      	movs	r3, #5
 8001b60:	e006      	b.n	8001b70 <HAL_GPIO_Init+0x1f8>
 8001b62:	2303      	movs	r3, #3
 8001b64:	e004      	b.n	8001b70 <HAL_GPIO_Init+0x1f8>
 8001b66:	2302      	movs	r3, #2
 8001b68:	e002      	b.n	8001b70 <HAL_GPIO_Init+0x1f8>
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e000      	b.n	8001b70 <HAL_GPIO_Init+0x1f8>
 8001b6e:	2300      	movs	r3, #0
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	2103      	movs	r1, #3
 8001b74:	400a      	ands	r2, r1
 8001b76:	0092      	lsls	r2, r2, #2
 8001b78:	4093      	lsls	r3, r2
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001b80:	4935      	ldr	r1, [pc, #212]	; (8001c58 <HAL_GPIO_Init+0x2e0>)
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	089b      	lsrs	r3, r3, #2
 8001b86:	3302      	adds	r3, #2
 8001b88:	009b      	lsls	r3, r3, #2
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <HAL_GPIO_Init+0x2f4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	43da      	mvns	r2, r3
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	025b      	lsls	r3, r3, #9
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x23a>
        {
          SET_BIT(temp, iocurrent); 
 8001baa:	693a      	ldr	r2, [r7, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <HAL_GPIO_Init+0x2f4>)
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <HAL_GPIO_Init+0x2f4>)
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	2380      	movs	r3, #128	; 0x80
 8001bce:	029b      	lsls	r3, r3, #10
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x264>
        { 
          SET_BIT(temp, iocurrent); 
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bdc:	4b23      	ldr	r3, [pc, #140]	; (8001c6c <HAL_GPIO_Init+0x2f4>)
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	605a      	str	r2, [r3, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001be2:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <HAL_GPIO_Init+0x2f4>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	43da      	mvns	r2, r3
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	035b      	lsls	r3, r3, #13
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x28e>
        {
          SET_BIT(temp, iocurrent); 
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001c06:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <HAL_GPIO_Init+0x2f4>)
 8001c08:	693a      	ldr	r2, [r7, #16]
 8001c0a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_GPIO_Init+0x2f4>)
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	43da      	mvns	r2, r3
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	2380      	movs	r3, #128	; 0x80
 8001c22:	039b      	lsls	r3, r3, #14
 8001c24:	4013      	ands	r3, r2
 8001c26:	d003      	beq.n	8001c30 <HAL_GPIO_Init+0x2b8>
        {
          SET_BIT(temp, iocurrent); 
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	4313      	orrs	r3, r2
 8001c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001c30:	4b0e      	ldr	r3, [pc, #56]	; (8001c6c <HAL_GPIO_Init+0x2f4>)
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	60da      	str	r2, [r3, #12]
      }
    }
    
    position++;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	40da      	lsrs	r2, r3
 8001c44:	1e13      	subs	r3, r2, #0
 8001c46:	d000      	beq.n	8001c4a <HAL_GPIO_Init+0x2d2>
 8001c48:	e6a2      	b.n	8001990 <HAL_GPIO_Init+0x18>
  } 
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b006      	add	sp, #24
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	46c0      	nop			; (mov r8, r8)
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40010000 	.word	0x40010000
 8001c5c:	48000400 	.word	0x48000400
 8001c60:	48000800 	.word	0x48000800
 8001c64:	48000c00 	.word	0x48000c00
 8001c68:	48001000 	.word	0x48001000
 8001c6c:	40010400 	.word	0x40010400

08001c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	0008      	movs	r0, r1
 8001c7a:	0011      	movs	r1, r2
 8001c7c:	1cbb      	adds	r3, r7, #2
 8001c7e:	1c02      	adds	r2, r0, #0
 8001c80:	801a      	strh	r2, [r3, #0]
 8001c82:	1c7b      	adds	r3, r7, #1
 8001c84:	1c0a      	adds	r2, r1, #0
 8001c86:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c88:	1c7b      	adds	r3, r7, #1
 8001c8a:	781b      	ldrb	r3, [r3, #0]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c90:	1cbb      	adds	r3, r7, #2
 8001c92:	881a      	ldrh	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c98:	e003      	b.n	8001ca2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c9a:	1cbb      	adds	r3, r7, #2
 8001c9c:	881a      	ldrh	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ca2:	46c0      	nop			; (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	b002      	add	sp, #8
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d100      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x18>
 8001cc2:	e08d      	b.n	8001de0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cc4:	4bc5      	ldr	r3, [pc, #788]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	220c      	movs	r2, #12
 8001cca:	4013      	ands	r3, r2
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	d00e      	beq.n	8001cee <HAL_RCC_OscConfig+0x42>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cd0:	4bc2      	ldr	r3, [pc, #776]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	220c      	movs	r2, #12
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	2b08      	cmp	r3, #8
 8001cda:	d116      	bne.n	8001d0a <HAL_RCC_OscConfig+0x5e>
 8001cdc:	4bbf      	ldr	r3, [pc, #764]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001cde:	685a      	ldr	r2, [r3, #4]
 8001ce0:	23c0      	movs	r3, #192	; 0xc0
 8001ce2:	025b      	lsls	r3, r3, #9
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	2380      	movs	r3, #128	; 0x80
 8001ce8:	025b      	lsls	r3, r3, #9
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d10d      	bne.n	8001d0a <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cee:	4bbb      	ldr	r3, [pc, #748]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	2380      	movs	r3, #128	; 0x80
 8001cf4:	029b      	lsls	r3, r3, #10
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d100      	bne.n	8001cfc <HAL_RCC_OscConfig+0x50>
 8001cfa:	e070      	b.n	8001dde <HAL_RCC_OscConfig+0x132>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d000      	beq.n	8001d06 <HAL_RCC_OscConfig+0x5a>
 8001d04:	e06b      	b.n	8001dde <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e327      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d107      	bne.n	8001d22 <HAL_RCC_OscConfig+0x76>
 8001d12:	4bb2      	ldr	r3, [pc, #712]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d14:	4ab1      	ldr	r2, [pc, #708]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	0249      	lsls	r1, r1, #9
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	e02f      	b.n	8001d82 <HAL_RCC_OscConfig+0xd6>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10c      	bne.n	8001d44 <HAL_RCC_OscConfig+0x98>
 8001d2a:	4bac      	ldr	r3, [pc, #688]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d2c:	4aab      	ldr	r2, [pc, #684]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d2e:	6812      	ldr	r2, [r2, #0]
 8001d30:	49ab      	ldr	r1, [pc, #684]	; (8001fe0 <HAL_RCC_OscConfig+0x334>)
 8001d32:	400a      	ands	r2, r1
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	4ba9      	ldr	r3, [pc, #676]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d38:	4aa8      	ldr	r2, [pc, #672]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d3a:	6812      	ldr	r2, [r2, #0]
 8001d3c:	49a9      	ldr	r1, [pc, #676]	; (8001fe4 <HAL_RCC_OscConfig+0x338>)
 8001d3e:	400a      	ands	r2, r1
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	e01e      	b.n	8001d82 <HAL_RCC_OscConfig+0xd6>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d10e      	bne.n	8001d6a <HAL_RCC_OscConfig+0xbe>
 8001d4c:	4ba3      	ldr	r3, [pc, #652]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d4e:	4aa3      	ldr	r2, [pc, #652]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d50:	6812      	ldr	r2, [r2, #0]
 8001d52:	2180      	movs	r1, #128	; 0x80
 8001d54:	02c9      	lsls	r1, r1, #11
 8001d56:	430a      	orrs	r2, r1
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	4ba0      	ldr	r3, [pc, #640]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d5c:	4a9f      	ldr	r2, [pc, #636]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d5e:	6812      	ldr	r2, [r2, #0]
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	0249      	lsls	r1, r1, #9
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	e00b      	b.n	8001d82 <HAL_RCC_OscConfig+0xd6>
 8001d6a:	4b9c      	ldr	r3, [pc, #624]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d6c:	4a9b      	ldr	r2, [pc, #620]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d6e:	6812      	ldr	r2, [r2, #0]
 8001d70:	499b      	ldr	r1, [pc, #620]	; (8001fe0 <HAL_RCC_OscConfig+0x334>)
 8001d72:	400a      	ands	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	4b99      	ldr	r3, [pc, #612]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d78:	4a98      	ldr	r2, [pc, #608]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001d7a:	6812      	ldr	r2, [r2, #0]
 8001d7c:	4999      	ldr	r1, [pc, #612]	; (8001fe4 <HAL_RCC_OscConfig+0x338>)
 8001d7e:	400a      	ands	r2, r1
 8001d80:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d014      	beq.n	8001db4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8a:	f7ff f88d 	bl	8000ea8 <HAL_GetTick>
 8001d8e:	0003      	movs	r3, r0
 8001d90:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff f888 	bl	8000ea8 <HAL_GetTick>
 8001d98:	0002      	movs	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e2d9      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001da6:	4b8d      	ldr	r3, [pc, #564]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	2380      	movs	r3, #128	; 0x80
 8001dac:	029b      	lsls	r3, r3, #10
 8001dae:	4013      	ands	r3, r2
 8001db0:	d0f0      	beq.n	8001d94 <HAL_RCC_OscConfig+0xe8>
 8001db2:	e015      	b.n	8001de0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff f878 	bl	8000ea8 <HAL_GetTick>
 8001db8:	0003      	movs	r3, r0
 8001dba:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dbe:	f7ff f873 	bl	8000ea8 <HAL_GetTick>
 8001dc2:	0002      	movs	r2, r0
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b64      	cmp	r3, #100	; 0x64
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e2c4      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd0:	4b82      	ldr	r3, [pc, #520]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	2380      	movs	r3, #128	; 0x80
 8001dd6:	029b      	lsls	r3, r3, #10
 8001dd8:	4013      	ands	r3, r2
 8001dda:	d1f0      	bne.n	8001dbe <HAL_RCC_OscConfig+0x112>
 8001ddc:	e000      	b.n	8001de0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dde:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2202      	movs	r2, #2
 8001de6:	4013      	ands	r3, r2
 8001de8:	d100      	bne.n	8001dec <HAL_RCC_OscConfig+0x140>
 8001dea:	e06c      	b.n	8001ec6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dec:	4b7b      	ldr	r3, [pc, #492]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	220c      	movs	r2, #12
 8001df2:	4013      	ands	r3, r2
 8001df4:	d00e      	beq.n	8001e14 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001df6:	4b79      	ldr	r3, [pc, #484]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	220c      	movs	r2, #12
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d11f      	bne.n	8001e42 <HAL_RCC_OscConfig+0x196>
 8001e02:	4b76      	ldr	r3, [pc, #472]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001e04:	685a      	ldr	r2, [r3, #4]
 8001e06:	23c0      	movs	r3, #192	; 0xc0
 8001e08:	025b      	lsls	r3, r3, #9
 8001e0a:	401a      	ands	r2, r3
 8001e0c:	2380      	movs	r3, #128	; 0x80
 8001e0e:	021b      	lsls	r3, r3, #8
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d116      	bne.n	8001e42 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e14:	4b71      	ldr	r3, [pc, #452]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2202      	movs	r2, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d005      	beq.n	8001e2a <HAL_RCC_OscConfig+0x17e>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d001      	beq.n	8001e2a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e297      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e2a:	4a6c      	ldr	r2, [pc, #432]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001e2c:	4b6b      	ldr	r3, [pc, #428]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	21f8      	movs	r1, #248	; 0xf8
 8001e32:	438b      	bics	r3, r1
 8001e34:	0019      	movs	r1, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	691b      	ldr	r3, [r3, #16]
 8001e3a:	00db      	lsls	r3, r3, #3
 8001e3c:	430b      	orrs	r3, r1
 8001e3e:	6013      	str	r3, [r2, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e40:	e041      	b.n	8001ec6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d024      	beq.n	8001e94 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e4a:	4b64      	ldr	r3, [pc, #400]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001e4c:	4a63      	ldr	r2, [pc, #396]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001e4e:	6812      	ldr	r2, [r2, #0]
 8001e50:	2101      	movs	r1, #1
 8001e52:	430a      	orrs	r2, r1
 8001e54:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e56:	f7ff f827 	bl	8000ea8 <HAL_GetTick>
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e60:	f7ff f822 	bl	8000ea8 <HAL_GetTick>
 8001e64:	0002      	movs	r2, r0
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e273      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e72:	4b5a      	ldr	r3, [pc, #360]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2202      	movs	r2, #2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	d0f1      	beq.n	8001e60 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7c:	4a57      	ldr	r2, [pc, #348]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001e7e:	4b57      	ldr	r3, [pc, #348]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	21f8      	movs	r1, #248	; 0xf8
 8001e84:	438b      	bics	r3, r1
 8001e86:	0019      	movs	r1, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	00db      	lsls	r3, r3, #3
 8001e8e:	430b      	orrs	r3, r1
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e018      	b.n	8001ec6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e94:	4b51      	ldr	r3, [pc, #324]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001e96:	4a51      	ldr	r2, [pc, #324]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001e98:	6812      	ldr	r2, [r2, #0]
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	438a      	bics	r2, r1
 8001e9e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ea0:	f7ff f802 	bl	8000ea8 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	613b      	str	r3, [r7, #16]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eaa:	f7fe fffd 	bl	8000ea8 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e24e      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ebc:	4b47      	ldr	r3, [pc, #284]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d1f1      	bne.n	8001eaa <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2208      	movs	r2, #8
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d036      	beq.n	8001f3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d019      	beq.n	8001f0c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ed8:	4b40      	ldr	r3, [pc, #256]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001eda:	4a40      	ldr	r2, [pc, #256]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001edc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001ede:	2101      	movs	r1, #1
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ee4:	f7fe ffe0 	bl	8000ea8 <HAL_GetTick>
 8001ee8:	0003      	movs	r3, r0
 8001eea:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eee:	f7fe ffdb 	bl	8000ea8 <HAL_GetTick>
 8001ef2:	0002      	movs	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e22c      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f00:	4b36      	ldr	r3, [pc, #216]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f04:	2202      	movs	r2, #2
 8001f06:	4013      	ands	r3, r2
 8001f08:	d0f1      	beq.n	8001eee <HAL_RCC_OscConfig+0x242>
 8001f0a:	e018      	b.n	8001f3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f0c:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001f0e:	4a33      	ldr	r2, [pc, #204]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001f10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f12:	2101      	movs	r1, #1
 8001f14:	438a      	bics	r2, r1
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7fe ffc6 	bl	8000ea8 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f22:	f7fe ffc1 	bl	8000ea8 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e212      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	2202      	movs	r2, #2
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	d1f1      	bne.n	8001f22 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2204      	movs	r2, #4
 8001f44:	4013      	ands	r3, r2
 8001f46:	d100      	bne.n	8001f4a <HAL_RCC_OscConfig+0x29e>
 8001f48:	e0b6      	b.n	80020b8 <HAL_RCC_OscConfig+0x40c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f4a:	2317      	movs	r3, #23
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	2200      	movs	r2, #0
 8001f50:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f52:	4b22      	ldr	r3, [pc, #136]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	2380      	movs	r3, #128	; 0x80
 8001f58:	055b      	lsls	r3, r3, #21
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	d111      	bne.n	8001f82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f5e:	4b1f      	ldr	r3, [pc, #124]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001f60:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001f62:	69d2      	ldr	r2, [r2, #28]
 8001f64:	2180      	movs	r1, #128	; 0x80
 8001f66:	0549      	lsls	r1, r1, #21
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	61da      	str	r2, [r3, #28]
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001f6e:	69da      	ldr	r2, [r3, #28]
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	055b      	lsls	r3, r3, #21
 8001f74:	4013      	ands	r3, r2
 8001f76:	60fb      	str	r3, [r7, #12]
 8001f78:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f7a:	2317      	movs	r3, #23
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	2201      	movs	r2, #1
 8001f80:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <HAL_RCC_OscConfig+0x33c>)
 8001f84:	681a      	ldr	r2, [r3, #0]
 8001f86:	2380      	movs	r3, #128	; 0x80
 8001f88:	005b      	lsls	r3, r3, #1
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	d11a      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x318>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f8e:	4b16      	ldr	r3, [pc, #88]	; (8001fe8 <HAL_RCC_OscConfig+0x33c>)
 8001f90:	4a15      	ldr	r2, [pc, #84]	; (8001fe8 <HAL_RCC_OscConfig+0x33c>)
 8001f92:	6812      	ldr	r2, [r2, #0]
 8001f94:	2180      	movs	r1, #128	; 0x80
 8001f96:	0049      	lsls	r1, r1, #1
 8001f98:	430a      	orrs	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9c:	f7fe ff84 	bl	8000ea8 <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x30c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7fe ff7f 	bl	8000ea8 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b64      	cmp	r3, #100	; 0x64
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x30c>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e1d0      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <HAL_RCC_OscConfig+0x33c>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2fa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d10f      	bne.n	8001fec <HAL_RCC_OscConfig+0x340>
 8001fcc:	4b03      	ldr	r3, [pc, #12]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001fce:	4a03      	ldr	r2, [pc, #12]	; (8001fdc <HAL_RCC_OscConfig+0x330>)
 8001fd0:	6a12      	ldr	r2, [r2, #32]
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	621a      	str	r2, [r3, #32]
 8001fd8:	e036      	b.n	8002048 <HAL_RCC_OscConfig+0x39c>
 8001fda:	46c0      	nop			; (mov r8, r8)
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	fffeffff 	.word	0xfffeffff
 8001fe4:	fffbffff 	.word	0xfffbffff
 8001fe8:	40007000 	.word	0x40007000
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d10c      	bne.n	800200e <HAL_RCC_OscConfig+0x362>
 8001ff4:	4bc9      	ldr	r3, [pc, #804]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8001ff6:	4ac9      	ldr	r2, [pc, #804]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8001ff8:	6a12      	ldr	r2, [r2, #32]
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	438a      	bics	r2, r1
 8001ffe:	621a      	str	r2, [r3, #32]
 8002000:	4bc6      	ldr	r3, [pc, #792]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002002:	4ac6      	ldr	r2, [pc, #792]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002004:	6a12      	ldr	r2, [r2, #32]
 8002006:	2104      	movs	r1, #4
 8002008:	438a      	bics	r2, r1
 800200a:	621a      	str	r2, [r3, #32]
 800200c:	e01c      	b.n	8002048 <HAL_RCC_OscConfig+0x39c>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2b05      	cmp	r3, #5
 8002014:	d10c      	bne.n	8002030 <HAL_RCC_OscConfig+0x384>
 8002016:	4bc1      	ldr	r3, [pc, #772]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002018:	4ac0      	ldr	r2, [pc, #768]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800201a:	6a12      	ldr	r2, [r2, #32]
 800201c:	2104      	movs	r1, #4
 800201e:	430a      	orrs	r2, r1
 8002020:	621a      	str	r2, [r3, #32]
 8002022:	4bbe      	ldr	r3, [pc, #760]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002024:	4abd      	ldr	r2, [pc, #756]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002026:	6a12      	ldr	r2, [r2, #32]
 8002028:	2101      	movs	r1, #1
 800202a:	430a      	orrs	r2, r1
 800202c:	621a      	str	r2, [r3, #32]
 800202e:	e00b      	b.n	8002048 <HAL_RCC_OscConfig+0x39c>
 8002030:	4bba      	ldr	r3, [pc, #744]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002032:	4aba      	ldr	r2, [pc, #744]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002034:	6a12      	ldr	r2, [r2, #32]
 8002036:	2101      	movs	r1, #1
 8002038:	438a      	bics	r2, r1
 800203a:	621a      	str	r2, [r3, #32]
 800203c:	4bb7      	ldr	r3, [pc, #732]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800203e:	4ab7      	ldr	r2, [pc, #732]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002040:	6a12      	ldr	r2, [r2, #32]
 8002042:	2104      	movs	r1, #4
 8002044:	438a      	bics	r2, r1
 8002046:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d014      	beq.n	800207a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002050:	f7fe ff2a 	bl	8000ea8 <HAL_GetTick>
 8002054:	0003      	movs	r3, r0
 8002056:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002058:	e009      	b.n	800206e <HAL_RCC_OscConfig+0x3c2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205a:	f7fe ff25 	bl	8000ea8 <HAL_GetTick>
 800205e:	0002      	movs	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	4aae      	ldr	r2, [pc, #696]	; (8002320 <HAL_RCC_OscConfig+0x674>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e175      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800206e:	4bab      	ldr	r3, [pc, #684]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	2202      	movs	r2, #2
 8002074:	4013      	ands	r3, r2
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x3ae>
 8002078:	e013      	b.n	80020a2 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7fe ff15 	bl	8000ea8 <HAL_GetTick>
 800207e:	0003      	movs	r3, r0
 8002080:	613b      	str	r3, [r7, #16]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002082:	e009      	b.n	8002098 <HAL_RCC_OscConfig+0x3ec>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002084:	f7fe ff10 	bl	8000ea8 <HAL_GetTick>
 8002088:	0002      	movs	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	4aa4      	ldr	r2, [pc, #656]	; (8002320 <HAL_RCC_OscConfig+0x674>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e160      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002098:	4ba0      	ldr	r3, [pc, #640]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	2202      	movs	r2, #2
 800209e:	4013      	ands	r3, r2
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x3d8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020a2:	2317      	movs	r3, #23
 80020a4:	18fb      	adds	r3, r7, r3
 80020a6:	781b      	ldrb	r3, [r3, #0]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d105      	bne.n	80020b8 <HAL_RCC_OscConfig+0x40c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020ac:	4b9b      	ldr	r3, [pc, #620]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80020ae:	4a9b      	ldr	r2, [pc, #620]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80020b0:	69d2      	ldr	r2, [r2, #28]
 80020b2:	499c      	ldr	r1, [pc, #624]	; (8002324 <HAL_RCC_OscConfig+0x678>)
 80020b4:	400a      	ands	r2, r1
 80020b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2210      	movs	r2, #16
 80020be:	4013      	ands	r3, r2
 80020c0:	d063      	beq.n	800218a <HAL_RCC_OscConfig+0x4de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d12a      	bne.n	8002120 <HAL_RCC_OscConfig+0x474>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020ca:	4b94      	ldr	r3, [pc, #592]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80020cc:	4a93      	ldr	r2, [pc, #588]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80020ce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020d0:	2104      	movs	r1, #4
 80020d2:	430a      	orrs	r2, r1
 80020d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80020d6:	4b91      	ldr	r3, [pc, #580]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80020d8:	4a90      	ldr	r2, [pc, #576]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80020da:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020dc:	2101      	movs	r1, #1
 80020de:	430a      	orrs	r2, r1
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e2:	f7fe fee1 	bl	8000ea8 <HAL_GetTick>
 80020e6:	0003      	movs	r3, r0
 80020e8:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0x452>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020ec:	f7fe fedc 	bl	8000ea8 <HAL_GetTick>
 80020f0:	0002      	movs	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b02      	cmp	r3, #2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x452>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e12d      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80020fe:	4b87      	ldr	r3, [pc, #540]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002102:	2202      	movs	r2, #2
 8002104:	4013      	ands	r3, r2
 8002106:	d0f1      	beq.n	80020ec <HAL_RCC_OscConfig+0x440>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002108:	4a84      	ldr	r2, [pc, #528]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800210a:	4b84      	ldr	r3, [pc, #528]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800210c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800210e:	21f8      	movs	r1, #248	; 0xf8
 8002110:	438b      	bics	r3, r1
 8002112:	0019      	movs	r1, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699b      	ldr	r3, [r3, #24]
 8002118:	00db      	lsls	r3, r3, #3
 800211a:	430b      	orrs	r3, r1
 800211c:	6353      	str	r3, [r2, #52]	; 0x34
 800211e:	e034      	b.n	800218a <HAL_RCC_OscConfig+0x4de>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	3305      	adds	r3, #5
 8002126:	d111      	bne.n	800214c <HAL_RCC_OscConfig+0x4a0>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002128:	4b7c      	ldr	r3, [pc, #496]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800212a:	4a7c      	ldr	r2, [pc, #496]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800212c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800212e:	2104      	movs	r1, #4
 8002130:	438a      	bics	r2, r1
 8002132:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002134:	4a79      	ldr	r2, [pc, #484]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002136:	4b79      	ldr	r3, [pc, #484]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213a:	21f8      	movs	r1, #248	; 0xf8
 800213c:	438b      	bics	r3, r1
 800213e:	0019      	movs	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	00db      	lsls	r3, r3, #3
 8002146:	430b      	orrs	r3, r1
 8002148:	6353      	str	r3, [r2, #52]	; 0x34
 800214a:	e01e      	b.n	800218a <HAL_RCC_OscConfig+0x4de>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800214c:	4b73      	ldr	r3, [pc, #460]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800214e:	4a73      	ldr	r2, [pc, #460]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002150:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002152:	2104      	movs	r1, #4
 8002154:	430a      	orrs	r2, r1
 8002156:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002158:	4b70      	ldr	r3, [pc, #448]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800215a:	4a70      	ldr	r2, [pc, #448]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800215c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800215e:	2101      	movs	r1, #1
 8002160:	438a      	bics	r2, r1
 8002162:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7fe fea0 	bl	8000ea8 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	613b      	str	r3, [r7, #16]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x4d4>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800216e:	f7fe fe9b 	bl	8000ea8 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x4d4>
        {
          return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e0ec      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002180:	4b66      	ldr	r3, [pc, #408]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002184:	2202      	movs	r2, #2
 8002186:	4013      	ands	r3, r2
 8002188:	d1f1      	bne.n	800216e <HAL_RCC_OscConfig+0x4c2>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2220      	movs	r2, #32
 8002190:	4013      	ands	r3, r2
 8002192:	d05c      	beq.n	800224e <HAL_RCC_OscConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8002194:	4b61      	ldr	r3, [pc, #388]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	220c      	movs	r2, #12
 800219a:	4013      	ands	r3, r2
 800219c:	2b0c      	cmp	r3, #12
 800219e:	d00e      	beq.n	80021be <HAL_RCC_OscConfig+0x512>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80021a0:	4b5e      	ldr	r3, [pc, #376]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	220c      	movs	r2, #12
 80021a6:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d114      	bne.n	80021d6 <HAL_RCC_OscConfig+0x52a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80021ac:	4b5b      	ldr	r3, [pc, #364]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80021ae:	685a      	ldr	r2, [r3, #4]
 80021b0:	23c0      	movs	r3, #192	; 0xc0
 80021b2:	025b      	lsls	r3, r3, #9
 80021b4:	401a      	ands	r2, r3
 80021b6:	23c0      	movs	r3, #192	; 0xc0
 80021b8:	025b      	lsls	r3, r3, #9
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d10b      	bne.n	80021d6 <HAL_RCC_OscConfig+0x52a>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80021be:	4b57      	ldr	r3, [pc, #348]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80021c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	025b      	lsls	r3, r3, #9
 80021c6:	4013      	ands	r3, r2
 80021c8:	d040      	beq.n	800224c <HAL_RCC_OscConfig+0x5a0>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d03c      	beq.n	800224c <HAL_RCC_OscConfig+0x5a0>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e0c1      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d01b      	beq.n	8002216 <HAL_RCC_OscConfig+0x56a>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80021de:	4b4f      	ldr	r3, [pc, #316]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80021e0:	4a4e      	ldr	r2, [pc, #312]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80021e2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021e4:	2180      	movs	r1, #128	; 0x80
 80021e6:	0249      	lsls	r1, r1, #9
 80021e8:	430a      	orrs	r2, r1
 80021ea:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ec:	f7fe fe5c 	bl	8000ea8 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80021f4:	e008      	b.n	8002208 <HAL_RCC_OscConfig+0x55c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021f6:	f7fe fe57 	bl	8000ea8 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	2b02      	cmp	r3, #2
 8002202:	d901      	bls.n	8002208 <HAL_RCC_OscConfig+0x55c>
          {
            return HAL_TIMEOUT;
 8002204:	2303      	movs	r3, #3
 8002206:	e0a8      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8002208:	4b44      	ldr	r3, [pc, #272]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800220a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800220c:	2380      	movs	r3, #128	; 0x80
 800220e:	025b      	lsls	r3, r3, #9
 8002210:	4013      	ands	r3, r2
 8002212:	d0f0      	beq.n	80021f6 <HAL_RCC_OscConfig+0x54a>
 8002214:	e01b      	b.n	800224e <HAL_RCC_OscConfig+0x5a2>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002216:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002218:	4a40      	ldr	r2, [pc, #256]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800221a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800221c:	4942      	ldr	r1, [pc, #264]	; (8002328 <HAL_RCC_OscConfig+0x67c>)
 800221e:	400a      	ands	r2, r1
 8002220:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002222:	f7fe fe41 	bl	8000ea8 <HAL_GetTick>
 8002226:	0003      	movs	r3, r0
 8002228:	613b      	str	r3, [r7, #16]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x592>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800222c:	f7fe fe3c 	bl	8000ea8 <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e08d      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800223e:	4b37      	ldr	r3, [pc, #220]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002240:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002242:	2380      	movs	r3, #128	; 0x80
 8002244:	025b      	lsls	r3, r3, #9
 8002246:	4013      	ands	r3, r2
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x580>
 800224a:	e000      	b.n	800224e <HAL_RCC_OscConfig+0x5a2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800224c:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	2b00      	cmp	r3, #0
 8002254:	d100      	bne.n	8002258 <HAL_RCC_OscConfig+0x5ac>
 8002256:	e07f      	b.n	8002358 <HAL_RCC_OscConfig+0x6ac>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002258:	4b30      	ldr	r3, [pc, #192]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	220c      	movs	r2, #12
 800225e:	4013      	ands	r3, r2
 8002260:	2b08      	cmp	r3, #8
 8002262:	d100      	bne.n	8002266 <HAL_RCC_OscConfig+0x5ba>
 8002264:	e076      	b.n	8002354 <HAL_RCC_OscConfig+0x6a8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226a:	2b02      	cmp	r3, #2
 800226c:	d14b      	bne.n	8002306 <HAL_RCC_OscConfig+0x65a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800226e:	4b2b      	ldr	r3, [pc, #172]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002270:	4a2a      	ldr	r2, [pc, #168]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002272:	6812      	ldr	r2, [r2, #0]
 8002274:	492d      	ldr	r1, [pc, #180]	; (800232c <HAL_RCC_OscConfig+0x680>)
 8002276:	400a      	ands	r2, r1
 8002278:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fe15 	bl	8000ea8 <HAL_GetTick>
 800227e:	0003      	movs	r3, r0
 8002280:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x5ea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002284:	f7fe fe10 	bl	8000ea8 <HAL_GetTick>
 8002288:	0002      	movs	r2, r0
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	1ad3      	subs	r3, r2, r3
 800228e:	2b02      	cmp	r3, #2
 8002290:	d901      	bls.n	8002296 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002292:	2303      	movs	r3, #3
 8002294:	e061      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002296:	4b21      	ldr	r3, [pc, #132]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	049b      	lsls	r3, r3, #18
 800229e:	4013      	ands	r3, r2
 80022a0:	d1f0      	bne.n	8002284 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022a2:	4a1e      	ldr	r2, [pc, #120]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80022a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a8:	210f      	movs	r1, #15
 80022aa:	438b      	bics	r3, r1
 80022ac:	0019      	movs	r1, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	430b      	orrs	r3, r1
 80022b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80022b6:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80022b8:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	491c      	ldr	r1, [pc, #112]	; (8002330 <HAL_RCC_OscConfig+0x684>)
 80022be:	4019      	ands	r1, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022c8:	4303      	orrs	r3, r0
 80022ca:	430b      	orrs	r3, r1
 80022cc:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ce:	4b13      	ldr	r3, [pc, #76]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80022d0:	4a12      	ldr	r2, [pc, #72]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	2180      	movs	r1, #128	; 0x80
 80022d6:	0449      	lsls	r1, r1, #17
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe fde4 	bl	8000ea8 <HAL_GetTick>
 80022e0:	0003      	movs	r3, r0
 80022e2:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e6:	f7fe fddf 	bl	8000ea8 <HAL_GetTick>
 80022ea:	0002      	movs	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e030      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_RCC_OscConfig+0x670>)
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	049b      	lsls	r3, r3, #18
 8002300:	4013      	ands	r3, r2
 8002302:	d0f0      	beq.n	80022e6 <HAL_RCC_OscConfig+0x63a>
 8002304:	e028      	b.n	8002358 <HAL_RCC_OscConfig+0x6ac>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002306:	4b05      	ldr	r3, [pc, #20]	; (800231c <HAL_RCC_OscConfig+0x670>)
 8002308:	4a04      	ldr	r2, [pc, #16]	; (800231c <HAL_RCC_OscConfig+0x670>)
 800230a:	6812      	ldr	r2, [r2, #0]
 800230c:	4907      	ldr	r1, [pc, #28]	; (800232c <HAL_RCC_OscConfig+0x680>)
 800230e:	400a      	ands	r2, r1
 8002310:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7fe fdc9 	bl	8000ea8 <HAL_GetTick>
 8002316:	0003      	movs	r3, r0
 8002318:	613b      	str	r3, [r7, #16]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231a:	e014      	b.n	8002346 <HAL_RCC_OscConfig+0x69a>
 800231c:	40021000 	.word	0x40021000
 8002320:	00001388 	.word	0x00001388
 8002324:	efffffff 	.word	0xefffffff
 8002328:	fffeffff 	.word	0xfffeffff
 800232c:	feffffff 	.word	0xfeffffff
 8002330:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002334:	f7fe fdb8 	bl	8000ea8 <HAL_GetTick>
 8002338:	0002      	movs	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b02      	cmp	r3, #2
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0x69a>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e009      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	4b07      	ldr	r3, [pc, #28]	; (8002364 <HAL_RCC_OscConfig+0x6b8>)
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	2380      	movs	r3, #128	; 0x80
 800234c:	049b      	lsls	r3, r3, #18
 800234e:	4013      	ands	r3, r2
 8002350:	d1f0      	bne.n	8002334 <HAL_RCC_OscConfig+0x688>
 8002352:	e001      	b.n	8002358 <HAL_RCC_OscConfig+0x6ac>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e000      	b.n	800235a <HAL_RCC_OscConfig+0x6ae>
    }
  }
  
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	0018      	movs	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	b006      	add	sp, #24
 8002360:	bd80      	pop	{r7, pc}
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	40021000 	.word	0x40021000

08002368 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
 8002370:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002372:	2300      	movs	r3, #0
 8002374:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002376:	4b7a      	ldr	r3, [pc, #488]	; (8002560 <HAL_RCC_ClockConfig+0x1f8>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2201      	movs	r2, #1
 800237c:	401a      	ands	r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d211      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x40>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002384:	4b76      	ldr	r3, [pc, #472]	; (8002560 <HAL_RCC_ClockConfig+0x1f8>)
 8002386:	4a76      	ldr	r2, [pc, #472]	; (8002560 <HAL_RCC_ClockConfig+0x1f8>)
 8002388:	6812      	ldr	r2, [r2, #0]
 800238a:	2101      	movs	r1, #1
 800238c:	438a      	bics	r2, r1
 800238e:	0011      	movs	r1, r2
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002396:	4b72      	ldr	r3, [pc, #456]	; (8002560 <HAL_RCC_ClockConfig+0x1f8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2201      	movs	r2, #1
 800239c:	401a      	ands	r2, r3
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x40>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0d7      	b.n	8002558 <HAL_RCC_ClockConfig+0x1f0>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2202      	movs	r2, #2
 80023ae:	4013      	ands	r3, r2
 80023b0:	d009      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x5e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023b2:	4a6c      	ldr	r2, [pc, #432]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 80023b4:	4b6b      	ldr	r3, [pc, #428]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	21f0      	movs	r1, #240	; 0xf0
 80023ba:	438b      	bics	r3, r1
 80023bc:	0019      	movs	r1, r3
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	430b      	orrs	r3, r1
 80023c4:	6053      	str	r3, [r2, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2201      	movs	r2, #1
 80023cc:	4013      	ands	r3, r2
 80023ce:	d100      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x6a>
 80023d0:	e089      	b.n	80024e6 <HAL_RCC_ClockConfig+0x17e>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d107      	bne.n	80023ea <HAL_RCC_ClockConfig+0x82>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b62      	ldr	r3, [pc, #392]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	2380      	movs	r3, #128	; 0x80
 80023e0:	029b      	lsls	r3, r3, #10
 80023e2:	4013      	ands	r3, r2
 80023e4:	d120      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e0b6      	b.n	8002558 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d107      	bne.n	8002402 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023f2:	4b5c      	ldr	r3, [pc, #368]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	2380      	movs	r3, #128	; 0x80
 80023f8:	049b      	lsls	r3, r3, #18
 80023fa:	4013      	ands	r3, r2
 80023fc:	d114      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0aa      	b.n	8002558 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d107      	bne.n	800241a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800240a:	4b56      	ldr	r3, [pc, #344]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 800240c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	025b      	lsls	r3, r3, #9
 8002412:	4013      	ands	r3, r2
 8002414:	d108      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e09e      	b.n	8002558 <HAL_RCC_ClockConfig+0x1f0>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241a:	4b52      	ldr	r3, [pc, #328]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2202      	movs	r2, #2
 8002420:	4013      	ands	r3, r2
 8002422:	d101      	bne.n	8002428 <HAL_RCC_ClockConfig+0xc0>
      {
        return HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	e097      	b.n	8002558 <HAL_RCC_ClockConfig+0x1f0>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002428:	4a4e      	ldr	r2, [pc, #312]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 800242a:	4b4e      	ldr	r3, [pc, #312]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2103      	movs	r1, #3
 8002430:	438b      	bics	r3, r1
 8002432:	0019      	movs	r1, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	430b      	orrs	r3, r1
 800243a:	6053      	str	r3, [r2, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800243c:	f7fe fd34 	bl	8000ea8 <HAL_GetTick>
 8002440:	0003      	movs	r3, r0
 8002442:	60fb      	str	r3, [r7, #12]
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	2b01      	cmp	r3, #1
 800244a:	d111      	bne.n	8002470 <HAL_RCC_ClockConfig+0x108>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800244c:	e009      	b.n	8002462 <HAL_RCC_ClockConfig+0xfa>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244e:	f7fe fd2b 	bl	8000ea8 <HAL_GetTick>
 8002452:	0002      	movs	r2, r0
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	4a43      	ldr	r2, [pc, #268]	; (8002568 <HAL_RCC_ClockConfig+0x200>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_ClockConfig+0xfa>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e07a      	b.n	8002558 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002462:	4b40      	ldr	r3, [pc, #256]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	220c      	movs	r2, #12
 8002468:	4013      	ands	r3, r2
 800246a:	2b04      	cmp	r3, #4
 800246c:	d1ef      	bne.n	800244e <HAL_RCC_ClockConfig+0xe6>
 800246e:	e03a      	b.n	80024e6 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d111      	bne.n	800249c <HAL_RCC_ClockConfig+0x134>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002478:	e009      	b.n	800248e <HAL_RCC_ClockConfig+0x126>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800247a:	f7fe fd15 	bl	8000ea8 <HAL_GetTick>
 800247e:	0002      	movs	r2, r0
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	4a38      	ldr	r2, [pc, #224]	; (8002568 <HAL_RCC_ClockConfig+0x200>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d901      	bls.n	800248e <HAL_RCC_ClockConfig+0x126>
        {
          return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e064      	b.n	8002558 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800248e:	4b35      	ldr	r3, [pc, #212]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	220c      	movs	r2, #12
 8002494:	4013      	ands	r3, r2
 8002496:	2b08      	cmp	r3, #8
 8002498:	d1ef      	bne.n	800247a <HAL_RCC_ClockConfig+0x112>
 800249a:	e024      	b.n	80024e6 <HAL_RCC_ClockConfig+0x17e>
        }
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	2b03      	cmp	r3, #3
 80024a2:	d11b      	bne.n	80024dc <HAL_RCC_ClockConfig+0x174>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80024a4:	e009      	b.n	80024ba <HAL_RCC_ClockConfig+0x152>
      {
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a6:	f7fe fcff 	bl	8000ea8 <HAL_GetTick>
 80024aa:	0002      	movs	r2, r0
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	4a2d      	ldr	r2, [pc, #180]	; (8002568 <HAL_RCC_ClockConfig+0x200>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x152>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e04e      	b.n	8002558 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI48)
 80024ba:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	220c      	movs	r2, #12
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b0c      	cmp	r3, #12
 80024c4:	d1ef      	bne.n	80024a6 <HAL_RCC_ClockConfig+0x13e>
 80024c6:	e00e      	b.n	80024e6 <HAL_RCC_ClockConfig+0x17e>
#endif /* RCC_CFGR_SWS_HSI48 */
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c8:	f7fe fcee 	bl	8000ea8 <HAL_GetTick>
 80024cc:	0002      	movs	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	4a25      	ldr	r2, [pc, #148]	; (8002568 <HAL_RCC_ClockConfig+0x200>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_ClockConfig+0x174>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e03d      	b.n	8002558 <HAL_RCC_ClockConfig+0x1f0>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80024dc:	4b21      	ldr	r3, [pc, #132]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	220c      	movs	r2, #12
 80024e2:	4013      	ands	r3, r2
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_ClockConfig+0x160>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 80024e6:	4b1e      	ldr	r3, [pc, #120]	; (8002560 <HAL_RCC_ClockConfig+0x1f8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	2201      	movs	r2, #1
 80024ec:	401a      	ands	r2, r3
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d911      	bls.n	8002518 <HAL_RCC_ClockConfig+0x1b0>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f4:	4b1a      	ldr	r3, [pc, #104]	; (8002560 <HAL_RCC_ClockConfig+0x1f8>)
 80024f6:	4a1a      	ldr	r2, [pc, #104]	; (8002560 <HAL_RCC_ClockConfig+0x1f8>)
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	2101      	movs	r1, #1
 80024fc:	438a      	bics	r2, r1
 80024fe:	0011      	movs	r1, r2
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <HAL_RCC_ClockConfig+0x1f8>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2201      	movs	r2, #1
 800250c:	401a      	ands	r2, r3
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x1b0>
    {
      return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e01f      	b.n	8002558 <HAL_RCC_ClockConfig+0x1f0>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2204      	movs	r2, #4
 800251e:	4013      	ands	r3, r2
 8002520:	d008      	beq.n	8002534 <HAL_RCC_ClockConfig+0x1cc>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002522:	4a10      	ldr	r2, [pc, #64]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 8002524:	4b0f      	ldr	r3, [pc, #60]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4910      	ldr	r1, [pc, #64]	; (800256c <HAL_RCC_ClockConfig+0x204>)
 800252a:	4019      	ands	r1, r3
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	430b      	orrs	r3, r1
 8002532:	6053      	str	r3, [r2, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002534:	f000 f820 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002538:	0001      	movs	r1, r0
 800253a:	4b0a      	ldr	r3, [pc, #40]	; (8002564 <HAL_RCC_ClockConfig+0x1fc>)
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	220f      	movs	r2, #15
 8002542:	4013      	ands	r3, r2
 8002544:	4a0a      	ldr	r2, [pc, #40]	; (8002570 <HAL_RCC_ClockConfig+0x208>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	000a      	movs	r2, r1
 800254a:	40da      	lsrs	r2, r3
 800254c:	4b09      	ldr	r3, [pc, #36]	; (8002574 <HAL_RCC_ClockConfig+0x20c>)
 800254e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002550:	2000      	movs	r0, #0
 8002552:	f7fe fc81 	bl	8000e58 <HAL_InitTick>
  
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b004      	add	sp, #16
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40022000 	.word	0x40022000
 8002564:	40021000 	.word	0x40021000
 8002568:	00001388 	.word	0x00001388
 800256c:	fffff8ff 	.word	0xfffff8ff
 8002570:	080039e4 	.word	0x080039e4
 8002574:	20000000 	.word	0x20000000

08002578 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b08f      	sub	sp, #60	; 0x3c
 800257c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800257e:	2314      	movs	r3, #20
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	4a37      	ldr	r2, [pc, #220]	; (8002660 <HAL_RCC_GetSysClockFreq+0xe8>)
 8002584:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002586:	c313      	stmia	r3!, {r0, r1, r4}
 8002588:	6812      	ldr	r2, [r2, #0]
 800258a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	4a35      	ldr	r2, [pc, #212]	; (8002664 <HAL_RCC_GetSysClockFreq+0xec>)
 8002590:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002592:	c313      	stmia	r3!, {r0, r1, r4}
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800259c:	2300      	movs	r3, #0
 800259e:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a0:	2300      	movs	r3, #0
 80025a2:	637b      	str	r3, [r7, #52]	; 0x34
 80025a4:	2300      	movs	r3, #0
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 80025ac:	4b2e      	ldr	r3, [pc, #184]	; (8002668 <HAL_RCC_GetSysClockFreq+0xf0>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b4:	220c      	movs	r2, #12
 80025b6:	4013      	ands	r3, r2
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d006      	beq.n	80025ca <HAL_RCC_GetSysClockFreq+0x52>
 80025bc:	2b0c      	cmp	r3, #12
 80025be:	d043      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0xd0>
 80025c0:	2b04      	cmp	r3, #4
 80025c2:	d144      	bne.n	800264e <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025c4:	4b29      	ldr	r3, [pc, #164]	; (800266c <HAL_RCC_GetSysClockFreq+0xf4>)
 80025c6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025c8:	e044      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80025ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025cc:	0c9b      	lsrs	r3, r3, #18
 80025ce:	220f      	movs	r2, #15
 80025d0:	4013      	ands	r3, r2
 80025d2:	2214      	movs	r2, #20
 80025d4:	18ba      	adds	r2, r7, r2
 80025d6:	5cd3      	ldrb	r3, [r2, r3]
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80025da:	4b23      	ldr	r3, [pc, #140]	; (8002668 <HAL_RCC_GetSysClockFreq+0xf0>)
 80025dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025de:	220f      	movs	r2, #15
 80025e0:	4013      	ands	r3, r2
 80025e2:	1d3a      	adds	r2, r7, #4
 80025e4:	5cd3      	ldrb	r3, [r2, r3]
 80025e6:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80025e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80025ea:	23c0      	movs	r3, #192	; 0xc0
 80025ec:	025b      	lsls	r3, r3, #9
 80025ee:	401a      	ands	r2, r3
 80025f0:	2380      	movs	r3, #128	; 0x80
 80025f2:	025b      	lsls	r3, r3, #9
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d109      	bne.n	800260c <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80025f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025fa:	481c      	ldr	r0, [pc, #112]	; (800266c <HAL_RCC_GetSysClockFreq+0xf4>)
 80025fc:	f7fd fd82 	bl	8000104 <__udivsi3>
 8002600:	0003      	movs	r3, r0
 8002602:	001a      	movs	r2, r3
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	4353      	muls	r3, r2
 8002608:	637b      	str	r3, [r7, #52]	; 0x34
 800260a:	e01a      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800260c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260e:	23c0      	movs	r3, #192	; 0xc0
 8002610:	025b      	lsls	r3, r3, #9
 8002612:	401a      	ands	r2, r3
 8002614:	23c0      	movs	r3, #192	; 0xc0
 8002616:	025b      	lsls	r3, r3, #9
 8002618:	429a      	cmp	r2, r3
 800261a:	d109      	bne.n	8002630 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (HSI48_VALUE / prediv) * pllmul;
 800261c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800261e:	4814      	ldr	r0, [pc, #80]	; (8002670 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002620:	f7fd fd70 	bl	8000104 <__udivsi3>
 8002624:	0003      	movs	r3, r0
 8002626:	001a      	movs	r2, r3
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800262a:	4353      	muls	r3, r2
 800262c:	637b      	str	r3, [r7, #52]	; 0x34
 800262e:	e008      	b.n	8002642 <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
 8002630:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002632:	480e      	ldr	r0, [pc, #56]	; (800266c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002634:	f7fd fd66 	bl	8000104 <__udivsi3>
 8002638:	0003      	movs	r3, r0
 800263a:	001a      	movs	r2, r3
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	4353      	muls	r3, r2
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1U) * pllmul);
#endif
      }
      sysclockfreq = pllclk;
 8002642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002644:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002646:	e005      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_RCC_GetSysClockFreq+0xf8>)
 800264a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800264c:	e002      	b.n	8002654 <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_RCC_GetSysClockFreq+0xf4>)
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002652:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002656:	0018      	movs	r0, r3
 8002658:	46bd      	mov	sp, r7
 800265a:	b00f      	add	sp, #60	; 0x3c
 800265c:	bd90      	pop	{r4, r7, pc}
 800265e:	46c0      	nop			; (mov r8, r8)
 8002660:	08003904 	.word	0x08003904
 8002664:	08003914 	.word	0x08003914
 8002668:	40021000 	.word	0x40021000
 800266c:	007a1200 	.word	0x007a1200
 8002670:	02dc6c00 	.word	0x02dc6c00

08002674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002678:	4b02      	ldr	r3, [pc, #8]	; (8002684 <HAL_RCC_GetHCLKFreq+0x10>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	46c0      	nop			; (mov r8, r8)
 8002684:	20000000 	.word	0x20000000

08002688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800268c:	f7ff fff2 	bl	8002674 <HAL_RCC_GetHCLKFreq>
 8002690:	0001      	movs	r1, r0
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	2207      	movs	r2, #7
 800269a:	4013      	ands	r3, r2
 800269c:	4a04      	ldr	r2, [pc, #16]	; (80026b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800269e:	5cd3      	ldrb	r3, [r2, r3]
 80026a0:	40d9      	lsrs	r1, r3
 80026a2:	000b      	movs	r3, r1
}    
 80026a4:	0018      	movs	r0, r3
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
 80026aa:	46c0      	nop			; (mov r8, r8)
 80026ac:	40021000 	.word	0x40021000
 80026b0:	080039f4 	.word	0x080039f4

080026b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681a      	ldr	r2, [r3, #0]
 80026c8:	2380      	movs	r3, #128	; 0x80
 80026ca:	025b      	lsls	r3, r3, #9
 80026cc:	4013      	ands	r3, r2
 80026ce:	d100      	bne.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80026d0:	e08e      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80026d2:	2317      	movs	r3, #23
 80026d4:	18fb      	adds	r3, r7, r3
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026da:	4b6d      	ldr	r3, [pc, #436]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80026dc:	69da      	ldr	r2, [r3, #28]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	055b      	lsls	r3, r3, #21
 80026e2:	4013      	ands	r3, r2
 80026e4:	d111      	bne.n	800270a <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80026e8:	4a69      	ldr	r2, [pc, #420]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80026ea:	69d2      	ldr	r2, [r2, #28]
 80026ec:	2180      	movs	r1, #128	; 0x80
 80026ee:	0549      	lsls	r1, r1, #21
 80026f0:	430a      	orrs	r2, r1
 80026f2:	61da      	str	r2, [r3, #28]
 80026f4:	4b66      	ldr	r3, [pc, #408]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80026f6:	69da      	ldr	r2, [r3, #28]
 80026f8:	2380      	movs	r3, #128	; 0x80
 80026fa:	055b      	lsls	r3, r3, #21
 80026fc:	4013      	ands	r3, r2
 80026fe:	60bb      	str	r3, [r7, #8]
 8002700:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002702:	2317      	movs	r3, #23
 8002704:	18fb      	adds	r3, r7, r3
 8002706:	2201      	movs	r2, #1
 8002708:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	4b62      	ldr	r3, [pc, #392]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	2380      	movs	r3, #128	; 0x80
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4013      	ands	r3, r2
 8002714:	d11a      	bne.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002716:	4b5f      	ldr	r3, [pc, #380]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002718:	4a5e      	ldr	r2, [pc, #376]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800271a:	6812      	ldr	r2, [r2, #0]
 800271c:	2180      	movs	r1, #128	; 0x80
 800271e:	0049      	lsls	r1, r1, #1
 8002720:	430a      	orrs	r2, r1
 8002722:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002724:	f7fe fbc0 	bl	8000ea8 <HAL_GetTick>
 8002728:	0003      	movs	r3, r0
 800272a:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800272c:	e008      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272e:	f7fe fbbb 	bl	8000ea8 <HAL_GetTick>
 8002732:	0002      	movs	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b64      	cmp	r3, #100	; 0x64
 800273a:	d901      	bls.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e0a3      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002740:	4b54      	ldr	r3, [pc, #336]	; (8002894 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	4013      	ands	r3, r2
 800274a:	d0f0      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800274c:	4b50      	ldr	r3, [pc, #320]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800274e:	6a1a      	ldr	r2, [r3, #32]
 8002750:	23c0      	movs	r3, #192	; 0xc0
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4013      	ands	r3, r2
 8002756:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d034      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685a      	ldr	r2, [r3, #4]
 8002762:	23c0      	movs	r3, #192	; 0xc0
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	401a      	ands	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	429a      	cmp	r2, r3
 800276c:	d02c      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800276e:	4b48      	ldr	r3, [pc, #288]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4a49      	ldr	r2, [pc, #292]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002774:	4013      	ands	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002778:	4b45      	ldr	r3, [pc, #276]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800277a:	4a45      	ldr	r2, [pc, #276]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800277c:	6a12      	ldr	r2, [r2, #32]
 800277e:	2180      	movs	r1, #128	; 0x80
 8002780:	0249      	lsls	r1, r1, #9
 8002782:	430a      	orrs	r2, r1
 8002784:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002786:	4b42      	ldr	r3, [pc, #264]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002788:	4a41      	ldr	r2, [pc, #260]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800278a:	6a12      	ldr	r2, [r2, #32]
 800278c:	4943      	ldr	r1, [pc, #268]	; (800289c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800278e:	400a      	ands	r2, r1
 8002790:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002792:	4b3f      	ldr	r3, [pc, #252]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002794:	68fa      	ldr	r2, [r7, #12]
 8002796:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2201      	movs	r2, #1
 800279c:	4013      	ands	r3, r2
 800279e:	d013      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fb82 	bl	8000ea8 <HAL_GetTick>
 80027a4:	0003      	movs	r3, r0
 80027a6:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a8:	e009      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027aa:	f7fe fb7d 	bl	8000ea8 <HAL_GetTick>
 80027ae:	0002      	movs	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	4a3a      	ldr	r2, [pc, #232]	; (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e064      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027be:	4b34      	ldr	r3, [pc, #208]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	2202      	movs	r2, #2
 80027c4:	4013      	ands	r3, r2
 80027c6:	d0f0      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c8:	4a31      	ldr	r2, [pc, #196]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80027ca:	4b31      	ldr	r3, [pc, #196]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80027cc:	6a1b      	ldr	r3, [r3, #32]
 80027ce:	4932      	ldr	r1, [pc, #200]	; (8002898 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 80027d0:	4019      	ands	r1, r3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	430b      	orrs	r3, r1
 80027d8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027da:	2317      	movs	r3, #23
 80027dc:	18fb      	adds	r3, r7, r3
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d105      	bne.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e4:	4b2a      	ldr	r3, [pc, #168]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80027e6:	4a2a      	ldr	r2, [pc, #168]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80027e8:	69d2      	ldr	r2, [r2, #28]
 80027ea:	492e      	ldr	r1, [pc, #184]	; (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 80027ec:	400a      	ands	r2, r1
 80027ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	2201      	movs	r2, #1
 80027f6:	4013      	ands	r3, r2
 80027f8:	d009      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027fa:	4a25      	ldr	r2, [pc, #148]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80027fc:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	2103      	movs	r1, #3
 8002802:	438b      	bics	r3, r1
 8002804:	0019      	movs	r1, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	430b      	orrs	r3, r1
 800280c:	6313      	str	r3, [r2, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2202      	movs	r2, #2
 8002814:	4013      	ands	r3, r2
 8002816:	d008      	beq.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002818:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800281a:	4b1d      	ldr	r3, [pc, #116]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4922      	ldr	r1, [pc, #136]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002820:	4019      	ands	r1, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	430b      	orrs	r3, r1
 8002828:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */

#if defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART3 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	2380      	movs	r3, #128	; 0x80
 8002830:	02db      	lsls	r3, r3, #11
 8002832:	4013      	ands	r3, r2
 8002834:	d008      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002836:	4a16      	ldr	r2, [pc, #88]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002838:	4b15      	ldr	r3, [pc, #84]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 800283a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283c:	491b      	ldr	r1, [pc, #108]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800283e:	4019      	ands	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	430b      	orrs	r3, r1
 8002846:	6313      	str	r3, [r2, #48]	; 0x30
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2220      	movs	r2, #32
 800284e:	4013      	ands	r3, r2
 8002850:	d009      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002852:	4a0f      	ldr	r2, [pc, #60]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002854:	4b0e      	ldr	r3, [pc, #56]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	2110      	movs	r1, #16
 800285a:	438b      	bics	r3, r1
 800285c:	0019      	movs	r1, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	430b      	orrs	r3, r1
 8002864:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	4013      	ands	r3, r2
 8002870:	d009      	beq.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x1d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	2140      	movs	r1, #64	; 0x40
 800287a:	438b      	bics	r3, r1
 800287c:	0019      	movs	r1, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	430b      	orrs	r3, r1
 8002884:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002886:	2300      	movs	r3, #0
}
 8002888:	0018      	movs	r0, r3
 800288a:	46bd      	mov	sp, r7
 800288c:	b006      	add	sp, #24
 800288e:	bd80      	pop	{r7, pc}
 8002890:	40021000 	.word	0x40021000
 8002894:	40007000 	.word	0x40007000
 8002898:	fffffcff 	.word	0xfffffcff
 800289c:	fffeffff 	.word	0xfffeffff
 80028a0:	00001388 	.word	0x00001388
 80028a4:	efffffff 	.word	0xefffffff
 80028a8:	fffcffff 	.word	0xfffcffff
 80028ac:	fff3ffff 	.word	0xfff3ffff

080028b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d101      	bne.n	80028c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e047      	b.n	8002952 <HAL_UART_Init+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2269      	movs	r2, #105	; 0x69
 80028c6:	5c9b      	ldrb	r3, [r3, r2]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d107      	bne.n	80028de <HAL_UART_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2268      	movs	r2, #104	; 0x68
 80028d2:	2100      	movs	r1, #0
 80028d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	0018      	movs	r0, r3
 80028da:	f000 ff01 	bl	80036e0 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2269      	movs	r2, #105	; 0x69
 80028e2:	2124      	movs	r1, #36	; 0x24
 80028e4:	5499      	strb	r1, [r3, r2]

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	687a      	ldr	r2, [r7, #4]
 80028ec:	6812      	ldr	r2, [r2, #0]
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	2101      	movs	r1, #1
 80028f2:	438a      	bics	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	0018      	movs	r0, r3
 80028fa:	f000 f831 	bl	8002960 <UART_SetConfig>
 80028fe:	0003      	movs	r3, r0
 8002900:	2b01      	cmp	r3, #1
 8002902:	d101      	bne.n	8002908 <HAL_UART_Init+0x58>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e024      	b.n	8002952 <HAL_UART_Init+0xa2>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_UART_Init+0x68>
  {
    UART_AdvFeatureConfig(huart);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	0018      	movs	r0, r3
 8002914:	f000 fa40 	bl	8002d98 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register. */
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	6812      	ldr	r2, [r2, #0]
 8002920:	6852      	ldr	r2, [r2, #4]
 8002922:	490e      	ldr	r1, [pc, #56]	; (800295c <HAL_UART_Init+0xac>)
 8002924:	400a      	ands	r2, r1
 8002926:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	687a      	ldr	r2, [r7, #4]
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	6892      	ldr	r2, [r2, #8]
 8002932:	212a      	movs	r1, #42	; 0x2a
 8002934:	438a      	bics	r2, r1
 8002936:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif
#endif

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6812      	ldr	r2, [r2, #0]
 8002940:	6812      	ldr	r2, [r2, #0]
 8002942:	2101      	movs	r1, #1
 8002944:	430a      	orrs	r2, r1
 8002946:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	0018      	movs	r0, r3
 800294c:	f000 fad0 	bl	8002ef0 <UART_CheckIdleState>
 8002950:	0003      	movs	r3, r0
}
 8002952:	0018      	movs	r0, r3
 8002954:	46bd      	mov	sp, r7
 8002956:	b002      	add	sp, #8
 8002958:	bd80      	pop	{r7, pc}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	ffffb7ff 	.word	0xffffb7ff

08002960 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002960:	b590      	push	{r4, r7, lr}
 8002962:	b087      	sub	sp, #28
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002968:	2300      	movs	r3, #0
 800296a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800296c:	2317      	movs	r3, #23
 800296e:	18fb      	adds	r3, r7, r3
 8002970:	2210      	movs	r2, #16
 8002972:	701a      	strb	r2, [r3, #0]
  uint16_t brrtemp                    = 0x0000U;
 8002974:	230a      	movs	r3, #10
 8002976:	18fb      	adds	r3, r7, r3
 8002978:	2200      	movs	r2, #0
 800297a:	801a      	strh	r2, [r3, #0]
  uint16_t usartdiv                   = 0x0000U;
 800297c:	2314      	movs	r3, #20
 800297e:	18fb      	adds	r3, r7, r3
 8002980:	2200      	movs	r2, #0
 8002982:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002984:	2313      	movs	r3, #19
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689a      	ldr	r2, [r3, #8]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	69db      	ldr	r3, [r3, #28]
 80029a0:	4313      	orrs	r3, r2
 80029a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6812      	ldr	r2, [r2, #0]
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	49c1      	ldr	r1, [pc, #772]	; (8002cb4 <UART_SetConfig+0x354>)
 80029b0:	4011      	ands	r1, r2
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	6852      	ldr	r2, [r2, #4]
 80029c2:	49bd      	ldr	r1, [pc, #756]	; (8002cb8 <UART_SetConfig+0x358>)
 80029c4:	4011      	ands	r1, r2
 80029c6:	687a      	ldr	r2, [r7, #4]
 80029c8:	68d2      	ldr	r2, [r2, #12]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699a      	ldr	r2, [r3, #24]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	6812      	ldr	r2, [r2, #0]
 80029e2:	6892      	ldr	r2, [r2, #8]
 80029e4:	49b5      	ldr	r1, [pc, #724]	; (8002cbc <UART_SetConfig+0x35c>)
 80029e6:	4011      	ands	r1, r2
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	430a      	orrs	r2, r1
 80029ec:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4ab3      	ldr	r2, [pc, #716]	; (8002cc0 <UART_SetConfig+0x360>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d125      	bne.n	8002a44 <UART_SetConfig+0xe4>
 80029f8:	4bb2      	ldr	r3, [pc, #712]	; (8002cc4 <UART_SetConfig+0x364>)
 80029fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fc:	2203      	movs	r2, #3
 80029fe:	4013      	ands	r3, r2
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d00f      	beq.n	8002a24 <UART_SetConfig+0xc4>
 8002a04:	d304      	bcc.n	8002a10 <UART_SetConfig+0xb0>
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d011      	beq.n	8002a2e <UART_SetConfig+0xce>
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d005      	beq.n	8002a1a <UART_SetConfig+0xba>
 8002a0e:	e013      	b.n	8002a38 <UART_SetConfig+0xd8>
 8002a10:	2317      	movs	r3, #23
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	2200      	movs	r2, #0
 8002a16:	701a      	strb	r2, [r3, #0]
 8002a18:	e0ba      	b.n	8002b90 <UART_SetConfig+0x230>
 8002a1a:	2317      	movs	r3, #23
 8002a1c:	18fb      	adds	r3, r7, r3
 8002a1e:	2202      	movs	r2, #2
 8002a20:	701a      	strb	r2, [r3, #0]
 8002a22:	e0b5      	b.n	8002b90 <UART_SetConfig+0x230>
 8002a24:	2317      	movs	r3, #23
 8002a26:	18fb      	adds	r3, r7, r3
 8002a28:	2204      	movs	r2, #4
 8002a2a:	701a      	strb	r2, [r3, #0]
 8002a2c:	e0b0      	b.n	8002b90 <UART_SetConfig+0x230>
 8002a2e:	2317      	movs	r3, #23
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	2208      	movs	r2, #8
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e0ab      	b.n	8002b90 <UART_SetConfig+0x230>
 8002a38:	2317      	movs	r3, #23
 8002a3a:	18fb      	adds	r3, r7, r3
 8002a3c:	2210      	movs	r2, #16
 8002a3e:	701a      	strb	r2, [r3, #0]
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	e0a5      	b.n	8002b90 <UART_SetConfig+0x230>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a9f      	ldr	r2, [pc, #636]	; (8002cc8 <UART_SetConfig+0x368>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d132      	bne.n	8002ab4 <UART_SetConfig+0x154>
 8002a4e:	4b9d      	ldr	r3, [pc, #628]	; (8002cc4 <UART_SetConfig+0x364>)
 8002a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a52:	23c0      	movs	r3, #192	; 0xc0
 8002a54:	029b      	lsls	r3, r3, #10
 8002a56:	4013      	ands	r3, r2
 8002a58:	2280      	movs	r2, #128	; 0x80
 8002a5a:	0252      	lsls	r2, r2, #9
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d019      	beq.n	8002a94 <UART_SetConfig+0x134>
 8002a60:	2280      	movs	r2, #128	; 0x80
 8002a62:	0252      	lsls	r2, r2, #9
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d802      	bhi.n	8002a6e <UART_SetConfig+0x10e>
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d009      	beq.n	8002a80 <UART_SetConfig+0x120>
 8002a6c:	e01c      	b.n	8002aa8 <UART_SetConfig+0x148>
 8002a6e:	2280      	movs	r2, #128	; 0x80
 8002a70:	0292      	lsls	r2, r2, #10
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d013      	beq.n	8002a9e <UART_SetConfig+0x13e>
 8002a76:	22c0      	movs	r2, #192	; 0xc0
 8002a78:	0292      	lsls	r2, r2, #10
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d005      	beq.n	8002a8a <UART_SetConfig+0x12a>
 8002a7e:	e013      	b.n	8002aa8 <UART_SetConfig+0x148>
 8002a80:	2317      	movs	r3, #23
 8002a82:	18fb      	adds	r3, r7, r3
 8002a84:	2200      	movs	r2, #0
 8002a86:	701a      	strb	r2, [r3, #0]
 8002a88:	e082      	b.n	8002b90 <UART_SetConfig+0x230>
 8002a8a:	2317      	movs	r3, #23
 8002a8c:	18fb      	adds	r3, r7, r3
 8002a8e:	2202      	movs	r2, #2
 8002a90:	701a      	strb	r2, [r3, #0]
 8002a92:	e07d      	b.n	8002b90 <UART_SetConfig+0x230>
 8002a94:	2317      	movs	r3, #23
 8002a96:	18fb      	adds	r3, r7, r3
 8002a98:	2204      	movs	r2, #4
 8002a9a:	701a      	strb	r2, [r3, #0]
 8002a9c:	e078      	b.n	8002b90 <UART_SetConfig+0x230>
 8002a9e:	2317      	movs	r3, #23
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	2208      	movs	r2, #8
 8002aa4:	701a      	strb	r2, [r3, #0]
 8002aa6:	e073      	b.n	8002b90 <UART_SetConfig+0x230>
 8002aa8:	2317      	movs	r3, #23
 8002aaa:	18fb      	adds	r3, r7, r3
 8002aac:	2210      	movs	r2, #16
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	46c0      	nop			; (mov r8, r8)
 8002ab2:	e06d      	b.n	8002b90 <UART_SetConfig+0x230>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a84      	ldr	r2, [pc, #528]	; (8002ccc <UART_SetConfig+0x36c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d132      	bne.n	8002b24 <UART_SetConfig+0x1c4>
 8002abe:	4b81      	ldr	r3, [pc, #516]	; (8002cc4 <UART_SetConfig+0x364>)
 8002ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002ac2:	23c0      	movs	r3, #192	; 0xc0
 8002ac4:	031b      	lsls	r3, r3, #12
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	2280      	movs	r2, #128	; 0x80
 8002aca:	02d2      	lsls	r2, r2, #11
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d019      	beq.n	8002b04 <UART_SetConfig+0x1a4>
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	02d2      	lsls	r2, r2, #11
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d802      	bhi.n	8002ade <UART_SetConfig+0x17e>
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d009      	beq.n	8002af0 <UART_SetConfig+0x190>
 8002adc:	e01c      	b.n	8002b18 <UART_SetConfig+0x1b8>
 8002ade:	2280      	movs	r2, #128	; 0x80
 8002ae0:	0312      	lsls	r2, r2, #12
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d013      	beq.n	8002b0e <UART_SetConfig+0x1ae>
 8002ae6:	22c0      	movs	r2, #192	; 0xc0
 8002ae8:	0312      	lsls	r2, r2, #12
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d005      	beq.n	8002afa <UART_SetConfig+0x19a>
 8002aee:	e013      	b.n	8002b18 <UART_SetConfig+0x1b8>
 8002af0:	2317      	movs	r3, #23
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	e04a      	b.n	8002b90 <UART_SetConfig+0x230>
 8002afa:	2317      	movs	r3, #23
 8002afc:	18fb      	adds	r3, r7, r3
 8002afe:	2202      	movs	r2, #2
 8002b00:	701a      	strb	r2, [r3, #0]
 8002b02:	e045      	b.n	8002b90 <UART_SetConfig+0x230>
 8002b04:	2317      	movs	r3, #23
 8002b06:	18fb      	adds	r3, r7, r3
 8002b08:	2204      	movs	r2, #4
 8002b0a:	701a      	strb	r2, [r3, #0]
 8002b0c:	e040      	b.n	8002b90 <UART_SetConfig+0x230>
 8002b0e:	2317      	movs	r3, #23
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2208      	movs	r2, #8
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e03b      	b.n	8002b90 <UART_SetConfig+0x230>
 8002b18:	2317      	movs	r3, #23
 8002b1a:	18fb      	adds	r3, r7, r3
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	701a      	strb	r2, [r3, #0]
 8002b20:	46c0      	nop			; (mov r8, r8)
 8002b22:	e035      	b.n	8002b90 <UART_SetConfig+0x230>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a69      	ldr	r2, [pc, #420]	; (8002cd0 <UART_SetConfig+0x370>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d104      	bne.n	8002b38 <UART_SetConfig+0x1d8>
 8002b2e:	2317      	movs	r3, #23
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	2200      	movs	r2, #0
 8002b34:	701a      	strb	r2, [r3, #0]
 8002b36:	e02b      	b.n	8002b90 <UART_SetConfig+0x230>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a65      	ldr	r2, [pc, #404]	; (8002cd4 <UART_SetConfig+0x374>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d104      	bne.n	8002b4c <UART_SetConfig+0x1ec>
 8002b42:	2317      	movs	r3, #23
 8002b44:	18fb      	adds	r3, r7, r3
 8002b46:	2200      	movs	r2, #0
 8002b48:	701a      	strb	r2, [r3, #0]
 8002b4a:	e021      	b.n	8002b90 <UART_SetConfig+0x230>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a61      	ldr	r2, [pc, #388]	; (8002cd8 <UART_SetConfig+0x378>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d104      	bne.n	8002b60 <UART_SetConfig+0x200>
 8002b56:	2317      	movs	r3, #23
 8002b58:	18fb      	adds	r3, r7, r3
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
 8002b5e:	e017      	b.n	8002b90 <UART_SetConfig+0x230>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a5d      	ldr	r2, [pc, #372]	; (8002cdc <UART_SetConfig+0x37c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d104      	bne.n	8002b74 <UART_SetConfig+0x214>
 8002b6a:	2317      	movs	r3, #23
 8002b6c:	18fb      	adds	r3, r7, r3
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
 8002b72:	e00d      	b.n	8002b90 <UART_SetConfig+0x230>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a59      	ldr	r2, [pc, #356]	; (8002ce0 <UART_SetConfig+0x380>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d104      	bne.n	8002b88 <UART_SetConfig+0x228>
 8002b7e:	2317      	movs	r3, #23
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	2200      	movs	r2, #0
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e003      	b.n	8002b90 <UART_SetConfig+0x230>
 8002b88:	2317      	movs	r3, #23
 8002b8a:	18fb      	adds	r3, r7, r3
 8002b8c:	2210      	movs	r2, #16
 8002b8e:	701a      	strb	r2, [r3, #0]
  
  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	69da      	ldr	r2, [r3, #28]
 8002b94:	2380      	movs	r3, #128	; 0x80
 8002b96:	021b      	lsls	r3, r3, #8
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d000      	beq.n	8002b9e <UART_SetConfig+0x23e>
 8002b9c:	e07b      	b.n	8002c96 <UART_SetConfig+0x336>
  {
    switch (clocksource)
 8002b9e:	2317      	movs	r3, #23
 8002ba0:	18fb      	adds	r3, r7, r3
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d01c      	beq.n	8002be2 <UART_SetConfig+0x282>
 8002ba8:	dc02      	bgt.n	8002bb0 <UART_SetConfig+0x250>
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <UART_SetConfig+0x25a>
 8002bae:	e04f      	b.n	8002c50 <UART_SetConfig+0x2f0>
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d027      	beq.n	8002c04 <UART_SetConfig+0x2a4>
 8002bb4:	2b08      	cmp	r3, #8
 8002bb6:	d039      	beq.n	8002c2c <UART_SetConfig+0x2cc>
 8002bb8:	e04a      	b.n	8002c50 <UART_SetConfig+0x2f0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002bba:	f7ff fd65 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8002bbe:	0003      	movs	r3, r0
 8002bc0:	005a      	lsls	r2, r3, #1
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	085b      	lsrs	r3, r3, #1
 8002bc8:	18d2      	adds	r2, r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	0019      	movs	r1, r3
 8002bd0:	0010      	movs	r0, r2
 8002bd2:	f7fd fa97 	bl	8000104 <__udivsi3>
 8002bd6:	0003      	movs	r3, r0
 8002bd8:	001a      	movs	r2, r3
 8002bda:	2314      	movs	r3, #20
 8002bdc:	18fb      	adds	r3, r7, r3
 8002bde:	801a      	strh	r2, [r3, #0]
        break;
 8002be0:	e03b      	b.n	8002c5a <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	085b      	lsrs	r3, r3, #1
 8002be8:	4a3e      	ldr	r2, [pc, #248]	; (8002ce4 <UART_SetConfig+0x384>)
 8002bea:	189a      	adds	r2, r3, r2
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	0019      	movs	r1, r3
 8002bf2:	0010      	movs	r0, r2
 8002bf4:	f7fd fa86 	bl	8000104 <__udivsi3>
 8002bf8:	0003      	movs	r3, r0
 8002bfa:	001a      	movs	r2, r3
 8002bfc:	2314      	movs	r3, #20
 8002bfe:	18fb      	adds	r3, r7, r3
 8002c00:	801a      	strh	r2, [r3, #0]
        break;
 8002c02:	e02a      	b.n	8002c5a <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002c04:	f7ff fcb8 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002c08:	0003      	movs	r3, r0
 8002c0a:	005a      	lsls	r2, r3, #1
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	085b      	lsrs	r3, r3, #1
 8002c12:	18d2      	adds	r2, r2, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0019      	movs	r1, r3
 8002c1a:	0010      	movs	r0, r2
 8002c1c:	f7fd fa72 	bl	8000104 <__udivsi3>
 8002c20:	0003      	movs	r3, r0
 8002c22:	001a      	movs	r2, r3
 8002c24:	2314      	movs	r3, #20
 8002c26:	18fb      	adds	r3, r7, r3
 8002c28:	801a      	strh	r2, [r3, #0]
        break;
 8002c2a:	e016      	b.n	8002c5a <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	085b      	lsrs	r3, r3, #1
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	0252      	lsls	r2, r2, #9
 8002c36:	189a      	adds	r2, r3, r2
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	0010      	movs	r0, r2
 8002c40:	f7fd fa60 	bl	8000104 <__udivsi3>
 8002c44:	0003      	movs	r3, r0
 8002c46:	001a      	movs	r2, r3
 8002c48:	2314      	movs	r3, #20
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	801a      	strh	r2, [r3, #0]
        break;
 8002c4e:	e004      	b.n	8002c5a <UART_SetConfig+0x2fa>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002c50:	2313      	movs	r3, #19
 8002c52:	18fb      	adds	r3, r7, r3
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
        break;
 8002c58:	46c0      	nop			; (mov r8, r8)
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002c5a:	230a      	movs	r3, #10
 8002c5c:	18fb      	adds	r3, r7, r3
 8002c5e:	2214      	movs	r2, #20
 8002c60:	18ba      	adds	r2, r7, r2
 8002c62:	8812      	ldrh	r2, [r2, #0]
 8002c64:	210f      	movs	r1, #15
 8002c66:	438a      	bics	r2, r1
 8002c68:	801a      	strh	r2, [r3, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c6a:	2314      	movs	r3, #20
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	881b      	ldrh	r3, [r3, #0]
 8002c70:	105b      	asrs	r3, r3, #1
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	2207      	movs	r2, #7
 8002c76:	4013      	ands	r3, r2
 8002c78:	b299      	uxth	r1, r3
 8002c7a:	230a      	movs	r3, #10
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	220a      	movs	r2, #10
 8002c80:	18ba      	adds	r2, r7, r2
 8002c82:	8812      	ldrh	r2, [r2, #0]
 8002c84:	430a      	orrs	r2, r1
 8002c86:	801a      	strh	r2, [r3, #0]
    huart->Instance->BRR = brrtemp;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	220a      	movs	r2, #10
 8002c8e:	18ba      	adds	r2, r7, r2
 8002c90:	8812      	ldrh	r2, [r2, #0]
 8002c92:	60da      	str	r2, [r3, #12]
 8002c94:	e076      	b.n	8002d84 <UART_SetConfig+0x424>
  }
  else
  {
    switch (clocksource)
 8002c96:	2317      	movs	r3, #23
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d036      	beq.n	8002d0e <UART_SetConfig+0x3ae>
 8002ca0:	dc02      	bgt.n	8002ca8 <UART_SetConfig+0x348>
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d020      	beq.n	8002ce8 <UART_SetConfig+0x388>
 8002ca6:	e068      	b.n	8002d7a <UART_SetConfig+0x41a>
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d041      	beq.n	8002d30 <UART_SetConfig+0x3d0>
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d052      	beq.n	8002d56 <UART_SetConfig+0x3f6>
 8002cb0:	e063      	b.n	8002d7a <UART_SetConfig+0x41a>
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	efff69f3 	.word	0xefff69f3
 8002cb8:	ffffcfff 	.word	0xffffcfff
 8002cbc:	fffff4ff 	.word	0xfffff4ff
 8002cc0:	40013800 	.word	0x40013800
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40004400 	.word	0x40004400
 8002ccc:	40004800 	.word	0x40004800
 8002cd0:	40004c00 	.word	0x40004c00
 8002cd4:	40005000 	.word	0x40005000
 8002cd8:	40011400 	.word	0x40011400
 8002cdc:	40011800 	.word	0x40011800
 8002ce0:	40011c00 	.word	0x40011c00
 8002ce4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681c      	ldr	r4, [r3, #0]
 8002cec:	f7ff fccc 	bl	8002688 <HAL_RCC_GetPCLK1Freq>
 8002cf0:	0002      	movs	r2, r0
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	085b      	lsrs	r3, r3, #1
 8002cf8:	18d2      	adds	r2, r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	0019      	movs	r1, r3
 8002d00:	0010      	movs	r0, r2
 8002d02:	f7fd f9ff 	bl	8000104 <__udivsi3>
 8002d06:	0003      	movs	r3, r0
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	60e3      	str	r3, [r4, #12]
        break;
 8002d0c:	e03a      	b.n	8002d84 <UART_SetConfig+0x424>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681c      	ldr	r4, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	085b      	lsrs	r3, r3, #1
 8002d18:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <UART_SetConfig+0x434>)
 8002d1a:	189a      	adds	r2, r3, r2
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	0019      	movs	r1, r3
 8002d22:	0010      	movs	r0, r2
 8002d24:	f7fd f9ee 	bl	8000104 <__udivsi3>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	60e3      	str	r3, [r4, #12]
        break;
 8002d2e:	e029      	b.n	8002d84 <UART_SetConfig+0x424>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681c      	ldr	r4, [r3, #0]
 8002d34:	f7ff fc20 	bl	8002578 <HAL_RCC_GetSysClockFreq>
 8002d38:	0002      	movs	r2, r0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	085b      	lsrs	r3, r3, #1
 8002d40:	18d2      	adds	r2, r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	0019      	movs	r1, r3
 8002d48:	0010      	movs	r0, r2
 8002d4a:	f7fd f9db 	bl	8000104 <__udivsi3>
 8002d4e:	0003      	movs	r3, r0
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	60e3      	str	r3, [r4, #12]
        break;
 8002d54:	e016      	b.n	8002d84 <UART_SetConfig+0x424>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681c      	ldr	r4, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	2280      	movs	r2, #128	; 0x80
 8002d62:	0212      	lsls	r2, r2, #8
 8002d64:	189a      	adds	r2, r3, r2
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	0019      	movs	r1, r3
 8002d6c:	0010      	movs	r0, r2
 8002d6e:	f7fd f9c9 	bl	8000104 <__udivsi3>
 8002d72:	0003      	movs	r3, r0
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	60e3      	str	r3, [r4, #12]
        break;
 8002d78:	e004      	b.n	8002d84 <UART_SetConfig+0x424>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002d7a:	2313      	movs	r3, #19
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2201      	movs	r2, #1
 8002d80:	701a      	strb	r2, [r3, #0]
        break;
 8002d82:	46c0      	nop			; (mov r8, r8)
    }
  }

  return ret;
 8002d84:	2313      	movs	r3, #19
 8002d86:	18fb      	adds	r3, r7, r3
 8002d88:	781b      	ldrb	r3, [r3, #0]

}
 8002d8a:	0018      	movs	r0, r3
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	b007      	add	sp, #28
 8002d90:	bd90      	pop	{r4, r7, pc}
 8002d92:	46c0      	nop			; (mov r8, r8)
 8002d94:	007a1200 	.word	0x007a1200

08002d98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	2201      	movs	r2, #1
 8002da6:	4013      	ands	r3, r2
 8002da8:	d00a      	beq.n	8002dc0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	6852      	ldr	r2, [r2, #4]
 8002db4:	4945      	ldr	r1, [pc, #276]	; (8002ecc <UART_AdvFeatureConfig+0x134>)
 8002db6:	4011      	ands	r1, r2
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	2202      	movs	r2, #2
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d00a      	beq.n	8002de0 <UART_AdvFeatureConfig+0x48>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	6852      	ldr	r2, [r2, #4]
 8002dd4:	493e      	ldr	r1, [pc, #248]	; (8002ed0 <UART_AdvFeatureConfig+0x138>)
 8002dd6:	4011      	ands	r1, r2
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	2204      	movs	r2, #4
 8002de6:	4013      	ands	r3, r2
 8002de8:	d00a      	beq.n	8002e00 <UART_AdvFeatureConfig+0x68>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6812      	ldr	r2, [r2, #0]
 8002df2:	6852      	ldr	r2, [r2, #4]
 8002df4:	4937      	ldr	r1, [pc, #220]	; (8002ed4 <UART_AdvFeatureConfig+0x13c>)
 8002df6:	4011      	ands	r1, r2
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002dfc:	430a      	orrs	r2, r1
 8002dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	2208      	movs	r2, #8
 8002e06:	4013      	ands	r3, r2
 8002e08:	d00a      	beq.n	8002e20 <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	6812      	ldr	r2, [r2, #0]
 8002e12:	6852      	ldr	r2, [r2, #4]
 8002e14:	4930      	ldr	r1, [pc, #192]	; (8002ed8 <UART_AdvFeatureConfig+0x140>)
 8002e16:	4011      	ands	r1, r2
 8002e18:	687a      	ldr	r2, [r7, #4]
 8002e1a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e1c:	430a      	orrs	r2, r1
 8002e1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	2210      	movs	r2, #16
 8002e26:	4013      	ands	r3, r2
 8002e28:	d00a      	beq.n	8002e40 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	6892      	ldr	r2, [r2, #8]
 8002e34:	4929      	ldr	r1, [pc, #164]	; (8002edc <UART_AdvFeatureConfig+0x144>)
 8002e36:	4011      	ands	r1, r2
 8002e38:	687a      	ldr	r2, [r7, #4]
 8002e3a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	2220      	movs	r2, #32
 8002e46:	4013      	ands	r3, r2
 8002e48:	d00a      	beq.n	8002e60 <UART_AdvFeatureConfig+0xc8>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	6812      	ldr	r2, [r2, #0]
 8002e52:	6892      	ldr	r2, [r2, #8]
 8002e54:	4922      	ldr	r1, [pc, #136]	; (8002ee0 <UART_AdvFeatureConfig+0x148>)
 8002e56:	4011      	ands	r1, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002e5c:	430a      	orrs	r2, r1
 8002e5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2240      	movs	r2, #64	; 0x40
 8002e66:	4013      	ands	r3, r2
 8002e68:	d01b      	beq.n	8002ea2 <UART_AdvFeatureConfig+0x10a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6812      	ldr	r2, [r2, #0]
 8002e72:	6852      	ldr	r2, [r2, #4]
 8002e74:	491b      	ldr	r1, [pc, #108]	; (8002ee4 <UART_AdvFeatureConfig+0x14c>)
 8002e76:	4011      	ands	r1, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e84:	2380      	movs	r3, #128	; 0x80
 8002e86:	035b      	lsls	r3, r3, #13
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d10a      	bne.n	8002ea2 <UART_AdvFeatureConfig+0x10a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6812      	ldr	r2, [r2, #0]
 8002e94:	6852      	ldr	r2, [r2, #4]
 8002e96:	4914      	ldr	r1, [pc, #80]	; (8002ee8 <UART_AdvFeatureConfig+0x150>)
 8002e98:	4011      	ands	r1, r2
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002e9e:	430a      	orrs	r2, r1
 8002ea0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d00a      	beq.n	8002ec2 <UART_AdvFeatureConfig+0x12a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	6852      	ldr	r2, [r2, #4]
 8002eb6:	490d      	ldr	r1, [pc, #52]	; (8002eec <UART_AdvFeatureConfig+0x154>)
 8002eb8:	4011      	ands	r1, r2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002ebe:	430a      	orrs	r2, r1
 8002ec0:	605a      	str	r2, [r3, #4]
  }
}
 8002ec2:	46c0      	nop			; (mov r8, r8)
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	b002      	add	sp, #8
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	46c0      	nop			; (mov r8, r8)
 8002ecc:	fffdffff 	.word	0xfffdffff
 8002ed0:	fffeffff 	.word	0xfffeffff
 8002ed4:	fffbffff 	.word	0xfffbffff
 8002ed8:	ffff7fff 	.word	0xffff7fff
 8002edc:	ffffefff 	.word	0xffffefff
 8002ee0:	ffffdfff 	.word	0xffffdfff
 8002ee4:	ffefffff 	.word	0xffefffff
 8002ee8:	ff9fffff 	.word	0xff9fffff
 8002eec:	fff7ffff 	.word	0xfff7ffff

08002ef0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b086      	sub	sp, #24
 8002ef4:	af02      	add	r7, sp, #8
 8002ef6:	6078      	str	r0, [r7, #4]
#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  uint32_t tickstart = 0U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	60fb      	str	r3, [r7, #12]
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2200      	movs	r2, #0
 8002f00:	66da      	str	r2, [r3, #108]	; 0x6c

#if !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC)
  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002f02:	f7fd ffd1 	bl	8000ea8 <HAL_GetTick>
 8002f06:	0003      	movs	r3, r0
 8002f08:	60fb      	str	r3, [r7, #12]

  /* TEACK and REACK bits in ISR are checked only when available (not available on all F0 devices).
     Bits are defined for some specific devices, and are available only for UART instances supporting WakeUp from Stop Mode feature. 
  */
  if (IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a24      	ldr	r2, [pc, #144]	; (8002fa0 <UART_CheckIdleState+0xb0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d009      	beq.n	8002f28 <UART_CheckIdleState+0x38>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a22      	ldr	r2, [pc, #136]	; (8002fa4 <UART_CheckIdleState+0xb4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d004      	beq.n	8002f28 <UART_CheckIdleState+0x38>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a21      	ldr	r2, [pc, #132]	; (8002fa8 <UART_CheckIdleState+0xb8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d129      	bne.n	8002f7c <UART_CheckIdleState+0x8c>
  {
    /* Check if the Transmitter is enabled */
    if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2208      	movs	r2, #8
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b08      	cmp	r3, #8
 8002f34:	d10d      	bne.n	8002f52 <UART_CheckIdleState+0x62>
    {
      /* Wait until TEACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f36:	68fa      	ldr	r2, [r7, #12]
 8002f38:	2380      	movs	r3, #128	; 0x80
 8002f3a:	0399      	lsls	r1, r3, #14
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <UART_CheckIdleState+0xbc>)
 8002f40:	9300      	str	r3, [sp, #0]
 8002f42:	0013      	movs	r3, r2
 8002f44:	2200      	movs	r2, #0
 8002f46:	f000 f833 	bl	8002fb0 <UART_WaitOnFlagUntilTimeout>
 8002f4a:	1e03      	subs	r3, r0, #0
 8002f4c:	d001      	beq.n	8002f52 <UART_CheckIdleState+0x62>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e021      	b.n	8002f96 <UART_CheckIdleState+0xa6>
      }
    }

    /* Check if the Receiver is enabled */
    if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2204      	movs	r2, #4
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	2b04      	cmp	r3, #4
 8002f5e:	d10d      	bne.n	8002f7c <UART_CheckIdleState+0x8c>
    {
      /* Wait until REACK flag is set */
      if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	2380      	movs	r3, #128	; 0x80
 8002f64:	03d9      	lsls	r1, r3, #15
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4b10      	ldr	r3, [pc, #64]	; (8002fac <UART_CheckIdleState+0xbc>)
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	0013      	movs	r3, r2
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f000 f81e 	bl	8002fb0 <UART_WaitOnFlagUntilTimeout>
 8002f74:	1e03      	subs	r3, r0, #0
 8002f76:	d001      	beq.n	8002f7c <UART_CheckIdleState+0x8c>
      {
        /* Timeout occurred */
        return HAL_TIMEOUT;
 8002f78:	2303      	movs	r3, #3
 8002f7a:	e00c      	b.n	8002f96 <UART_CheckIdleState+0xa6>
    }
  }
#endif /* !defined(STM32F030x6) && !defined(STM32F030x8)&& !defined(STM32F070xB)&& !defined(STM32F070x6)&& !defined(STM32F030xC) */

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2269      	movs	r2, #105	; 0x69
 8002f80:	2120      	movs	r1, #32
 8002f82:	5499      	strb	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	226a      	movs	r2, #106	; 0x6a
 8002f88:	2120      	movs	r1, #32
 8002f8a:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2268      	movs	r2, #104	; 0x68
 8002f90:	2100      	movs	r1, #0
 8002f92:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	0018      	movs	r0, r3
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b004      	add	sp, #16
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	46c0      	nop			; (mov r8, r8)
 8002fa0:	40013800 	.word	0x40013800
 8002fa4:	40004400 	.word	0x40004400
 8002fa8:	40004800 	.word	0x40004800
 8002fac:	01ffffff 	.word	0x01ffffff

08002fb0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	60b9      	str	r1, [r7, #8]
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	1dfb      	adds	r3, r7, #7
 8002fbe:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fc0:	e02b      	b.n	800301a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002fc2:	69bb      	ldr	r3, [r7, #24]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	d028      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d007      	beq.n	8002fde <UART_WaitOnFlagUntilTimeout+0x2e>
 8002fce:	f7fd ff6b 	bl	8000ea8 <HAL_GetTick>
 8002fd2:	0002      	movs	r2, r0
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	1ad2      	subs	r2, r2, r3
 8002fd8:	69bb      	ldr	r3, [r7, #24]
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d91d      	bls.n	800301a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	4916      	ldr	r1, [pc, #88]	; (8003044 <UART_WaitOnFlagUntilTimeout+0x94>)
 8002fea:	400a      	ands	r2, r1
 8002fec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	6812      	ldr	r2, [r2, #0]
 8002ff6:	6892      	ldr	r2, [r2, #8]
 8002ff8:	2101      	movs	r1, #1
 8002ffa:	438a      	bics	r2, r1
 8002ffc:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2269      	movs	r2, #105	; 0x69
 8003002:	2120      	movs	r1, #32
 8003004:	5499      	strb	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	226a      	movs	r2, #106	; 0x6a
 800300a:	2120      	movs	r1, #32
 800300c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2268      	movs	r2, #104	; 0x68
 8003012:	2100      	movs	r1, #0
 8003014:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e00f      	b.n	800303a <UART_WaitOnFlagUntilTimeout+0x8a>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69db      	ldr	r3, [r3, #28]
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	1ad3      	subs	r3, r2, r3
 8003028:	425a      	negs	r2, r3
 800302a:	4153      	adcs	r3, r2
 800302c:	b2db      	uxtb	r3, r3
 800302e:	001a      	movs	r2, r3
 8003030:	1dfb      	adds	r3, r7, #7
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	429a      	cmp	r2, r3
 8003036:	d0c4      	beq.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	0018      	movs	r0, r3
 800303c:	46bd      	mov	sp, r7
 800303e:	b004      	add	sp, #16
 8003040:	bd80      	pop	{r7, pc}
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	fffffe5f 	.word	0xfffffe5f

08003048 <main>:

/**
* @brief  The application entry point.
* @retval int
*/
int main(void) {
 8003048:	b5b0      	push	{r4, r5, r7, lr}
 800304a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration -----------------------------------------------------------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800304c:	f7fd fef0 	bl	8000e30 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003050:	f000 f85a 	bl	8003108 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8003054:	f000 f958 	bl	8003308 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8003058:	f000 f926 	bl	80032a8 <MX_USART2_UART_Init>
	MX_ADC_Init();
 800305c:	f000 f8ca 	bl	80031f4 <MX_ADC_Init>
	/* USER CODE BEGIN WHILE */

	for(;;) {
		/* USER CODE END WHILE */

		result = HAL_ADC_Start(&hadc);
 8003060:	4b25      	ldr	r3, [pc, #148]	; (80030f8 <main+0xb0>)
 8003062:	0018      	movs	r0, r3
 8003064:	f7fe f868 	bl	8001138 <HAL_ADC_Start>
 8003068:	0003      	movs	r3, r0
 800306a:	001a      	movs	r2, r3
 800306c:	4b23      	ldr	r3, [pc, #140]	; (80030fc <main+0xb4>)
 800306e:	701a      	strb	r2, [r3, #0]

		if(result != HAL_OK) {
 8003070:	4b22      	ldr	r3, [pc, #136]	; (80030fc <main+0xb4>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d001      	beq.n	800307c <main+0x34>
			Error_Handler();
 8003078:	f000 f9b8 	bl	80033ec <Error_Handler>
		}

		_delay(100);
 800307c:	2064      	movs	r0, #100	; 0x64
 800307e:	f000 f9ba 	bl	80033f6 <_delay>

		//Wait for completion
		result = HAL_ADC_PollForConversion(&hadc, ADC_POLL_TIMEOUT_MS);
 8003082:	23fa      	movs	r3, #250	; 0xfa
 8003084:	009a      	lsls	r2, r3, #2
 8003086:	4b1c      	ldr	r3, [pc, #112]	; (80030f8 <main+0xb0>)
 8003088:	0011      	movs	r1, r2
 800308a:	0018      	movs	r0, r3
 800308c:	f7fe f8ea 	bl	8001264 <HAL_ADC_PollForConversion>
 8003090:	0003      	movs	r3, r0
 8003092:	001a      	movs	r2, r3
 8003094:	4b19      	ldr	r3, [pc, #100]	; (80030fc <main+0xb4>)
 8003096:	701a      	strb	r2, [r3, #0]

		//Safety
		if(result != HAL_OK) {
 8003098:	4b18      	ldr	r3, [pc, #96]	; (80030fc <main+0xb4>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <main+0x5c>
			Error_Handler();
 80030a0:	f000 f9a4 	bl	80033ec <Error_Handler>
		}

		_delay(100);
 80030a4:	2064      	movs	r0, #100	; 0x64
 80030a6:	f000 f9a6 	bl	80033f6 <_delay>

		//Get Value
		val = HAL_ADC_GetValue(&hadc);
 80030aa:	4b13      	ldr	r3, [pc, #76]	; (80030f8 <main+0xb0>)
 80030ac:	0018      	movs	r0, r3
 80030ae:	f7fe f969 	bl	8001384 <HAL_ADC_GetValue>
 80030b2:	0002      	movs	r2, r0
 80030b4:	4b12      	ldr	r3, [pc, #72]	; (8003100 <main+0xb8>)
 80030b6:	601a      	str	r2, [r3, #0]

		//Parse Value
		voltage = adc_getVoltage(val);
 80030b8:	4b11      	ldr	r3, [pc, #68]	; (8003100 <main+0xb8>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	0018      	movs	r0, r3
 80030be:	f000 f9ad 	bl	800341c <adc_getVoltage>
 80030c2:	0003      	movs	r3, r0
 80030c4:	000c      	movs	r4, r1
 80030c6:	4a0f      	ldr	r2, [pc, #60]	; (8003104 <main+0xbc>)
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	6054      	str	r4, [r2, #4]

		_delay(100);
 80030cc:	2064      	movs	r0, #100	; 0x64
 80030ce:	f000 f992 	bl	80033f6 <_delay>

		result = HAL_ADC_Stop(&hadc);
 80030d2:	4b09      	ldr	r3, [pc, #36]	; (80030f8 <main+0xb0>)
 80030d4:	0018      	movs	r0, r3
 80030d6:	f7fe f883 	bl	80011e0 <HAL_ADC_Stop>
 80030da:	0003      	movs	r3, r0
 80030dc:	001a      	movs	r2, r3
 80030de:	4b07      	ldr	r3, [pc, #28]	; (80030fc <main+0xb4>)
 80030e0:	701a      	strb	r2, [r3, #0]

		if(result != HAL_OK) {
 80030e2:	4b06      	ldr	r3, [pc, #24]	; (80030fc <main+0xb4>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <main+0xa6>
			Error_Handler();
 80030ea:	f000 f97f 	bl	80033ec <Error_Handler>
		}

		_delay(100);
 80030ee:	2064      	movs	r0, #100	; 0x64
 80030f0:	f000 f981 	bl	80033f6 <_delay>
		result = HAL_ADC_Start(&hadc);
 80030f4:	e7b4      	b.n	8003060 <main+0x18>
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	200000a8 	.word	0x200000a8
 80030fc:	20000034 	.word	0x20000034
 8003100:	20000030 	.word	0x20000030
 8003104:	20000028 	.word	0x20000028

08003108 <SystemClock_Config>:
/**
* @brief System Clock Configuration
* @retval None
*/
void SystemClock_Config(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b098      	sub	sp, #96	; 0x60
 800310c:	af00      	add	r7, sp, #0
RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800310e:	232c      	movs	r3, #44	; 0x2c
 8003110:	18fb      	adds	r3, r7, r3
 8003112:	0018      	movs	r0, r3
 8003114:	2334      	movs	r3, #52	; 0x34
 8003116:	001a      	movs	r2, r3
 8003118:	2100      	movs	r1, #0
 800311a:	f000 fbdf 	bl	80038dc <memset>
RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800311e:	231c      	movs	r3, #28
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	0018      	movs	r0, r3
 8003124:	2310      	movs	r3, #16
 8003126:	001a      	movs	r2, r3
 8003128:	2100      	movs	r1, #0
 800312a:	f000 fbd7 	bl	80038dc <memset>
RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800312e:	003b      	movs	r3, r7
 8003130:	0018      	movs	r0, r3
 8003132:	231c      	movs	r3, #28
 8003134:	001a      	movs	r2, r3
 8003136:	2100      	movs	r1, #0
 8003138:	f000 fbd0 	bl	80038dc <memset>

/**Initializes the CPU, AHB and APB busses clocks
*/
RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 800313c:	232c      	movs	r3, #44	; 0x2c
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	2212      	movs	r2, #18
 8003142:	601a      	str	r2, [r3, #0]
RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003144:	232c      	movs	r3, #44	; 0x2c
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	2201      	movs	r2, #1
 800314a:	60da      	str	r2, [r3, #12]
RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800314c:	232c      	movs	r3, #44	; 0x2c
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	2201      	movs	r2, #1
 8003152:	615a      	str	r2, [r3, #20]
RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003154:	232c      	movs	r3, #44	; 0x2c
 8003156:	18fb      	adds	r3, r7, r3
 8003158:	2210      	movs	r2, #16
 800315a:	611a      	str	r2, [r3, #16]
RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800315c:	232c      	movs	r3, #44	; 0x2c
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	2210      	movs	r2, #16
 8003162:	619a      	str	r2, [r3, #24]
RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003164:	232c      	movs	r3, #44	; 0x2c
 8003166:	18fb      	adds	r3, r7, r3
 8003168:	2202      	movs	r2, #2
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800316c:	232c      	movs	r3, #44	; 0x2c
 800316e:	18fb      	adds	r3, r7, r3
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	0212      	lsls	r2, r2, #8
 8003174:	629a      	str	r2, [r3, #40]	; 0x28
RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8003176:	232c      	movs	r3, #44	; 0x2c
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	22a0      	movs	r2, #160	; 0xa0
 800317c:	0392      	lsls	r2, r2, #14
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c
RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV2;
 8003180:	232c      	movs	r3, #44	; 0x2c
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	2201      	movs	r2, #1
 8003186:	631a      	str	r2, [r3, #48]	; 0x30
if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003188:	232c      	movs	r3, #44	; 0x2c
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	0018      	movs	r0, r3
 800318e:	f7fe fd8d 	bl	8001cac <HAL_RCC_OscConfig>
 8003192:	1e03      	subs	r3, r0, #0
 8003194:	d001      	beq.n	800319a <SystemClock_Config+0x92>
{
Error_Handler();
 8003196:	f000 f929 	bl	80033ec <Error_Handler>
}
/**Initializes the CPU, AHB and APB busses clocks
*/
RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800319a:	231c      	movs	r3, #28
 800319c:	18fb      	adds	r3, r7, r3
 800319e:	2207      	movs	r2, #7
 80031a0:	601a      	str	r2, [r3, #0]
|RCC_CLOCKTYPE_PCLK1;
RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031a2:	231c      	movs	r3, #28
 80031a4:	18fb      	adds	r3, r7, r3
 80031a6:	2202      	movs	r2, #2
 80031a8:	605a      	str	r2, [r3, #4]
RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031aa:	231c      	movs	r3, #28
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	2200      	movs	r2, #0
 80031b0:	609a      	str	r2, [r3, #8]
RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80031b2:	231c      	movs	r3, #28
 80031b4:	18fb      	adds	r3, r7, r3
 80031b6:	2200      	movs	r2, #0
 80031b8:	60da      	str	r2, [r3, #12]

if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80031ba:	231c      	movs	r3, #28
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	2101      	movs	r1, #1
 80031c0:	0018      	movs	r0, r3
 80031c2:	f7ff f8d1 	bl	8002368 <HAL_RCC_ClockConfig>
 80031c6:	1e03      	subs	r3, r0, #0
 80031c8:	d001      	beq.n	80031ce <SystemClock_Config+0xc6>
{
Error_Handler();
 80031ca:	f000 f90f 	bl	80033ec <Error_Handler>
}
PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80031ce:	003b      	movs	r3, r7
 80031d0:	2202      	movs	r2, #2
 80031d2:	601a      	str	r2, [r3, #0]
PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80031d4:	003b      	movs	r3, r7
 80031d6:	2200      	movs	r2, #0
 80031d8:	60da      	str	r2, [r3, #12]
if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80031da:	003b      	movs	r3, r7
 80031dc:	0018      	movs	r0, r3
 80031de:	f7ff fa69 	bl	80026b4 <HAL_RCCEx_PeriphCLKConfig>
 80031e2:	1e03      	subs	r3, r0, #0
 80031e4:	d001      	beq.n	80031ea <SystemClock_Config+0xe2>
{
Error_Handler();
 80031e6:	f000 f901 	bl	80033ec <Error_Handler>
}
}
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b018      	add	sp, #96	; 0x60
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <MX_ADC_Init>:
* @brief ADC Initialization Function
* @param None
* @retval None
*/
static void MX_ADC_Init(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b084      	sub	sp, #16
 80031f8:	af00      	add	r7, sp, #0

/* USER CODE BEGIN ADC_Init 0 */

/* USER CODE END ADC_Init 0 */

ADC_ChannelConfTypeDef sConfig = {0};
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	0018      	movs	r0, r3
 80031fe:	230c      	movs	r3, #12
 8003200:	001a      	movs	r2, r3
 8003202:	2100      	movs	r1, #0
 8003204:	f000 fb6a 	bl	80038dc <memset>
/* USER CODE BEGIN ADC_Init 1 */

/* USER CODE END ADC_Init 1 */
/**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
*/
hadc.Instance = ADC1;
 8003208:	4b25      	ldr	r3, [pc, #148]	; (80032a0 <MX_ADC_Init+0xac>)
 800320a:	4a26      	ldr	r2, [pc, #152]	; (80032a4 <MX_ADC_Init+0xb0>)
 800320c:	601a      	str	r2, [r3, #0]
hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800320e:	4b24      	ldr	r3, [pc, #144]	; (80032a0 <MX_ADC_Init+0xac>)
 8003210:	2200      	movs	r2, #0
 8003212:	605a      	str	r2, [r3, #4]
hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8003214:	4b22      	ldr	r3, [pc, #136]	; (80032a0 <MX_ADC_Init+0xac>)
 8003216:	2200      	movs	r2, #0
 8003218:	609a      	str	r2, [r3, #8]
hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800321a:	4b21      	ldr	r3, [pc, #132]	; (80032a0 <MX_ADC_Init+0xac>)
 800321c:	2200      	movs	r2, #0
 800321e:	60da      	str	r2, [r3, #12]
hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8003220:	4b1f      	ldr	r3, [pc, #124]	; (80032a0 <MX_ADC_Init+0xac>)
 8003222:	2201      	movs	r2, #1
 8003224:	611a      	str	r2, [r3, #16]
hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003226:	4b1e      	ldr	r3, [pc, #120]	; (80032a0 <MX_ADC_Init+0xac>)
 8003228:	2204      	movs	r2, #4
 800322a:	615a      	str	r2, [r3, #20]
hadc.Init.LowPowerAutoWait = DISABLE;
 800322c:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <MX_ADC_Init+0xac>)
 800322e:	2200      	movs	r2, #0
 8003230:	619a      	str	r2, [r3, #24]
hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8003232:	4b1b      	ldr	r3, [pc, #108]	; (80032a0 <MX_ADC_Init+0xac>)
 8003234:	2200      	movs	r2, #0
 8003236:	61da      	str	r2, [r3, #28]
hadc.Init.ContinuousConvMode = DISABLE;
 8003238:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <MX_ADC_Init+0xac>)
 800323a:	2200      	movs	r2, #0
 800323c:	621a      	str	r2, [r3, #32]
hadc.Init.DiscontinuousConvMode = DISABLE;
 800323e:	4b18      	ldr	r3, [pc, #96]	; (80032a0 <MX_ADC_Init+0xac>)
 8003240:	2200      	movs	r2, #0
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003244:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <MX_ADC_Init+0xac>)
 8003246:	22c2      	movs	r2, #194	; 0xc2
 8003248:	32ff      	adds	r2, #255	; 0xff
 800324a:	629a      	str	r2, [r3, #40]	; 0x28
hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800324c:	4b14      	ldr	r3, [pc, #80]	; (80032a0 <MX_ADC_Init+0xac>)
 800324e:	2200      	movs	r2, #0
 8003250:	62da      	str	r2, [r3, #44]	; 0x2c
hadc.Init.DMAContinuousRequests = DISABLE;
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <MX_ADC_Init+0xac>)
 8003254:	2200      	movs	r2, #0
 8003256:	631a      	str	r2, [r3, #48]	; 0x30
hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <MX_ADC_Init+0xac>)
 800325a:	2201      	movs	r2, #1
 800325c:	635a      	str	r2, [r3, #52]	; 0x34
if (HAL_ADC_Init(&hadc) != HAL_OK)
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <MX_ADC_Init+0xac>)
 8003260:	0018      	movs	r0, r3
 8003262:	f7fd fe2b 	bl	8000ebc <HAL_ADC_Init>
 8003266:	1e03      	subs	r3, r0, #0
 8003268:	d001      	beq.n	800326e <MX_ADC_Init+0x7a>
{
Error_Handler();
 800326a:	f000 f8bf 	bl	80033ec <Error_Handler>
}
/**Configure for the selected ADC regular channel to be converted.
*/
sConfig.Channel = DEMO_ADC_CHANNEL;
 800326e:	1d3b      	adds	r3, r7, #4
 8003270:	2201      	movs	r2, #1
 8003272:	601a      	str	r2, [r3, #0]
sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003274:	1d3b      	adds	r3, r7, #4
 8003276:	2280      	movs	r2, #128	; 0x80
 8003278:	0152      	lsls	r2, r2, #5
 800327a:	605a      	str	r2, [r3, #4]
sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	2280      	movs	r2, #128	; 0x80
 8003280:	0552      	lsls	r2, r2, #21
 8003282:	609a      	str	r2, [r3, #8]
if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003284:	1d3a      	adds	r2, r7, #4
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <MX_ADC_Init+0xac>)
 8003288:	0011      	movs	r1, r2
 800328a:	0018      	movs	r0, r3
 800328c:	f7fe f886 	bl	800139c <HAL_ADC_ConfigChannel>
 8003290:	1e03      	subs	r3, r0, #0
 8003292:	d001      	beq.n	8003298 <MX_ADC_Init+0xa4>
{
Error_Handler();
 8003294:	f000 f8aa 	bl	80033ec <Error_Handler>
}
/* USER CODE BEGIN ADC_Init 2 */

/* USER CODE END ADC_Init 2 */

}
 8003298:	46c0      	nop			; (mov r8, r8)
 800329a:	46bd      	mov	sp, r7
 800329c:	b004      	add	sp, #16
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	200000a8 	.word	0x200000a8
 80032a4:	40012400 	.word	0x40012400

080032a8 <MX_USART2_UART_Init>:
* @brief USART2 Initialization Function
* @param None
* @retval None
*/
static void MX_USART2_UART_Init(void)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	af00      	add	r7, sp, #0
/* USER CODE END USART2_Init 0 */

/* USER CODE BEGIN USART2_Init 1 */

/* USER CODE END USART2_Init 1 */
huart2.Instance = USART2;
 80032ac:	4b14      	ldr	r3, [pc, #80]	; (8003300 <MX_USART2_UART_Init+0x58>)
 80032ae:	4a15      	ldr	r2, [pc, #84]	; (8003304 <MX_USART2_UART_Init+0x5c>)
 80032b0:	601a      	str	r2, [r3, #0]
huart2.Init.BaudRate = 115200;
 80032b2:	4b13      	ldr	r3, [pc, #76]	; (8003300 <MX_USART2_UART_Init+0x58>)
 80032b4:	22e1      	movs	r2, #225	; 0xe1
 80032b6:	0252      	lsls	r2, r2, #9
 80032b8:	605a      	str	r2, [r3, #4]
huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032ba:	4b11      	ldr	r3, [pc, #68]	; (8003300 <MX_USART2_UART_Init+0x58>)
 80032bc:	2200      	movs	r2, #0
 80032be:	609a      	str	r2, [r3, #8]
huart2.Init.StopBits = UART_STOPBITS_1;
 80032c0:	4b0f      	ldr	r3, [pc, #60]	; (8003300 <MX_USART2_UART_Init+0x58>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	60da      	str	r2, [r3, #12]
huart2.Init.Parity = UART_PARITY_NONE;
 80032c6:	4b0e      	ldr	r3, [pc, #56]	; (8003300 <MX_USART2_UART_Init+0x58>)
 80032c8:	2200      	movs	r2, #0
 80032ca:	611a      	str	r2, [r3, #16]
huart2.Init.Mode = UART_MODE_TX_RX;
 80032cc:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <MX_USART2_UART_Init+0x58>)
 80032ce:	220c      	movs	r2, #12
 80032d0:	615a      	str	r2, [r3, #20]
huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032d2:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <MX_USART2_UART_Init+0x58>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	619a      	str	r2, [r3, #24]
huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032d8:	4b09      	ldr	r3, [pc, #36]	; (8003300 <MX_USART2_UART_Init+0x58>)
 80032da:	2200      	movs	r2, #0
 80032dc:	61da      	str	r2, [r3, #28]
huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80032de:	4b08      	ldr	r3, [pc, #32]	; (8003300 <MX_USART2_UART_Init+0x58>)
 80032e0:	2200      	movs	r2, #0
 80032e2:	621a      	str	r2, [r3, #32]
huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80032e4:	4b06      	ldr	r3, [pc, #24]	; (8003300 <MX_USART2_UART_Init+0x58>)
 80032e6:	2200      	movs	r2, #0
 80032e8:	625a      	str	r2, [r3, #36]	; 0x24
if (HAL_UART_Init(&huart2) != HAL_OK)
 80032ea:	4b05      	ldr	r3, [pc, #20]	; (8003300 <MX_USART2_UART_Init+0x58>)
 80032ec:	0018      	movs	r0, r3
 80032ee:	f7ff fadf 	bl	80028b0 <HAL_UART_Init>
 80032f2:	1e03      	subs	r3, r0, #0
 80032f4:	d001      	beq.n	80032fa <MX_USART2_UART_Init+0x52>
{
Error_Handler();
 80032f6:	f000 f879 	bl	80033ec <Error_Handler>
}
/* USER CODE BEGIN USART2_Init 2 */

/* USER CODE END USART2_Init 2 */

}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	20000038 	.word	0x20000038
 8003304:	40004400 	.word	0x40004400

08003308 <MX_GPIO_Init>:
* @brief GPIO Initialization Function
* @param None
* @retval None
*/
static void MX_GPIO_Init(void)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b088      	sub	sp, #32
 800330c:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 800330e:	230c      	movs	r3, #12
 8003310:	18fb      	adds	r3, r7, r3
 8003312:	0018      	movs	r0, r3
 8003314:	2314      	movs	r3, #20
 8003316:	001a      	movs	r2, r3
 8003318:	2100      	movs	r1, #0
 800331a:	f000 fadf 	bl	80038dc <memset>

/* GPIO Ports Clock Enable */
__HAL_RCC_GPIOC_CLK_ENABLE();
 800331e:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <MX_GPIO_Init+0xd8>)
 8003320:	4a2f      	ldr	r2, [pc, #188]	; (80033e0 <MX_GPIO_Init+0xd8>)
 8003322:	6952      	ldr	r2, [r2, #20]
 8003324:	2180      	movs	r1, #128	; 0x80
 8003326:	0309      	lsls	r1, r1, #12
 8003328:	430a      	orrs	r2, r1
 800332a:	615a      	str	r2, [r3, #20]
 800332c:	4b2c      	ldr	r3, [pc, #176]	; (80033e0 <MX_GPIO_Init+0xd8>)
 800332e:	695a      	ldr	r2, [r3, #20]
 8003330:	2380      	movs	r3, #128	; 0x80
 8003332:	031b      	lsls	r3, r3, #12
 8003334:	4013      	ands	r3, r2
 8003336:	60bb      	str	r3, [r7, #8]
 8003338:	68bb      	ldr	r3, [r7, #8]
__HAL_RCC_GPIOF_CLK_ENABLE();
 800333a:	4b29      	ldr	r3, [pc, #164]	; (80033e0 <MX_GPIO_Init+0xd8>)
 800333c:	4a28      	ldr	r2, [pc, #160]	; (80033e0 <MX_GPIO_Init+0xd8>)
 800333e:	6952      	ldr	r2, [r2, #20]
 8003340:	2180      	movs	r1, #128	; 0x80
 8003342:	03c9      	lsls	r1, r1, #15
 8003344:	430a      	orrs	r2, r1
 8003346:	615a      	str	r2, [r3, #20]
 8003348:	4b25      	ldr	r3, [pc, #148]	; (80033e0 <MX_GPIO_Init+0xd8>)
 800334a:	695a      	ldr	r2, [r3, #20]
 800334c:	2380      	movs	r3, #128	; 0x80
 800334e:	03db      	lsls	r3, r3, #15
 8003350:	4013      	ands	r3, r2
 8003352:	607b      	str	r3, [r7, #4]
 8003354:	687b      	ldr	r3, [r7, #4]
__HAL_RCC_GPIOA_CLK_ENABLE();
 8003356:	4b22      	ldr	r3, [pc, #136]	; (80033e0 <MX_GPIO_Init+0xd8>)
 8003358:	4a21      	ldr	r2, [pc, #132]	; (80033e0 <MX_GPIO_Init+0xd8>)
 800335a:	6952      	ldr	r2, [r2, #20]
 800335c:	2180      	movs	r1, #128	; 0x80
 800335e:	0289      	lsls	r1, r1, #10
 8003360:	430a      	orrs	r2, r1
 8003362:	615a      	str	r2, [r3, #20]
 8003364:	4b1e      	ldr	r3, [pc, #120]	; (80033e0 <MX_GPIO_Init+0xd8>)
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	2380      	movs	r3, #128	; 0x80
 800336a:	029b      	lsls	r3, r3, #10
 800336c:	4013      	ands	r3, r2
 800336e:	603b      	str	r3, [r7, #0]
 8003370:	683b      	ldr	r3, [r7, #0]

/*Configure GPIO pin Output Level */
HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8003372:	2390      	movs	r3, #144	; 0x90
 8003374:	05db      	lsls	r3, r3, #23
 8003376:	2200      	movs	r2, #0
 8003378:	2120      	movs	r1, #32
 800337a:	0018      	movs	r0, r3
 800337c:	f7fe fc78 	bl	8001c70 <HAL_GPIO_WritePin>

/*Configure GPIO pin : B1_Pin */
GPIO_InitStruct.Pin = B1_Pin;
 8003380:	230c      	movs	r3, #12
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	2280      	movs	r2, #128	; 0x80
 8003386:	0192      	lsls	r2, r2, #6
 8003388:	601a      	str	r2, [r3, #0]
GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800338a:	230c      	movs	r3, #12
 800338c:	18fb      	adds	r3, r7, r3
 800338e:	4a15      	ldr	r2, [pc, #84]	; (80033e4 <MX_GPIO_Init+0xdc>)
 8003390:	605a      	str	r2, [r3, #4]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003392:	230c      	movs	r3, #12
 8003394:	18fb      	adds	r3, r7, r3
 8003396:	2200      	movs	r2, #0
 8003398:	609a      	str	r2, [r3, #8]
HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800339a:	230c      	movs	r3, #12
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	4a12      	ldr	r2, [pc, #72]	; (80033e8 <MX_GPIO_Init+0xe0>)
 80033a0:	0019      	movs	r1, r3
 80033a2:	0010      	movs	r0, r2
 80033a4:	f7fe fae8 	bl	8001978 <HAL_GPIO_Init>

/*Configure GPIO pin : LD2_Pin */
GPIO_InitStruct.Pin = LD2_Pin;
 80033a8:	230c      	movs	r3, #12
 80033aa:	18fb      	adds	r3, r7, r3
 80033ac:	2220      	movs	r2, #32
 80033ae:	601a      	str	r2, [r3, #0]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033b0:	230c      	movs	r3, #12
 80033b2:	18fb      	adds	r3, r7, r3
 80033b4:	2201      	movs	r2, #1
 80033b6:	605a      	str	r2, [r3, #4]
GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b8:	230c      	movs	r3, #12
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2200      	movs	r2, #0
 80033be:	609a      	str	r2, [r3, #8]
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033c0:	230c      	movs	r3, #12
 80033c2:	18fb      	adds	r3, r7, r3
 80033c4:	2200      	movs	r2, #0
 80033c6:	60da      	str	r2, [r3, #12]
HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80033c8:	230c      	movs	r3, #12
 80033ca:	18fa      	adds	r2, r7, r3
 80033cc:	2390      	movs	r3, #144	; 0x90
 80033ce:	05db      	lsls	r3, r3, #23
 80033d0:	0011      	movs	r1, r2
 80033d2:	0018      	movs	r0, r3
 80033d4:	f7fe fad0 	bl	8001978 <HAL_GPIO_Init>

}
 80033d8:	46c0      	nop			; (mov r8, r8)
 80033da:	46bd      	mov	sp, r7
 80033dc:	b008      	add	sp, #32
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000
 80033e4:	10210000 	.word	0x10210000
 80033e8:	48000800 	.word	0x48000800

080033ec <Error_Handler>:
* @brief  	This function is executed in case of error occurrence.
* @detail 	User can add his own implementation to report the HAL error return state
*
* @return 	None
*/
void Error_Handler(void) {
 80033ec:	b580      	push	{r7, lr}
 80033ee:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN Error_Handler_Debug */

	/* USER CODE END Error_Handler_Debug */

	return;
 80033f0:	46c0      	nop			; (mov r8, r8)
}
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <_delay>:
 * @detail 		x
 *
 * @param 		[in] (uint32_t) count - counts of delay
 */
/************************************************************************************************************************************/
void _delay(uint32_t count) {
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b084      	sub	sp, #16
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]

	//Delay
	for(int i=0; i<count; i++) {
 80033fe:	2300      	movs	r3, #0
 8003400:	60fb      	str	r3, [r7, #12]
 8003402:	e003      	b.n	800340c <_delay+0x16>
		asm(" nop");
 8003404:	46c0      	nop			; (mov r8, r8)
	for(int i=0; i<count; i++) {
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	3301      	adds	r3, #1
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	429a      	cmp	r2, r3
 8003412:	d3f7      	bcc.n	8003404 <_delay+0xe>
	}

	return;
 8003414:	46c0      	nop			; (mov r8, r8)
}
 8003416:	46bd      	mov	sp, r7
 8003418:	b004      	add	sp, #16
 800341a:	bd80      	pop	{r7, pc}

0800341c <adc_getVoltage>:
 *
 *  @param 		[in] (uint32_t) adc_val - adc measured value
 *  @return		(double) voltage value of measurement
 */
/************************************************************************************************************************************/
double adc_getVoltage(uint32_t adc_val) {
 800341c:	b590      	push	{r4, r7, lr}
 800341e:	b085      	sub	sp, #20
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

	//Locals
	double pin_val;

	//Calc
	pin_val = (((double)adc_val)*VCC_VOLTS)/(ADC_RANGE);
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7fd fcad 	bl	8000d84 <__aeabi_ui2d>
 800342a:	4a0b      	ldr	r2, [pc, #44]	; (8003458 <adc_getVoltage+0x3c>)
 800342c:	4b0b      	ldr	r3, [pc, #44]	; (800345c <adc_getVoltage+0x40>)
 800342e:	f7fd fa29 	bl	8000884 <__aeabi_dmul>
 8003432:	0003      	movs	r3, r0
 8003434:	000c      	movs	r4, r1
 8003436:	0018      	movs	r0, r3
 8003438:	0021      	movs	r1, r4
 800343a:	2200      	movs	r2, #0
 800343c:	4b08      	ldr	r3, [pc, #32]	; (8003460 <adc_getVoltage+0x44>)
 800343e:	f7fc feed 	bl	800021c <__aeabi_ddiv>
 8003442:	0003      	movs	r3, r0
 8003444:	000c      	movs	r4, r1
 8003446:	60bb      	str	r3, [r7, #8]
 8003448:	60fc      	str	r4, [r7, #12]

	return pin_val;
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	68fc      	ldr	r4, [r7, #12]
}
 800344e:	0018      	movs	r0, r3
 8003450:	0021      	movs	r1, r4
 8003452:	46bd      	mov	sp, r7
 8003454:	b005      	add	sp, #20
 8003456:	bd90      	pop	{r4, r7, pc}
 8003458:	66666666 	.word	0x66666666
 800345c:	400a6666 	.word	0x400a6666
 8003460:	40affe00 	.word	0x40affe00

08003464 <adc_getChannelConfig>:
 *  @param 		[in] (uint32_t) channel - channel for selection
 *
 *  @return		(AdcChannelConfig) selected channel configuration
 */
/************************************************************************************************************************************/
AdcChannelConfig adc_getChannelConfig(uint32_t channel) {
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b087      	sub	sp, #28
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]

	//Locals
	AdcChannelConfig config;

	//Init State
	config.channel = channel;												/* store the specified channel value					*/
 800346e:	2308      	movs	r3, #8
 8003470:	18fb      	adds	r3, r7, r3
 8003472:	683a      	ldr	r2, [r7, #0]
 8003474:	601a      	str	r2, [r3, #0]

	//Lookup Port&Pin
	switch(channel) {
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	2b0f      	cmp	r3, #15
 800347a:	d900      	bls.n	800347e <adc_getChannelConfig+0x1a>
 800347c:	e09d      	b.n	80035ba <adc_getChannelConfig+0x156>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	009a      	lsls	r2, r3, #2
 8003482:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <adc_getChannelConfig+0x184>)
 8003484:	18d3      	adds	r3, r2, r3
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	469f      	mov	pc, r3
		case ADC_CHANNEL_0:													/* PA0													*/
			config.port = GPIOA;
 800348a:	2308      	movs	r3, #8
 800348c:	18fb      	adds	r3, r7, r3
 800348e:	2290      	movs	r2, #144	; 0x90
 8003490:	05d2      	lsls	r2, r2, #23
 8003492:	605a      	str	r2, [r3, #4]
			config.pin  = 0;
 8003494:	2308      	movs	r3, #8
 8003496:	18fb      	adds	r3, r7, r3
 8003498:	2200      	movs	r2, #0
 800349a:	811a      	strh	r2, [r3, #8]
			break;
 800349c:	e08e      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_1:													/* PA1													*/
			config.port = GPIOA;
 800349e:	2308      	movs	r3, #8
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	2290      	movs	r2, #144	; 0x90
 80034a4:	05d2      	lsls	r2, r2, #23
 80034a6:	605a      	str	r2, [r3, #4]
			config.pin  = 1;
 80034a8:	2308      	movs	r3, #8
 80034aa:	18fb      	adds	r3, r7, r3
 80034ac:	2201      	movs	r2, #1
 80034ae:	811a      	strh	r2, [r3, #8]
			break;
 80034b0:	e084      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_2:													/* PA2													*/
			config.port = GPIOA;
 80034b2:	2308      	movs	r3, #8
 80034b4:	18fb      	adds	r3, r7, r3
 80034b6:	2290      	movs	r2, #144	; 0x90
 80034b8:	05d2      	lsls	r2, r2, #23
 80034ba:	605a      	str	r2, [r3, #4]
			config.pin  = 2;
 80034bc:	2308      	movs	r3, #8
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	2202      	movs	r2, #2
 80034c2:	811a      	strh	r2, [r3, #8]
			break;
 80034c4:	e07a      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_3:													/* PA3													*/
			config.port = GPIOA;
 80034c6:	2308      	movs	r3, #8
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	2290      	movs	r2, #144	; 0x90
 80034cc:	05d2      	lsls	r2, r2, #23
 80034ce:	605a      	str	r2, [r3, #4]
			config.pin  = 3;
 80034d0:	2308      	movs	r3, #8
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	2203      	movs	r2, #3
 80034d6:	811a      	strh	r2, [r3, #8]
			break;
 80034d8:	e070      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_4:													/* PA4													*/
			config.port = GPIOA;
 80034da:	2308      	movs	r3, #8
 80034dc:	18fb      	adds	r3, r7, r3
 80034de:	2290      	movs	r2, #144	; 0x90
 80034e0:	05d2      	lsls	r2, r2, #23
 80034e2:	605a      	str	r2, [r3, #4]
			config.pin  = 4;
 80034e4:	2308      	movs	r3, #8
 80034e6:	18fb      	adds	r3, r7, r3
 80034e8:	2204      	movs	r2, #4
 80034ea:	811a      	strh	r2, [r3, #8]
			break;
 80034ec:	e066      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_5:													/* PA5													*/
			config.port = GPIOA;
 80034ee:	2308      	movs	r3, #8
 80034f0:	18fb      	adds	r3, r7, r3
 80034f2:	2290      	movs	r2, #144	; 0x90
 80034f4:	05d2      	lsls	r2, r2, #23
 80034f6:	605a      	str	r2, [r3, #4]
			config.pin  = 5;
 80034f8:	2308      	movs	r3, #8
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	2205      	movs	r2, #5
 80034fe:	811a      	strh	r2, [r3, #8]
			break;
 8003500:	e05c      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_6:													/* PA6													*/
			config.port = GPIOA;
 8003502:	2308      	movs	r3, #8
 8003504:	18fb      	adds	r3, r7, r3
 8003506:	2290      	movs	r2, #144	; 0x90
 8003508:	05d2      	lsls	r2, r2, #23
 800350a:	605a      	str	r2, [r3, #4]
			config.pin  = 6;
 800350c:	2308      	movs	r3, #8
 800350e:	18fb      	adds	r3, r7, r3
 8003510:	2206      	movs	r2, #6
 8003512:	811a      	strh	r2, [r3, #8]
			break;
 8003514:	e052      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_7:													/* PA7													*/
			config.port = GPIOA;
 8003516:	2308      	movs	r3, #8
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	2290      	movs	r2, #144	; 0x90
 800351c:	05d2      	lsls	r2, r2, #23
 800351e:	605a      	str	r2, [r3, #4]
			config.pin  = 7;
 8003520:	2308      	movs	r3, #8
 8003522:	18fb      	adds	r3, r7, r3
 8003524:	2207      	movs	r2, #7
 8003526:	811a      	strh	r2, [r3, #8]
			break;
 8003528:	e048      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_8:													/* PB0													*/
			config.port = GPIOB;
 800352a:	2308      	movs	r3, #8
 800352c:	18fb      	adds	r3, r7, r3
 800352e:	4a2f      	ldr	r2, [pc, #188]	; (80035ec <adc_getChannelConfig+0x188>)
 8003530:	605a      	str	r2, [r3, #4]
			config.pin  = 0;
 8003532:	2308      	movs	r3, #8
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	2200      	movs	r2, #0
 8003538:	811a      	strh	r2, [r3, #8]
			break;
 800353a:	e03f      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_9:													/* PB1													*/
			config.port = GPIOB;
 800353c:	2308      	movs	r3, #8
 800353e:	18fb      	adds	r3, r7, r3
 8003540:	4a2a      	ldr	r2, [pc, #168]	; (80035ec <adc_getChannelConfig+0x188>)
 8003542:	605a      	str	r2, [r3, #4]
			config.pin  = 1;
 8003544:	2308      	movs	r3, #8
 8003546:	18fb      	adds	r3, r7, r3
 8003548:	2201      	movs	r2, #1
 800354a:	811a      	strh	r2, [r3, #8]
			break;
 800354c:	e036      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_10:												/* PC0													*/
			config.port = GPIOC;
 800354e:	2308      	movs	r3, #8
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	4a27      	ldr	r2, [pc, #156]	; (80035f0 <adc_getChannelConfig+0x18c>)
 8003554:	605a      	str	r2, [r3, #4]
			config.pin  = 0;
 8003556:	2308      	movs	r3, #8
 8003558:	18fb      	adds	r3, r7, r3
 800355a:	2200      	movs	r2, #0
 800355c:	811a      	strh	r2, [r3, #8]
			break;
 800355e:	e02d      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_11:												/* PC1													*/
			config.port = GPIOC;
 8003560:	2308      	movs	r3, #8
 8003562:	18fb      	adds	r3, r7, r3
 8003564:	4a22      	ldr	r2, [pc, #136]	; (80035f0 <adc_getChannelConfig+0x18c>)
 8003566:	605a      	str	r2, [r3, #4]
			config.pin  = 1;
 8003568:	2308      	movs	r3, #8
 800356a:	18fb      	adds	r3, r7, r3
 800356c:	2201      	movs	r2, #1
 800356e:	811a      	strh	r2, [r3, #8]
			break;
 8003570:	e024      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_12:												/* PC2													*/
			config.port = GPIOC;
 8003572:	2308      	movs	r3, #8
 8003574:	18fb      	adds	r3, r7, r3
 8003576:	4a1e      	ldr	r2, [pc, #120]	; (80035f0 <adc_getChannelConfig+0x18c>)
 8003578:	605a      	str	r2, [r3, #4]
			config.pin  = 2;
 800357a:	2308      	movs	r3, #8
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	2202      	movs	r2, #2
 8003580:	811a      	strh	r2, [r3, #8]
			break;
 8003582:	e01b      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_13:												/* PC3													*/
			config.port = GPIOC;
 8003584:	2308      	movs	r3, #8
 8003586:	18fb      	adds	r3, r7, r3
 8003588:	4a19      	ldr	r2, [pc, #100]	; (80035f0 <adc_getChannelConfig+0x18c>)
 800358a:	605a      	str	r2, [r3, #4]
			config.pin  = 3;
 800358c:	2308      	movs	r3, #8
 800358e:	18fb      	adds	r3, r7, r3
 8003590:	2203      	movs	r2, #3
 8003592:	811a      	strh	r2, [r3, #8]
			break;
 8003594:	e012      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_14:												/* PC4													*/
			config.port = GPIOC;
 8003596:	2308      	movs	r3, #8
 8003598:	18fb      	adds	r3, r7, r3
 800359a:	4a15      	ldr	r2, [pc, #84]	; (80035f0 <adc_getChannelConfig+0x18c>)
 800359c:	605a      	str	r2, [r3, #4]
			config.pin  = 4;
 800359e:	2308      	movs	r3, #8
 80035a0:	18fb      	adds	r3, r7, r3
 80035a2:	2204      	movs	r2, #4
 80035a4:	811a      	strh	r2, [r3, #8]
			break;
 80035a6:	e009      	b.n	80035bc <adc_getChannelConfig+0x158>
		case ADC_CHANNEL_15:												/* PC5													*/
			config.port = GPIOC;
 80035a8:	2308      	movs	r3, #8
 80035aa:	18fb      	adds	r3, r7, r3
 80035ac:	4a10      	ldr	r2, [pc, #64]	; (80035f0 <adc_getChannelConfig+0x18c>)
 80035ae:	605a      	str	r2, [r3, #4]
			config.pin  = 5;
 80035b0:	2308      	movs	r3, #8
 80035b2:	18fb      	adds	r3, r7, r3
 80035b4:	2205      	movs	r2, #5
 80035b6:	811a      	strh	r2, [r3, #8]
			break;
 80035b8:	e000      	b.n	80035bc <adc_getChannelConfig+0x158>
		default:															/* safety catch on error input							*/
			for(;;);
 80035ba:	e7fe      	b.n	80035ba <adc_getChannelConfig+0x156>
	}

	//Store GPIO pin value
	config.gpio_pin = (1 << config.pin);
 80035bc:	2308      	movs	r3, #8
 80035be:	18fb      	adds	r3, r7, r3
 80035c0:	891b      	ldrh	r3, [r3, #8]
 80035c2:	001a      	movs	r2, r3
 80035c4:	2301      	movs	r3, #1
 80035c6:	4093      	lsls	r3, r2
 80035c8:	001a      	movs	r2, r3
 80035ca:	2308      	movs	r3, #8
 80035cc:	18fb      	adds	r3, r7, r3
 80035ce:	60da      	str	r2, [r3, #12]

	return config;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2208      	movs	r2, #8
 80035d4:	18ba      	adds	r2, r7, r2
 80035d6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80035d8:	c313      	stmia	r3!, {r0, r1, r4}
 80035da:	6812      	ldr	r2, [r2, #0]
 80035dc:	601a      	str	r2, [r3, #0]
}
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	46bd      	mov	sp, r7
 80035e2:	b007      	add	sp, #28
 80035e4:	bd90      	pop	{r4, r7, pc}
 80035e6:	46c0      	nop			; (mov r8, r8)
 80035e8:	080039a4 	.word	0x080039a4
 80035ec:	48000400 	.word	0x48000400
 80035f0:	48000800 	.word	0x48000800

080035f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fa:	4b0f      	ldr	r3, [pc, #60]	; (8003638 <HAL_MspInit+0x44>)
 80035fc:	4a0e      	ldr	r2, [pc, #56]	; (8003638 <HAL_MspInit+0x44>)
 80035fe:	6992      	ldr	r2, [r2, #24]
 8003600:	2101      	movs	r1, #1
 8003602:	430a      	orrs	r2, r1
 8003604:	619a      	str	r2, [r3, #24]
 8003606:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <HAL_MspInit+0x44>)
 8003608:	699b      	ldr	r3, [r3, #24]
 800360a:	2201      	movs	r2, #1
 800360c:	4013      	ands	r3, r2
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003612:	4b09      	ldr	r3, [pc, #36]	; (8003638 <HAL_MspInit+0x44>)
 8003614:	4a08      	ldr	r2, [pc, #32]	; (8003638 <HAL_MspInit+0x44>)
 8003616:	69d2      	ldr	r2, [r2, #28]
 8003618:	2180      	movs	r1, #128	; 0x80
 800361a:	0549      	lsls	r1, r1, #21
 800361c:	430a      	orrs	r2, r1
 800361e:	61da      	str	r2, [r3, #28]
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <HAL_MspInit+0x44>)
 8003622:	69da      	ldr	r2, [r3, #28]
 8003624:	2380      	movs	r3, #128	; 0x80
 8003626:	055b      	lsls	r3, r3, #21
 8003628:	4013      	ands	r3, r2
 800362a:	603b      	str	r3, [r7, #0]
 800362c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800362e:	46c0      	nop			; (mov r8, r8)
 8003630:	46bd      	mov	sp, r7
 8003632:	b002      	add	sp, #8
 8003634:	bd80      	pop	{r7, pc}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	40021000 	.word	0x40021000

0800363c <HAL_ADC_MspInit>:
* @brief ADC MSP Initialization
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc) {
 800363c:	b580      	push	{r7, lr}
 800363e:	b08e      	sub	sp, #56	; 0x38
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
	//Locals
	AdcChannelConfig config;												/* ADC Channel to use for demo							*/
	GPIO_InitTypeDef GPIO_InitStruct;

  //Init
  memset(&GPIO_InitStruct, 0, sizeof(GPIO_InitStruct));
 8003644:	2314      	movs	r3, #20
 8003646:	18fb      	adds	r3, r7, r3
 8003648:	2214      	movs	r2, #20
 800364a:	2100      	movs	r1, #0
 800364c:	0018      	movs	r0, r3
 800364e:	f000 f945 	bl	80038dc <memset>
  config = adc_getChannelConfig(DEMO_ADC_CHANNEL);
 8003652:	2328      	movs	r3, #40	; 0x28
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	2101      	movs	r1, #1
 8003658:	0018      	movs	r0, r3
 800365a:	f7ff ff03 	bl	8003464 <adc_getChannelConfig>

  if(hadc->Instance==ADC1) {
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a1d      	ldr	r2, [pc, #116]	; (80036d8 <HAL_ADC_MspInit+0x9c>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d132      	bne.n	80036ce <HAL_ADC_MspInit+0x92>

    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003668:	4b1c      	ldr	r3, [pc, #112]	; (80036dc <HAL_ADC_MspInit+0xa0>)
 800366a:	4a1c      	ldr	r2, [pc, #112]	; (80036dc <HAL_ADC_MspInit+0xa0>)
 800366c:	6992      	ldr	r2, [r2, #24]
 800366e:	2180      	movs	r1, #128	; 0x80
 8003670:	0089      	lsls	r1, r1, #2
 8003672:	430a      	orrs	r2, r1
 8003674:	619a      	str	r2, [r3, #24]
 8003676:	4b19      	ldr	r3, [pc, #100]	; (80036dc <HAL_ADC_MspInit+0xa0>)
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	2380      	movs	r3, #128	; 0x80
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4013      	ands	r3, r2
 8003680:	613b      	str	r3, [r7, #16]
 8003682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();											/* @todo 	all gpio clocks for adc						*/
 8003684:	4b15      	ldr	r3, [pc, #84]	; (80036dc <HAL_ADC_MspInit+0xa0>)
 8003686:	4a15      	ldr	r2, [pc, #84]	; (80036dc <HAL_ADC_MspInit+0xa0>)
 8003688:	6952      	ldr	r2, [r2, #20]
 800368a:	2180      	movs	r1, #128	; 0x80
 800368c:	0289      	lsls	r1, r1, #10
 800368e:	430a      	orrs	r2, r1
 8003690:	615a      	str	r2, [r3, #20]
 8003692:	4b12      	ldr	r3, [pc, #72]	; (80036dc <HAL_ADC_MspInit+0xa0>)
 8003694:	695a      	ldr	r2, [r3, #20]
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	029b      	lsls	r3, r3, #10
 800369a:	4013      	ands	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	68fb      	ldr	r3, [r7, #12]

    /**ADC GPIO Configuration    
    	PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = config.gpio_pin;									/* GPIO_PIN_0											*/
 80036a0:	2328      	movs	r3, #40	; 0x28
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	68da      	ldr	r2, [r3, #12]
 80036a6:	2314      	movs	r3, #20
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036ac:	2314      	movs	r3, #20
 80036ae:	18fb      	adds	r3, r7, r3
 80036b0:	2203      	movs	r2, #3
 80036b2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2314      	movs	r3, #20
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	2200      	movs	r2, #0
 80036ba:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(config.port, &GPIO_InitStruct);
 80036bc:	2328      	movs	r3, #40	; 0x28
 80036be:	18fb      	adds	r3, r7, r3
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	2214      	movs	r2, #20
 80036c4:	18ba      	adds	r2, r7, r2
 80036c6:	0011      	movs	r1, r2
 80036c8:	0018      	movs	r0, r3
 80036ca:	f7fe f955 	bl	8001978 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b00e      	add	sp, #56	; 0x38
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	46c0      	nop			; (mov r8, r8)
 80036d8:	40012400 	.word	0x40012400
 80036dc:	40021000 	.word	0x40021000

080036e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08a      	sub	sp, #40	; 0x28
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036e8:	2314      	movs	r3, #20
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	0018      	movs	r0, r3
 80036ee:	2314      	movs	r3, #20
 80036f0:	001a      	movs	r2, r3
 80036f2:	2100      	movs	r1, #0
 80036f4:	f000 f8f2 	bl	80038dc <memset>
  if(huart->Instance==USART2)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1f      	ldr	r2, [pc, #124]	; (800377c <HAL_UART_MspInit+0x9c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d137      	bne.n	8003772 <HAL_UART_MspInit+0x92>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003702:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <HAL_UART_MspInit+0xa0>)
 8003704:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <HAL_UART_MspInit+0xa0>)
 8003706:	69d2      	ldr	r2, [r2, #28]
 8003708:	2180      	movs	r1, #128	; 0x80
 800370a:	0289      	lsls	r1, r1, #10
 800370c:	430a      	orrs	r2, r1
 800370e:	61da      	str	r2, [r3, #28]
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_UART_MspInit+0xa0>)
 8003712:	69da      	ldr	r2, [r3, #28]
 8003714:	2380      	movs	r3, #128	; 0x80
 8003716:	029b      	lsls	r3, r3, #10
 8003718:	4013      	ands	r3, r2
 800371a:	613b      	str	r3, [r7, #16]
 800371c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <HAL_UART_MspInit+0xa0>)
 8003720:	4a17      	ldr	r2, [pc, #92]	; (8003780 <HAL_UART_MspInit+0xa0>)
 8003722:	6952      	ldr	r2, [r2, #20]
 8003724:	2180      	movs	r1, #128	; 0x80
 8003726:	0289      	lsls	r1, r1, #10
 8003728:	430a      	orrs	r2, r1
 800372a:	615a      	str	r2, [r3, #20]
 800372c:	4b14      	ldr	r3, [pc, #80]	; (8003780 <HAL_UART_MspInit+0xa0>)
 800372e:	695a      	ldr	r2, [r3, #20]
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	029b      	lsls	r3, r3, #10
 8003734:	4013      	ands	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800373a:	2314      	movs	r3, #20
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	220c      	movs	r2, #12
 8003740:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	2314      	movs	r3, #20
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	2202      	movs	r2, #2
 8003748:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2314      	movs	r3, #20
 800374c:	18fb      	adds	r3, r7, r3
 800374e:	2200      	movs	r2, #0
 8003750:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003752:	2314      	movs	r3, #20
 8003754:	18fb      	adds	r3, r7, r3
 8003756:	2200      	movs	r2, #0
 8003758:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800375a:	2314      	movs	r3, #20
 800375c:	18fb      	adds	r3, r7, r3
 800375e:	2201      	movs	r2, #1
 8003760:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003762:	2314      	movs	r3, #20
 8003764:	18fa      	adds	r2, r7, r3
 8003766:	2390      	movs	r3, #144	; 0x90
 8003768:	05db      	lsls	r3, r3, #23
 800376a:	0011      	movs	r1, r2
 800376c:	0018      	movs	r0, r3
 800376e:	f7fe f903 	bl	8001978 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003772:	46c0      	nop			; (mov r8, r8)
 8003774:	46bd      	mov	sp, r7
 8003776:	b00a      	add	sp, #40	; 0x28
 8003778:	bd80      	pop	{r7, pc}
 800377a:	46c0      	nop			; (mov r8, r8)
 800377c:	40004400 	.word	0x40004400
 8003780:	40021000 	.word	0x40021000

08003784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003788:	46c0      	nop			; (mov r8, r8)
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}

0800378e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800378e:	b580      	push	{r7, lr}
 8003790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003792:	e7fe      	b.n	8003792 <HardFault_Handler+0x4>

08003794 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003798:	46c0      	nop			; (mov r8, r8)
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}

0800379e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800379e:	b580      	push	{r7, lr}
 80037a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80037ac:	f7fd fb70 	bl	8000e90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80037b0:	46c0      	nop			; (mov r8, r8)
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
	...

080037b8 <SystemInit>:
  *         Initialize the default HSI clock source, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001U;
 80037bc:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <SystemInit+0x70>)
 80037be:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <SystemInit+0x70>)
 80037c0:	6812      	ldr	r2, [r2, #0]
 80037c2:	2101      	movs	r1, #1
 80037c4:	430a      	orrs	r2, r1
 80037c6:	601a      	str	r2, [r3, #0]
#if defined (STM32F051x8) || defined (STM32F058x8)
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80CU;
#else
  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
  RCC->CFGR &= (uint32_t)0x08FFB80CU;
 80037c8:	4b17      	ldr	r3, [pc, #92]	; (8003828 <SystemInit+0x70>)
 80037ca:	4a17      	ldr	r2, [pc, #92]	; (8003828 <SystemInit+0x70>)
 80037cc:	6852      	ldr	r2, [r2, #4]
 80037ce:	4917      	ldr	r1, [pc, #92]	; (800382c <SystemInit+0x74>)
 80037d0:	400a      	ands	r2, r1
 80037d2:	605a      	str	r2, [r3, #4]
#endif /* STM32F051x8 or STM32F058x8 */
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFFU;
 80037d4:	4b14      	ldr	r3, [pc, #80]	; (8003828 <SystemInit+0x70>)
 80037d6:	4a14      	ldr	r2, [pc, #80]	; (8003828 <SystemInit+0x70>)
 80037d8:	6812      	ldr	r2, [r2, #0]
 80037da:	4915      	ldr	r1, [pc, #84]	; (8003830 <SystemInit+0x78>)
 80037dc:	400a      	ands	r2, r1
 80037de:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 80037e0:	4b11      	ldr	r3, [pc, #68]	; (8003828 <SystemInit+0x70>)
 80037e2:	4a11      	ldr	r2, [pc, #68]	; (8003828 <SystemInit+0x70>)
 80037e4:	6812      	ldr	r2, [r2, #0]
 80037e6:	4913      	ldr	r1, [pc, #76]	; (8003834 <SystemInit+0x7c>)
 80037e8:	400a      	ands	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFFU;
 80037ec:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <SystemInit+0x70>)
 80037ee:	4a0e      	ldr	r2, [pc, #56]	; (8003828 <SystemInit+0x70>)
 80037f0:	6852      	ldr	r2, [r2, #4]
 80037f2:	4911      	ldr	r1, [pc, #68]	; (8003838 <SystemInit+0x80>)
 80037f4:	400a      	ands	r2, r1
 80037f6:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0U;
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <SystemInit+0x70>)
 80037fa:	4a0b      	ldr	r2, [pc, #44]	; (8003828 <SystemInit+0x70>)
 80037fc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80037fe:	210f      	movs	r1, #15
 8003800:	438a      	bics	r2, r1
 8003802:	62da      	str	r2, [r3, #44]	; 0x2c
#elif defined (STM32F071xB)
  /* Reset USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFCEACU;
#elif defined (STM32F091xC) || defined (STM32F098xx)
  /* Reset USART3SW[1:0], USART2SW[1:0], USART1SW[1:0], I2C1SW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFF0FEACU;
 8003804:	4b08      	ldr	r3, [pc, #32]	; (8003828 <SystemInit+0x70>)
 8003806:	4a08      	ldr	r2, [pc, #32]	; (8003828 <SystemInit+0x70>)
 8003808:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800380a:	490c      	ldr	r1, [pc, #48]	; (800383c <SystemInit+0x84>)
 800380c:	400a      	ands	r2, r1
 800380e:	631a      	str	r2, [r3, #48]	; 0x30
#else
 #warning "No target selected"
#endif

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFEU;
 8003810:	4b05      	ldr	r3, [pc, #20]	; (8003828 <SystemInit+0x70>)
 8003812:	4a05      	ldr	r2, [pc, #20]	; (8003828 <SystemInit+0x70>)
 8003814:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003816:	2101      	movs	r1, #1
 8003818:	438a      	bics	r2, r1
 800381a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800381c:	4b02      	ldr	r3, [pc, #8]	; (8003828 <SystemInit+0x70>)
 800381e:	2200      	movs	r2, #0
 8003820:	609a      	str	r2, [r3, #8]

}
 8003822:	46c0      	nop			; (mov r8, r8)
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	40021000 	.word	0x40021000
 800382c:	08ffb80c 	.word	0x08ffb80c
 8003830:	fef6ffff 	.word	0xfef6ffff
 8003834:	fffbffff 	.word	0xfffbffff
 8003838:	ffc0ffff 	.word	0xffc0ffff
 800383c:	fff0feac 	.word	0xfff0feac

08003840 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003840:	480d      	ldr	r0, [pc, #52]	; (8003878 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003842:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003844:	480d      	ldr	r0, [pc, #52]	; (800387c <LoopForever+0x6>)
  ldr r1, =_edata
 8003846:	490e      	ldr	r1, [pc, #56]	; (8003880 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003848:	4a0e      	ldr	r2, [pc, #56]	; (8003884 <LoopForever+0xe>)
  movs r3, #0
 800384a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800384c:	e002      	b.n	8003854 <LoopCopyDataInit>

0800384e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800384e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003852:	3304      	adds	r3, #4

08003854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003858:	d3f9      	bcc.n	800384e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800385a:	4a0b      	ldr	r2, [pc, #44]	; (8003888 <LoopForever+0x12>)
  ldr r4, =_ebss
 800385c:	4c0b      	ldr	r4, [pc, #44]	; (800388c <LoopForever+0x16>)
  movs r3, #0
 800385e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003860:	e001      	b.n	8003866 <LoopFillZerobss>

08003862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003864:	3204      	adds	r2, #4

08003866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003868:	d3fb      	bcc.n	8003862 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800386a:	f7ff ffa5 	bl	80037b8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800386e:	f000 f811 	bl	8003894 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003872:	f7ff fbe9 	bl	8003048 <main>

08003876 <LoopForever>:

LoopForever:
    b LoopForever
 8003876:	e7fe      	b.n	8003876 <LoopForever>
  ldr   r0, =_estack
 8003878:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800387c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003880:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8003884:	08003a04 	.word	0x08003a04
  ldr r2, =_sbss
 8003888:	20000008 	.word	0x20000008
  ldr r4, =_ebss
 800388c:	200000f4 	.word	0x200000f4

08003890 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003890:	e7fe      	b.n	8003890 <ADC1_COMP_IRQHandler>
	...

08003894 <__libc_init_array>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	2600      	movs	r6, #0
 8003898:	4d0c      	ldr	r5, [pc, #48]	; (80038cc <__libc_init_array+0x38>)
 800389a:	4c0d      	ldr	r4, [pc, #52]	; (80038d0 <__libc_init_array+0x3c>)
 800389c:	1b64      	subs	r4, r4, r5
 800389e:	10a4      	asrs	r4, r4, #2
 80038a0:	42a6      	cmp	r6, r4
 80038a2:	d109      	bne.n	80038b8 <__libc_init_array+0x24>
 80038a4:	2600      	movs	r6, #0
 80038a6:	f000 f821 	bl	80038ec <_init>
 80038aa:	4d0a      	ldr	r5, [pc, #40]	; (80038d4 <__libc_init_array+0x40>)
 80038ac:	4c0a      	ldr	r4, [pc, #40]	; (80038d8 <__libc_init_array+0x44>)
 80038ae:	1b64      	subs	r4, r4, r5
 80038b0:	10a4      	asrs	r4, r4, #2
 80038b2:	42a6      	cmp	r6, r4
 80038b4:	d105      	bne.n	80038c2 <__libc_init_array+0x2e>
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	00b3      	lsls	r3, r6, #2
 80038ba:	58eb      	ldr	r3, [r5, r3]
 80038bc:	4798      	blx	r3
 80038be:	3601      	adds	r6, #1
 80038c0:	e7ee      	b.n	80038a0 <__libc_init_array+0xc>
 80038c2:	00b3      	lsls	r3, r6, #2
 80038c4:	58eb      	ldr	r3, [r5, r3]
 80038c6:	4798      	blx	r3
 80038c8:	3601      	adds	r6, #1
 80038ca:	e7f2      	b.n	80038b2 <__libc_init_array+0x1e>
 80038cc:	080039fc 	.word	0x080039fc
 80038d0:	080039fc 	.word	0x080039fc
 80038d4:	080039fc 	.word	0x080039fc
 80038d8:	08003a00 	.word	0x08003a00

080038dc <memset>:
 80038dc:	0003      	movs	r3, r0
 80038de:	1882      	adds	r2, r0, r2
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d100      	bne.n	80038e6 <memset+0xa>
 80038e4:	4770      	bx	lr
 80038e6:	7019      	strb	r1, [r3, #0]
 80038e8:	3301      	adds	r3, #1
 80038ea:	e7f9      	b.n	80038e0 <memset+0x4>

080038ec <_init>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	46c0      	nop			; (mov r8, r8)
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr

080038f8 <_fini>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fe:	bc08      	pop	{r3}
 8003900:	469e      	mov	lr, r3
 8003902:	4770      	bx	lr
